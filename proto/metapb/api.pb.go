// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package metapb is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		RequestHeader
		ResponseHeader
		NotLeader
		NoLeader
		PartitionNotFound
		MsgTooLarge
		Error
*/
package metapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/tiglabs/baud/proto/metapb"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RequestHeader struct {
	ReqId string `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type ResponseHeader struct {
	ReqId   string   `protobuf:"bytes,1,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Code    RespCode `protobuf:"varint,2,opt,name=code,proto3,casttype=RespCode" json:"code,omitempty"`
	Message string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Error   Error    `protobuf:"bytes,4,opt,name=error" json:"error"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type NotLeader struct {
	PartitionID PartitionID         `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
	NodeID      NodeID              `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3,casttype=NodeID" json:"node_id,omitempty"`
	NodeAddr    string              `protobuf:"bytes,3,opt,name=node_addr,json=nodeAddr,proto3" json:"node_addr,omitempty"`
	Epoch       meta.PartitionEpoch `protobuf:"bytes,4,opt,name=epoch" json:"epoch"`
}

func (m *NotLeader) Reset()                    { *m = NotLeader{} }
func (*NotLeader) ProtoMessage()               {}
func (*NotLeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type NoLeader struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *NoLeader) Reset()                    { *m = NoLeader{} }
func (*NoLeader) ProtoMessage()               {}
func (*NoLeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type PartitionNotFound struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
}

func (m *PartitionNotFound) Reset()                    { *m = PartitionNotFound{} }
func (*PartitionNotFound) ProtoMessage()               {}
func (*PartitionNotFound) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type MsgTooLarge struct {
	PartitionID PartitionID `protobuf:"varint,1,opt,name=partition_id,json=partitionId,proto3,casttype=PartitionID" json:"partition_id,omitempty"`
	MsgSize     uint64      `protobuf:"varint,2,opt,name=msg_size,json=msgSize,proto3" json:"msg_size,omitempty"`
}

func (m *MsgTooLarge) Reset()                    { *m = MsgTooLarge{} }
func (*MsgTooLarge) ProtoMessage()               {}
func (*MsgTooLarge) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type Error struct {
	NotLeader         *NotLeader         `protobuf:"bytes,1,opt,name=not_leader,json=notLeader" json:"not_leader,omitempty"`
	NoLeader          *NoLeader          `protobuf:"bytes,2,opt,name=no_leader,json=noLeader" json:"no_leader,omitempty"`
	PartitionNotFound *PartitionNotFound `protobuf:"bytes,3,opt,name=partition_not_found,json=partitionNotFound" json:"partition_not_found,omitempty"`
	MsgTooLarge       *MsgTooLarge       `protobuf:"bytes,4,opt,name=msg_too_large,json=msgTooLarge" json:"msg_too_large,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

func init() {
	proto.RegisterType((*RequestHeader)(nil), "RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "ResponseHeader")
	proto.RegisterType((*NotLeader)(nil), "NotLeader")
	proto.RegisterType((*NoLeader)(nil), "NoLeader")
	proto.RegisterType((*PartitionNotFound)(nil), "PartitionNotFound")
	proto.RegisterType((*MsgTooLarge)(nil), "MsgTooLarge")
	proto.RegisterType((*Error)(nil), "Error")
}
func (this *RequestHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestHeader)
	if !ok {
		that2, ok := that.(RequestHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReqId != that1.ReqId {
		return false
	}
	return true
}
func (this *ResponseHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseHeader)
	if !ok {
		that2, ok := that.(ResponseHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ReqId != that1.ReqId {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if !this.Error.Equal(&that1.Error) {
		return false
	}
	return true
}
func (this *NotLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NotLeader)
	if !ok {
		that2, ok := that.(NotLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.NodeAddr != that1.NodeAddr {
		return false
	}
	if !this.Epoch.Equal(&that1.Epoch) {
		return false
	}
	return true
}
func (this *NoLeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NoLeader)
	if !ok {
		that2, ok := that.(NoLeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	return true
}
func (this *PartitionNotFound) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionNotFound)
	if !ok {
		that2, ok := that.(PartitionNotFound)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	return true
}
func (this *MsgTooLarge) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgTooLarge)
	if !ok {
		that2, ok := that.(MsgTooLarge)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if this.MsgSize != that1.MsgSize {
		return false
	}
	return true
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.NotLeader.Equal(that1.NotLeader) {
		return false
	}
	if !this.NoLeader.Equal(that1.NoLeader) {
		return false
	}
	if !this.PartitionNotFound.Equal(that1.PartitionNotFound) {
		return false
	}
	if !this.MsgTooLarge.Equal(that1.MsgTooLarge) {
		return false
	}
	return true
}
func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReqId)))
		i += copy(dAtA[i:], m.ReqId)
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReqId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.ReqId)))
		i += copy(dAtA[i:], m.ReqId)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Error.Size()))
	n1, err := m.Error.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NodeID))
	}
	if len(m.NodeAddr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.NodeAddr)))
		i += copy(dAtA[i:], m.NodeAddr)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Epoch.Size()))
	n2, err := m.Epoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *NoLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NoLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionID))
	}
	return i, nil
}

func (m *PartitionNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionID))
	}
	return i, nil
}

func (m *MsgTooLarge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTooLarge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PartitionID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionID))
	}
	if m.MsgSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MsgSize))
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NotLeader != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NotLeader.Size()))
		n3, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.NoLeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.NoLeader.Size()))
		n4, err := m.NoLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.PartitionNotFound != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.PartitionNotFound.Size()))
		n5, err := m.PartitionNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.MsgTooLarge != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.MsgTooLarge.Size()))
		n6, err := m.MsgTooLarge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRequestHeader(r randyApi, easy bool) *RequestHeader {
	this := &RequestHeader{}
	this.ReqId = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResponseHeader(r randyApi, easy bool) *ResponseHeader {
	this := &ResponseHeader{}
	this.ReqId = string(randStringApi(r))
	this.Code = RespCode(r.Uint32())
	this.Message = string(randStringApi(r))
	v1 := NewPopulatedError(r, easy)
	this.Error = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNotLeader(r randyApi, easy bool) *NotLeader {
	this := &NotLeader{}
	this.PartitionID = PartitionID(r.Uint32())
	this.NodeID = NodeID(r.Uint32())
	this.NodeAddr = string(randStringApi(r))
	v2 := meta.NewPopulatedPartitionEpoch(r, easy)
	this.Epoch = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNoLeader(r randyApi, easy bool) *NoLeader {
	this := &NoLeader{}
	this.PartitionID = PartitionID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionNotFound(r randyApi, easy bool) *PartitionNotFound {
	this := &PartitionNotFound{}
	this.PartitionID = PartitionID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMsgTooLarge(r randyApi, easy bool) *MsgTooLarge {
	this := &MsgTooLarge{}
	this.PartitionID = PartitionID(r.Uint32())
	this.MsgSize = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedError(r randyApi, easy bool) *Error {
	this := &Error{}
	fieldNum := r.Intn(4)
	switch fieldNum {
	case 0:
		this.NotLeader = NewPopulatedNotLeader(r, easy)
	case 1:
		this.NoLeader = NewPopulatedNoLeader(r, easy)
	case 2:
		this.PartitionNotFound = NewPopulatedPartitionNotFound(r, easy)
	case 3:
		this.MsgTooLarge = NewPopulatedMsgTooLarge(r, easy)
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReqId)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovApi(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Error.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *NotLeader) Size() (n int) {
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovApi(uint64(m.PartitionID))
	}
	if m.NodeID != 0 {
		n += 1 + sovApi(uint64(m.NodeID))
	}
	l = len(m.NodeAddr)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = m.Epoch.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *NoLeader) Size() (n int) {
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovApi(uint64(m.PartitionID))
	}
	return n
}

func (m *PartitionNotFound) Size() (n int) {
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovApi(uint64(m.PartitionID))
	}
	return n
}

func (m *MsgTooLarge) Size() (n int) {
	var l int
	_ = l
	if m.PartitionID != 0 {
		n += 1 + sovApi(uint64(m.PartitionID))
	}
	if m.MsgSize != 0 {
		n += 1 + sovApi(uint64(m.MsgSize))
	}
	return n
}

func (m *Error) Size() (n int) {
	var l int
	_ = l
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.NoLeader != nil {
		l = m.NoLeader.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.PartitionNotFound != nil {
		l = m.PartitionNotFound.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.MsgTooLarge != nil {
		l = m.MsgTooLarge.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHeader{`,
		`ReqId:` + fmt.Sprintf("%v", this.ReqId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseHeader{`,
		`ReqId:` + fmt.Sprintf("%v", this.ReqId) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Error:` + strings.Replace(strings.Replace(this.Error.String(), "Error", "Error", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NotLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NotLeader{`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`NodeAddr:` + fmt.Sprintf("%v", this.NodeAddr) + `,`,
		`Epoch:` + strings.Replace(strings.Replace(this.Epoch.String(), "PartitionEpoch", "meta.PartitionEpoch", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NoLeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NoLeader{`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionNotFound) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionNotFound{`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MsgTooLarge) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MsgTooLarge{`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`MsgSize:` + fmt.Sprintf("%v", this.MsgSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`NotLeader:` + strings.Replace(fmt.Sprintf("%v", this.NotLeader), "NotLeader", "NotLeader", 1) + `,`,
		`NoLeader:` + strings.Replace(fmt.Sprintf("%v", this.NoLeader), "NoLeader", "NoLeader", 1) + `,`,
		`PartitionNotFound:` + strings.Replace(fmt.Sprintf("%v", this.PartitionNotFound), "PartitionNotFound", "PartitionNotFound", 1) + `,`,
		`MsgTooLarge:` + strings.Replace(fmt.Sprintf("%v", this.MsgTooLarge), "MsgTooLarge", "MsgTooLarge", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (this *Error) GetValue() interface{} {
	if this.NotLeader != nil {
		return this.NotLeader
	}
	if this.NoLeader != nil {
		return this.NoLeader
	}
	if this.PartitionNotFound != nil {
		return this.PartitionNotFound
	}
	if this.MsgTooLarge != nil {
		return this.MsgTooLarge
	}
	return nil
}

func (this *Error) SetValue(value interface{}) bool {
	switch vt := value.(type) {
	case *NotLeader:
		this.NotLeader = vt
	case *NoLeader:
		this.NoLeader = vt
	case *PartitionNotFound:
		this.PartitionNotFound = vt
	case *MsgTooLarge:
		this.MsgTooLarge = vt
	default:
		return false
	}
	return true
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (RespCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Error.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NoLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NoLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NoLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTooLarge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTooLarge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTooLarge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgSize", wireType)
			}
			m.MsgSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NoLeader == nil {
				m.NoLeader = &NoLeader{}
			}
			if err := m.NoLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PartitionNotFound == nil {
				m.PartitionNotFound = &PartitionNotFound{}
			}
			if err := m.PartitionNotFound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTooLarge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgTooLarge == nil {
				m.MsgTooLarge = &MsgTooLarge{}
			}
			if err := m.MsgTooLarge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 553 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x95, 0xc4, 0x89, 0x9f, 0x13, 0x50, 0x0d, 0x48, 0x01, 0xa4, 0x4b, 0xe4, 0xa1, 0x0a,
	0x42, 0x75, 0x50, 0xd8, 0x18, 0x90, 0x1a, 0x28, 0x6a, 0xa4, 0x36, 0x42, 0x06, 0x31, 0xb0, 0x44,
	0x76, 0xee, 0xea, 0x5a, 0xc4, 0x7e, 0x8e, 0xed, 0x2c, 0x9d, 0xd8, 0x58, 0xf9, 0x09, 0x8c, 0xfc,
	0x04, 0x46, 0x36, 0x32, 0x32, 0x21, 0xa6, 0xa8, 0x31, 0x7f, 0x80, 0x11, 0x75, 0x42, 0x77, 0x76,
	0xdc, 0xa2, 0x4a, 0x9d, 0x32, 0xd9, 0xdf, 0xbb, 0xef, 0xbb, 0x7b, 0xef, 0xfb, 0xee, 0x40, 0x73,
	0x22, 0xdf, 0x8a, 0x62, 0x4c, 0xf1, 0xfe, 0xae, 0xe7, 0xa7, 0x27, 0x73, 0xd7, 0x9a, 0x60, 0xd0,
	0xf3, 0xd0, 0xc3, 0x9e, 0x2c, 0xbb, 0xf3, 0x63, 0x89, 0x24, 0x90, 0x7f, 0x05, 0xbd, 0x77, 0x89,
	0x9e, 0xfa, 0xde, 0xd4, 0x71, 0x93, 0x9e, 0xeb, 0xcc, 0x59, 0x2e, 0xeb, 0x05, 0x3c, 0x75, 0x22,
	0x57, 0x7e, 0x72, 0x81, 0xb9, 0x03, 0x4d, 0x9b, 0xcf, 0xe6, 0x3c, 0x49, 0x0f, 0xb8, 0xc3, 0x78,
	0x6c, 0xdc, 0x05, 0x35, 0xe6, 0xb3, 0xb1, 0xcf, 0x5a, 0xa4, 0x43, 0xba, 0x9a, 0x5d, 0x8d, 0xf9,
	0x6c, 0xc8, 0xcc, 0x8f, 0x04, 0x6e, 0xda, 0x3c, 0x89, 0x30, 0x4c, 0xf8, 0xb5, 0x4c, 0xa3, 0x03,
	0x95, 0x09, 0x32, 0xde, 0xda, 0xea, 0x90, 0x6e, 0x73, 0xd0, 0x38, 0x5f, 0xb6, 0xeb, 0x42, 0xf8,
	0x1c, 0x19, 0xb7, 0xe5, 0x8a, 0xd1, 0x82, 0x5a, 0xc0, 0x93, 0xc4, 0xf1, 0x78, 0xeb, 0x86, 0x54,
	0xae, 0xa1, 0x61, 0x42, 0x95, 0xc7, 0x31, 0xc6, 0xad, 0x4a, 0x87, 0x74, 0xf5, 0xbe, 0x6a, 0xed,
	0x0b, 0x34, 0xa8, 0x2c, 0x96, 0x6d, 0xc5, 0xce, 0x97, 0xcc, 0xef, 0x04, 0xb4, 0x11, 0xa6, 0x87,
	0x79, 0x13, 0x7b, 0xd0, 0x88, 0x9c, 0x38, 0xf5, 0x53, 0x1f, 0xc3, 0x75, 0x2b, 0xcd, 0x01, 0xcd,
	0x96, 0x6d, 0xfd, 0xd5, 0xba, 0x3e, 0x7c, 0x71, 0xfe, 0x3f, 0xb4, 0xf5, 0x52, 0x33, 0x64, 0xc6,
	0x2e, 0xd4, 0x42, 0x64, 0x5c, 0xa8, 0xf3, 0x9e, 0xef, 0x64, 0xcb, 0xb6, 0x3a, 0x42, 0xc6, 0xa5,
	0xb0, 0xf8, 0xb3, 0x55, 0x41, 0x1a, 0x32, 0xe3, 0x01, 0x68, 0x92, 0xee, 0x30, 0x16, 0x17, 0xfd,
	0xd7, 0x45, 0x61, 0x8f, 0xb1, 0xd8, 0x78, 0x04, 0x55, 0x1e, 0xe1, 0xe4, 0xa4, 0x18, 0xe0, 0x96,
	0x55, 0x9e, 0xba, 0x2f, 0xca, 0xe5, 0x24, 0x02, 0x98, 0x47, 0x50, 0x1f, 0xe1, 0xc6, 0xe6, 0x30,
	0xdf, 0xc2, 0x76, 0xb9, 0x36, 0xc2, 0xf4, 0x25, 0xce, 0x43, 0xb6, 0x89, 0x7d, 0xdf, 0x83, 0x7e,
	0x94, 0x78, 0x6f, 0x10, 0x0f, 0x9d, 0xd8, 0xe3, 0x9b, 0x70, 0xfc, 0x1e, 0xd4, 0x83, 0xc4, 0x1b,
	0x27, 0xfe, 0x69, 0x7e, 0x4d, 0x2a, 0x76, 0x2d, 0x48, 0xbc, 0xd7, 0xfe, 0x29, 0x37, 0x7f, 0x12,
	0xa8, 0xca, 0xd0, 0x8d, 0x87, 0x00, 0x21, 0xa6, 0xe3, 0xa9, 0xf4, 0x47, 0x9e, 0xa2, 0xf7, 0xc1,
	0x2a, 0x93, 0xb7, 0xb5, 0xb0, 0xbc, 0x04, 0x3b, 0x22, 0x92, 0x35, 0x73, 0x4b, 0x32, 0x35, 0x6b,
	0x6d, 0xad, 0x48, 0xa7, 0xe0, 0x0d, 0xe0, 0xf6, 0x45, 0xeb, 0x62, 0xf3, 0x63, 0xe1, 0x91, 0x0c,
	0x51, 0xef, 0x1b, 0xd6, 0x15, 0xf7, 0xec, 0xed, 0xe8, 0x8a, 0xa1, 0x8f, 0xa1, 0x29, 0x7a, 0x4f,
	0x11, 0xc7, 0x53, 0xe1, 0x47, 0x91, 0x74, 0xc3, 0xba, 0xe4, 0x91, 0xad, 0x07, 0x17, 0xe0, 0x69,
	0x65, 0xf1, 0xb9, 0x4d, 0x06, 0xcf, 0x16, 0x2b, 0xaa, 0xfc, 0x5a, 0x51, 0xe5, 0x6c, 0x45, 0x95,
	0x3f, 0x2b, 0xaa, 0xfc, 0x5d, 0x51, 0xf2, 0x21, 0xa3, 0xe4, 0x4b, 0x46, 0xc9, 0xd7, 0x8c, 0x2a,
	0xdf, 0x32, 0xaa, 0x2c, 0x32, 0x4a, 0x7e, 0x64, 0x94, 0x9c, 0x65, 0x94, 0x7c, 0xfa, 0x4d, 0x95,
	0x03, 0xf2, 0x4e, 0xcd, 0xdf, 0xac, 0xab, 0xca, 0xf7, 0xfa, 0xe4, 0x5f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0x43, 0xf9, 0x57, 0x1c, 0x04, 0x00, 0x00,
}

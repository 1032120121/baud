// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

/*
	Package metapb is a generated protocol buffer package.

	It is generated from these files:
		meta.proto

	It has these top-level messages:
		RequestHeader
		ResponseHeader
		DocID
		DB
		Space
		PartitionEpoch
		Partition
		Replica
		Node
		RaftAddrs
*/
package metapb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SpaceStatus int32

const (
	SS_Invalid  SpaceStatus = 0
	SS_Init     SpaceStatus = 1
	SS_Prepare  SpaceStatus = 2
	SS_Running  SpaceStatus = 3
	SS_Delete   SpaceStatus = 4
	SS_Deleting SpaceStatus = 5
)

var SpaceStatus_name = map[int32]string{
	0: "SS_Invalid",
	1: "SS_Init",
	2: "SS_Prepare",
	3: "SS_Running",
	4: "SS_Delete",
	5: "SS_Deleting",
}
var SpaceStatus_value = map[string]int32{
	"SS_Invalid":  0,
	"SS_Init":     1,
	"SS_Prepare":  2,
	"SS_Running":  3,
	"SS_Delete":   4,
	"SS_Deleting": 5,
}

func (x SpaceStatus) String() string {
	return proto.EnumName(SpaceStatus_name, int32(x))
}
func (SpaceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

type SpaceType int32

const (
	ST_ENTITY SpaceType = 0
	ST_EDGE   SpaceType = 1
	ST_BLOB   SpaceType = 2
)

var SpaceType_name = map[int32]string{
	0: "ST_ENTITY",
	1: "ST_EDGE",
	2: "ST_BLOB",
}
var SpaceType_value = map[string]int32{
	"ST_ENTITY": 0,
	"ST_EDGE":   1,
	"ST_BLOB":   2,
}

func (x SpaceType) String() string {
	return proto.EnumName(SpaceType_name, int32(x))
}
func (SpaceType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

type PartitionStatus int32

const (
	PartitionStatus_PA_Invalid   PartitionStatus = 0
	PartitionStatus_PA_NOTREAD   PartitionStatus = 1
	PartitionStatus_PA_READONLY  PartitionStatus = 2
	PartitionStatus_PA_READWRITE PartitionStatus = 3
	PartitionStatus_PA_SPLITTING PartitionStatus = 4
)

var PartitionStatus_name = map[int32]string{
	0: "PA_Invalid",
	1: "PA_NOTREAD",
	2: "PA_READONLY",
	3: "PA_READWRITE",
	4: "PA_SPLITTING",
}
var PartitionStatus_value = map[string]int32{
	"PA_Invalid":   0,
	"PA_NOTREAD":   1,
	"PA_READONLY":  2,
	"PA_READWRITE": 3,
	"PA_SPLITTING": 4,
}

func (x PartitionStatus) String() string {
	return proto.EnumName(PartitionStatus_name, int32(x))
}
func (PartitionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

type RequestHeader struct {
	ClusterId uint32 `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

type ResponseHeader struct {
	Code    RespCode `protobuf:"varint,1,opt,name=code,proto3,casttype=RespCode" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

type DocID struct {
	SlotID SlotID `protobuf:"varint,1,opt,name=slot_id,json=slotId,proto3,casttype=SlotID" json:"slot_id,omitempty"`
	SeqNo  uint64 `protobuf:"varint,2,opt,name=seq_no,json=seqNo,proto3" json:"seq_no,omitempty"`
}

func (m *DocID) Reset()                    { *m = DocID{} }
func (*DocID) ProtoMessage()               {}
func (*DocID) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

type DB struct {
	ID   DBID   `protobuf:"varint,1,opt,name=id,proto3,casttype=DBID" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DB) Reset()                    { *m = DB{} }
func (*DB) ProtoMessage()               {}
func (*DB) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{3} }

type Space struct {
	ID     SpaceID     `protobuf:"varint,1,opt,name=id,proto3,casttype=SpaceID" json:"id,omitempty"`
	DB     DBID        `protobuf:"varint,2,opt,name=db,proto3,casttype=DBID" json:"db,omitempty"`
	DbName string      `protobuf:"bytes,3,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Name   string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type   SpaceType   `protobuf:"varint,5,opt,name=type,proto3,enum=SpaceType" json:"type,omitempty"`
	Status SpaceStatus `protobuf:"varint,6,opt,name=status,proto3,enum=SpaceStatus" json:"status,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{4} }

type PartitionEpoch struct {
	// Conf change version, auto increment when add or remove peer
	ConfVersion uint64 `protobuf:"varint,1,opt,name=conf_version,json=confVersion,proto3" json:"conf_version,omitempty"`
	// Partition version, auto increment when split or merge
	Version uint64 `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *PartitionEpoch) Reset()                    { *m = PartitionEpoch{} }
func (*PartitionEpoch) ProtoMessage()               {}
func (*PartitionEpoch) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{5} }

type Partition struct {
	ID        PartitionID     `protobuf:"varint,1,opt,name=id,proto3,casttype=PartitionID" json:"id,omitempty"`
	DB        DBID            `protobuf:"varint,2,opt,name=db,proto3,casttype=DBID" json:"db,omitempty"`
	Space     SpaceID         `protobuf:"varint,3,opt,name=space,proto3,casttype=SpaceID" json:"space,omitempty"`
	StartSlot SlotID          `protobuf:"varint,4,opt,name=start_slot,json=startSlot,proto3,casttype=SlotID" json:"start_slot,omitempty"`
	EndSlot   SlotID          `protobuf:"varint,5,opt,name=end_slot,json=endSlot,proto3,casttype=SlotID" json:"end_slot,omitempty"`
	Replicas  []Replica       `protobuf:"bytes,6,rep,name=replicas" json:"replicas"`
	Status    PartitionStatus `protobuf:"varint,7,opt,name=status,proto3,enum=PartitionStatus" json:"status,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{6} }

type Replica struct {
	ID     ReplicaID `protobuf:"varint,1,opt,name=id,proto3,casttype=ReplicaID" json:"id,omitempty"`
	NodeID NodeID    `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=NodeID" json:"nodeID,omitempty"`
}

func (m *Replica) Reset()                    { *m = Replica{} }
func (*Replica) ProtoMessage()               {}
func (*Replica) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{7} }

type Node struct {
	ID        NodeID `protobuf:"varint,1,opt,name=id,proto3,casttype=NodeID" json:"id,omitempty"`
	Ip        string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port      int    `protobuf:"varint,3,opt,name=port,proto3,casttype=int" json:"port,omitempty"`
	Zone      string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	Version   uint32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
	RaftAddrs `protobuf:"bytes,6,opt,name=raft_addrs,json=raftAddrs,embedded=raft_addrs" json:"raft_addrs"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{8} }

type RaftAddrs struct {
	HeartbeatAddr string `protobuf:"bytes,1,opt,name=heartbeat_addr,json=heartbeatAddr,proto3" json:"heartbeat_addr,omitempty"`
	ReplicateAddr string `protobuf:"bytes,2,opt,name=replicate_addr,json=replicateAddr,proto3" json:"replicate_addr,omitempty"`
}

func (m *RaftAddrs) Reset()                    { *m = RaftAddrs{} }
func (*RaftAddrs) ProtoMessage()               {}
func (*RaftAddrs) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{9} }

func init() {
	proto.RegisterType((*RequestHeader)(nil), "RequestHeader")
	proto.RegisterType((*ResponseHeader)(nil), "ResponseHeader")
	proto.RegisterType((*DocID)(nil), "DocID")
	proto.RegisterType((*DB)(nil), "DB")
	proto.RegisterType((*Space)(nil), "Space")
	proto.RegisterType((*PartitionEpoch)(nil), "PartitionEpoch")
	proto.RegisterType((*Partition)(nil), "Partition")
	proto.RegisterType((*Replica)(nil), "Replica")
	proto.RegisterType((*Node)(nil), "Node")
	proto.RegisterType((*RaftAddrs)(nil), "RaftAddrs")
	proto.RegisterEnum("SpaceStatus", SpaceStatus_name, SpaceStatus_value)
	proto.RegisterEnum("SpaceType", SpaceType_name, SpaceType_value)
	proto.RegisterEnum("PartitionStatus", PartitionStatus_name, PartitionStatus_value)
}
func (this *RequestHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RequestHeader)
	if !ok {
		that2, ok := that.(RequestHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ClusterId != that1.ClusterId {
		return false
	}
	return true
}
func (this *ResponseHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResponseHeader)
	if !ok {
		that2, ok := that.(ResponseHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *DocID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DocID)
	if !ok {
		that2, ok := that.(DocID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SlotID != that1.SlotID {
		return false
	}
	if this.SeqNo != that1.SeqNo {
		return false
	}
	return true
}
func (this *DB) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DB)
	if !ok {
		that2, ok := that.(DB)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	return true
}
func (this *Space) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Space)
	if !ok {
		that2, ok := that.(Space)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DB != that1.DB {
		return false
	}
	if this.DbName != that1.DbName {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *PartitionEpoch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionEpoch)
	if !ok {
		that2, ok := that.(PartitionEpoch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ConfVersion != that1.ConfVersion {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	return true
}
func (this *Partition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Partition)
	if !ok {
		that2, ok := that.(Partition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.DB != that1.DB {
		return false
	}
	if this.Space != that1.Space {
		return false
	}
	if this.StartSlot != that1.StartSlot {
		return false
	}
	if this.EndSlot != that1.EndSlot {
		return false
	}
	if len(this.Replicas) != len(that1.Replicas) {
		return false
	}
	for i := range this.Replicas {
		if !this.Replicas[i].Equal(&that1.Replicas[i]) {
			return false
		}
	}
	if this.Status != that1.Status {
		return false
	}
	return true
}
func (this *Replica) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Replica)
	if !ok {
		that2, ok := that.(Replica)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *Node) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Node)
	if !ok {
		that2, ok := that.(Node)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Zone != that1.Zone {
		return false
	}
	if this.Version != that1.Version {
		return false
	}
	if !this.RaftAddrs.Equal(&that1.RaftAddrs) {
		return false
	}
	return true
}
func (this *RaftAddrs) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftAddrs)
	if !ok {
		that2, ok := that.(RaftAddrs)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.HeartbeatAddr != that1.HeartbeatAddr {
		return false
	}
	if this.ReplicateAddr != that1.ReplicateAddr {
		return false
	}
	return true
}
func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ClusterId))
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *DocID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocID) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SlotID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.SlotID))
	}
	if m.SeqNo != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.SeqNo))
	}
	return i, nil
}

func (m *DB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ID))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ID))
	}
	if m.DB != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.DB))
	}
	if len(m.DbName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Type))
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *PartitionEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionEpoch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ConfVersion != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ConfVersion))
	}
	if m.Version != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Version))
	}
	return i, nil
}

func (m *Partition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ID))
	}
	if m.DB != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.DB))
	}
	if m.Space != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Space))
	}
	if m.StartSlot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.StartSlot))
	}
	if m.EndSlot != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.EndSlot))
	}
	if len(m.Replicas) > 0 {
		for _, msg := range m.Replicas {
			dAtA[i] = 0x32
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *Replica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.ID))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if m.Port != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Port))
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	if m.Version != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Version))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintMeta(dAtA, i, uint64(m.RaftAddrs.Size()))
	n1, err := m.RaftAddrs.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *RaftAddrs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftAddrs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HeartbeatAddr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.HeartbeatAddr)))
		i += copy(dAtA[i:], m.HeartbeatAddr)
	}
	if len(m.ReplicateAddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.ReplicateAddr)))
		i += copy(dAtA[i:], m.ReplicateAddr)
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRequestHeader(r randyMeta, easy bool) *RequestHeader {
	this := &RequestHeader{}
	this.ClusterId = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResponseHeader(r randyMeta, easy bool) *ResponseHeader {
	this := &ResponseHeader{}
	this.Code = RespCode(r.Uint32())
	this.Message = string(randStringMeta(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDocID(r randyMeta, easy bool) *DocID {
	this := &DocID{}
	this.SlotID = SlotID(r.Uint32())
	this.SeqNo = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDB(r randyMeta, easy bool) *DB {
	this := &DB{}
	this.ID = DBID(r.Uint32())
	this.Name = string(randStringMeta(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSpace(r randyMeta, easy bool) *Space {
	this := &Space{}
	this.ID = SpaceID(r.Uint32())
	this.DB = DBID(r.Uint32())
	this.DbName = string(randStringMeta(r))
	this.Name = string(randStringMeta(r))
	this.Type = SpaceType([]int32{0, 1, 2}[r.Intn(3)])
	this.Status = SpaceStatus([]int32{0, 1, 2, 3, 4, 5}[r.Intn(6)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionEpoch(r randyMeta, easy bool) *PartitionEpoch {
	this := &PartitionEpoch{}
	this.ConfVersion = uint64(uint64(r.Uint32()))
	this.Version = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartition(r randyMeta, easy bool) *Partition {
	this := &Partition{}
	this.ID = PartitionID(r.Uint32())
	this.DB = DBID(r.Uint32())
	this.Space = SpaceID(r.Uint32())
	this.StartSlot = SlotID(r.Uint32())
	this.EndSlot = SlotID(r.Uint32())
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Replicas = make([]Replica, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedReplica(r, easy)
			this.Replicas[i] = *v2
		}
	}
	this.Status = PartitionStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedReplica(r randyMeta, easy bool) *Replica {
	this := &Replica{}
	this.ID = ReplicaID(uint64(r.Uint32()))
	this.NodeID = NodeID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNode(r randyMeta, easy bool) *Node {
	this := &Node{}
	this.ID = NodeID(r.Uint32())
	this.Ip = string(randStringMeta(r))
	this.Port = int(r.Int31())
	if r.Intn(2) == 0 {
		this.Port *= -1
	}
	this.Zone = string(randStringMeta(r))
	this.Version = uint32(r.Uint32())
	v3 := NewPopulatedRaftAddrs(r, easy)
	this.RaftAddrs = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftAddrs(r randyMeta, easy bool) *RaftAddrs {
	this := &RaftAddrs{}
	this.HeartbeatAddr = string(randStringMeta(r))
	this.ReplicateAddr = string(randStringMeta(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMeta interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMeta(r randyMeta) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMeta(r randyMeta) string {
	v4 := r.Intn(100)
	tmps := make([]rune, v4)
	for i := 0; i < v4; i++ {
		tmps[i] = randUTF8RuneMeta(r)
	}
	return string(tmps)
}
func randUnrecognizedMeta(r randyMeta, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMeta(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMeta(dAtA []byte, r randyMeta, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(key))
		v5 := r.Int63()
		if r.Intn(2) == 0 {
			v5 *= -1
		}
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(v5))
	case 1:
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMeta(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMeta(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovMeta(uint64(m.ClusterId))
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovMeta(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *DocID) Size() (n int) {
	var l int
	_ = l
	if m.SlotID != 0 {
		n += 1 + sovMeta(uint64(m.SlotID))
	}
	if m.SeqNo != 0 {
		n += 1 + sovMeta(uint64(m.SeqNo))
	}
	return n
}

func (m *DB) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMeta(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *Space) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMeta(uint64(m.ID))
	}
	if m.DB != 0 {
		n += 1 + sovMeta(uint64(m.DB))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovMeta(uint64(m.Type))
	}
	if m.Status != 0 {
		n += 1 + sovMeta(uint64(m.Status))
	}
	return n
}

func (m *PartitionEpoch) Size() (n int) {
	var l int
	_ = l
	if m.ConfVersion != 0 {
		n += 1 + sovMeta(uint64(m.ConfVersion))
	}
	if m.Version != 0 {
		n += 1 + sovMeta(uint64(m.Version))
	}
	return n
}

func (m *Partition) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMeta(uint64(m.ID))
	}
	if m.DB != 0 {
		n += 1 + sovMeta(uint64(m.DB))
	}
	if m.Space != 0 {
		n += 1 + sovMeta(uint64(m.Space))
	}
	if m.StartSlot != 0 {
		n += 1 + sovMeta(uint64(m.StartSlot))
	}
	if m.EndSlot != 0 {
		n += 1 + sovMeta(uint64(m.EndSlot))
	}
	if len(m.Replicas) > 0 {
		for _, e := range m.Replicas {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovMeta(uint64(m.Status))
	}
	return n
}

func (m *Replica) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMeta(uint64(m.ID))
	}
	if m.NodeID != 0 {
		n += 1 + sovMeta(uint64(m.NodeID))
	}
	return n
}

func (m *Node) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMeta(uint64(m.ID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovMeta(uint64(m.Port))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovMeta(uint64(m.Version))
	}
	l = m.RaftAddrs.Size()
	n += 1 + l + sovMeta(uint64(l))
	return n
}

func (m *RaftAddrs) Size() (n int) {
	var l int
	_ = l
	l = len(m.HeartbeatAddr)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.ReplicateAddr)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RequestHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RequestHeader{`,
		`ClusterId:` + fmt.Sprintf("%v", this.ClusterId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResponseHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResponseHeader{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DocID) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DocID{`,
		`SlotID:` + fmt.Sprintf("%v", this.SlotID) + `,`,
		`SeqNo:` + fmt.Sprintf("%v", this.SeqNo) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DB) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DB{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Space) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Space{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DB:` + fmt.Sprintf("%v", this.DB) + `,`,
		`DbName:` + fmt.Sprintf("%v", this.DbName) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionEpoch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionEpoch{`,
		`ConfVersion:` + fmt.Sprintf("%v", this.ConfVersion) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Partition) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Partition{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`DB:` + fmt.Sprintf("%v", this.DB) + `,`,
		`Space:` + fmt.Sprintf("%v", this.Space) + `,`,
		`StartSlot:` + fmt.Sprintf("%v", this.StartSlot) + `,`,
		`EndSlot:` + fmt.Sprintf("%v", this.EndSlot) + `,`,
		`Replicas:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Replicas), "Replica", "Replica", 1), `&`, ``, 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Replica) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Replica{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Node) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Node{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Zone:` + fmt.Sprintf("%v", this.Zone) + `,`,
		`Version:` + fmt.Sprintf("%v", this.Version) + `,`,
		`RaftAddrs:` + strings.Replace(strings.Replace(this.RaftAddrs.String(), "RaftAddrs", "RaftAddrs", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftAddrs) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftAddrs{`,
		`HeartbeatAddr:` + fmt.Sprintf("%v", this.HeartbeatAddr) + `,`,
		`ReplicateAddr:` + fmt.Sprintf("%v", this.ReplicateAddr) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMeta(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (RespCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DocID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlotID", wireType)
			}
			m.SlotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SlotID |= (SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqNo", wireType)
			}
			m.SeqNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqNo |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (SpaceID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			m.DB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DB |= (DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (SpaceType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (SpaceStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfVersion", wireType)
			}
			m.ConfVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfVersion |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			m.DB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DB |= (DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= (SpaceID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSlot", wireType)
			}
			m.StartSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSlot |= (SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndSlot", wireType)
			}
			m.EndSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndSlot |= (SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replicas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Replicas = append(m.Replicas, Replica{})
			if err := m.Replicas[len(m.Replicas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (PartitionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (ReplicaID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RaftAddrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftAddrs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftAddrs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftAddrs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeartbeatAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicateAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplicateAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 918 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x8b, 0xdb, 0x46,
	0x14, 0x97, 0x64, 0xd9, 0xb2, 0x9e, 0xd7, 0x8e, 0x3a, 0x6d, 0x88, 0x49, 0xa9, 0xec, 0xb8, 0x0d,
	0x98, 0xa5, 0x71, 0xca, 0x06, 0x4a, 0xe9, 0xa1, 0xb0, 0xaa, 0x4c, 0x22, 0xd8, 0x78, 0xcd, 0xd8,
	0xb4, 0x6c, 0x29, 0x08, 0xd9, 0x1a, 0x7b, 0x05, 0xb6, 0x46, 0x2b, 0x8d, 0x03, 0xe9, 0xa9, 0xc7,
	0x1e, 0xfb, 0x1d, 0x7a, 0xe9, 0x47, 0xc8, 0xa5, 0xa5, 0xc7, 0x3d, 0xe6, 0xd8, 0x93, 0x89, 0xd5,
	0x2f, 0xd0, 0x63, 0xd9, 0x53, 0x99, 0x91, 0x3c, 0x6b, 0xf6, 0x94, 0xdb, 0x7b, 0xbf, 0xf7, 0x7b,
	0x7f, 0xe6, 0xf7, 0x9e, 0x10, 0xc0, 0x9a, 0xb0, 0x60, 0x90, 0xa4, 0x94, 0xd1, 0x87, 0x4f, 0x96,
	0x11, 0xbb, 0xdc, 0xcc, 0x06, 0x73, 0xba, 0x7e, 0xba, 0xa4, 0x4b, 0xfa, 0x54, 0xc0, 0xb3, 0xcd,
	0x42, 0x78, 0xc2, 0x11, 0x56, 0x41, 0xef, 0x0d, 0xa0, 0x89, 0xc9, 0xd5, 0x86, 0x64, 0xec, 0x05,
	0x09, 0x42, 0x92, 0xa2, 0x4f, 0x00, 0xe6, 0xab, 0x4d, 0xc6, 0x48, 0xea, 0x47, 0x61, 0x5b, 0xed,
	0xaa, 0xfd, 0x26, 0x36, 0x4b, 0xc4, 0x0b, 0x7b, 0x67, 0xd0, 0xc2, 0x24, 0x4b, 0x68, 0x9c, 0x91,
	0x32, 0xa1, 0x0b, 0xfa, 0x9c, 0x86, 0xa4, 0xa0, 0x3a, 0x47, 0x37, 0xdb, 0x4e, 0x9d, 0x33, 0xbe,
	0xa5, 0x21, 0xc1, 0x22, 0x82, 0xda, 0x60, 0xac, 0x49, 0x96, 0x05, 0x4b, 0xd2, 0xd6, 0xba, 0x6a,
	0xdf, 0xc4, 0x7b, 0xb7, 0xf7, 0x12, 0xaa, 0x2e, 0x9d, 0x7b, 0x2e, 0x7a, 0x02, 0x46, 0xb6, 0xa2,
	0x4c, 0xb6, 0x74, 0x3e, 0xca, 0xb7, 0x9d, 0xda, 0x64, 0x45, 0x99, 0xe7, 0xde, 0x48, 0x0b, 0xd7,
	0x38, 0xc9, 0x0b, 0xd1, 0x7d, 0xa8, 0x65, 0xe4, 0xca, 0x8f, 0xa9, 0x28, 0xa8, 0xe3, 0x6a, 0x46,
	0xae, 0x46, 0xb4, 0xf7, 0x15, 0x68, 0xae, 0x83, 0x6c, 0xd0, 0x64, 0x99, 0x56, 0xbe, 0xed, 0x68,
	0xa2, 0x84, 0xee, 0x3a, 0x9e, 0x8b, 0xb5, 0x28, 0x44, 0x08, 0xf4, 0x38, 0x58, 0xef, 0x67, 0x11,
	0x76, 0xef, 0x0f, 0x15, 0xaa, 0x93, 0x24, 0x98, 0x13, 0xf4, 0xe8, 0x20, 0xfb, 0x03, 0x99, 0x6d,
	0x88, 0x60, 0x59, 0xc0, 0x06, 0x2d, 0x9c, 0x89, 0xf4, 0xb2, 0x81, 0xeb, 0xdc, 0x36, 0x08, 0x67,
	0xe8, 0x01, 0x18, 0xe1, 0xcc, 0x17, 0x3d, 0x2a, 0xa2, 0x47, 0x2d, 0x9c, 0x8d, 0x82, 0x35, 0x91,
	0x9d, 0xf5, 0xdb, 0xce, 0xc8, 0x06, 0x9d, 0xbd, 0x4e, 0x48, 0xbb, 0xda, 0x55, 0xfb, 0xad, 0x13,
	0x18, 0x88, 0x46, 0xd3, 0xd7, 0x09, 0xc1, 0x02, 0x47, 0x9f, 0x41, 0x2d, 0x63, 0x01, 0xdb, 0x64,
	0xed, 0x9a, 0x60, 0x1c, 0x15, 0x8c, 0x89, 0xc0, 0x70, 0x19, 0xeb, 0xbd, 0x84, 0xd6, 0x38, 0x48,
	0x59, 0xc4, 0x22, 0x1a, 0x0f, 0x13, 0x3a, 0xbf, 0x44, 0x8f, 0xe0, 0x68, 0x4e, 0xe3, 0x85, 0xff,
	0x8a, 0xa4, 0x59, 0x44, 0x63, 0xf1, 0x22, 0x1d, 0x37, 0x38, 0xf6, 0x5d, 0x01, 0xf1, 0xbd, 0xec,
	0xa3, 0x85, 0x8c, 0x7b, 0xb7, 0xf7, 0xa7, 0x06, 0xa6, 0xac, 0x87, 0x1e, 0x1f, 0x48, 0x72, 0x5f,
	0x4a, 0xd2, 0x90, 0x84, 0xf7, 0x94, 0xe5, 0x18, 0xaa, 0x19, 0x1f, 0x5d, 0x88, 0x52, 0x6c, 0xb8,
	0xd0, 0xfc, 0x50, 0xdf, 0x82, 0x82, 0xbe, 0x04, 0xc8, 0x58, 0x90, 0x32, 0x9f, 0x2f, 0x5c, 0xe8,
	0xd5, 0x74, 0x1e, 0xe4, 0xdb, 0x8e, 0x39, 0xe1, 0x28, 0xbf, 0x86, 0x83, 0xab, 0x30, 0xb3, 0x3d,
	0x88, 0xbe, 0x80, 0x3a, 0x89, 0xc3, 0x22, 0xab, 0x2a, 0x07, 0x36, 0x86, 0x71, 0x78, 0x27, 0xc7,
	0x20, 0x05, 0x84, 0x8e, 0xa1, 0x9e, 0x92, 0x64, 0x15, 0xcd, 0x03, 0xae, 0x70, 0xa5, 0xdf, 0x38,
	0xa9, 0x0f, 0x70, 0x01, 0x38, 0xfa, 0xf5, 0xb6, 0xa3, 0x60, 0x19, 0x47, 0x7d, 0xb9, 0x0b, 0x43,
	0xec, 0xc2, 0x1a, 0x48, 0x0d, 0xee, 0xec, 0xe3, 0x47, 0x30, 0xca, 0x22, 0xe8, 0x53, 0xa9, 0x9e,
	0xee, 0x7c, 0x28, 0xd5, 0x33, 0xcb, 0x70, 0xa9, 0xdd, 0xe7, 0x50, 0x8b, 0x69, 0x48, 0x3c, 0xb7,
	0xd4, 0x4f, 0x9c, 0xff, 0x48, 0x20, 0x37, 0xd2, 0xc2, 0x25, 0xa7, 0xf7, 0x46, 0x05, 0x9d, 0x43,
	0xa8, 0x7b, 0xb0, 0x19, 0x4b, 0xd6, 0xde, 0xd3, 0x79, 0xe1, 0x16, 0x68, 0x51, 0x52, 0x9e, 0xba,
	0x16, 0x25, 0xe8, 0x63, 0xd0, 0x13, 0x9a, 0x32, 0xb1, 0x83, 0xaa, 0x63, 0xdc, 0x6c, 0x3b, 0x95,
	0x28, 0x66, 0x58, 0x80, 0xfc, 0x3e, 0x7f, 0xa2, 0xb1, 0xbc, 0x4f, 0x6e, 0x1f, 0x1e, 0x89, 0x10,
	0x54, 0x1e, 0x09, 0x7a, 0x06, 0x90, 0x06, 0x0b, 0xe6, 0x07, 0x61, 0x98, 0x16, 0xd7, 0xd9, 0x38,
	0x81, 0x01, 0x0e, 0x16, 0xec, 0x94, 0x23, 0x4e, 0x9d, 0xab, 0xf7, 0x76, 0xdb, 0x51, 0xb1, 0x99,
	0xee, 0xc1, 0xde, 0x05, 0x98, 0x92, 0x81, 0x1e, 0x43, 0xeb, 0x92, 0x04, 0x29, 0x9b, 0x91, 0xa0,
	0x28, 0x23, 0x9e, 0x62, 0xe2, 0xa6, 0x44, 0x39, 0x8f, 0xd3, 0xca, 0x15, 0x30, 0x52, 0xd0, 0x8a,
	0xf7, 0x34, 0x25, 0xca, 0x69, 0xc7, 0x09, 0x34, 0x0e, 0x3e, 0x0d, 0xd4, 0x02, 0x98, 0x4c, 0x7c,
	0x2f, 0x7e, 0x15, 0xac, 0xa2, 0xd0, 0x52, 0x50, 0x03, 0x0c, 0xe1, 0x47, 0xcc, 0x52, 0xcb, 0xe0,
	0x38, 0x25, 0x49, 0x90, 0x12, 0x4b, 0x2b, 0x7d, 0xbc, 0x89, 0xe3, 0x28, 0x5e, 0x5a, 0x15, 0xd4,
	0x04, 0x73, 0x32, 0xf1, 0x5d, 0xb2, 0x22, 0x8c, 0x58, 0x3a, 0xba, 0x07, 0x8d, 0xbd, 0xcb, 0xe3,
	0xd5, 0x87, 0xfa, 0x2f, 0xbf, 0xd9, 0xca, 0xf1, 0xd7, 0x60, 0xca, 0xcf, 0x55, 0xa4, 0x4c, 0xfd,
	0xe1, 0x68, 0xea, 0x4d, 0x2f, 0xca, 0x76, 0x53, 0x7f, 0xe8, 0x3e, 0x1f, 0x5a, 0x6a, 0xe9, 0x38,
	0x67, 0xe7, 0x8e, 0xa5, 0x95, 0xb9, 0x0b, 0xb8, 0x77, 0xe7, 0x78, 0xf8, 0x10, 0xe3, 0xd3, 0x83,
	0x89, 0x0b, 0x7f, 0x74, 0x3e, 0xc5, 0xc3, 0x53, 0xd7, 0x52, 0xf9, 0x14, 0xe3, 0x53, 0x9f, 0x3b,
	0xe7, 0xa3, 0xb3, 0x0b, 0x4b, 0x43, 0x16, 0x1c, 0x95, 0xc0, 0xf7, 0xd8, 0x9b, 0x0e, 0xad, 0x4a,
	0x89, 0x4c, 0xc6, 0x67, 0xde, 0x74, 0xea, 0x8d, 0x9e, 0x5b, 0xba, 0xf3, 0xcd, 0xf5, 0xce, 0x56,
	0xfe, 0xde, 0xd9, 0xca, 0xbb, 0x9d, 0xad, 0xfc, 0xbb, 0xb3, 0x95, 0xff, 0x76, 0xb6, 0xfa, 0x73,
	0x6e, 0xab, 0xbf, 0xe7, 0xb6, 0xfa, 0x26, 0xb7, 0x95, 0xbf, 0x72, 0x5b, 0xb9, 0xce, 0x6d, 0xf5,
	0x6d, 0x6e, 0xab, 0xef, 0x72, 0x5b, 0xfd, 0xf5, 0x1f, 0x5b, 0x79, 0xa1, 0xfe, 0x50, 0xe3, 0xff,
	0x94, 0x64, 0x36, 0xab, 0x89, 0xff, 0xc4, 0xb3, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xc0,
	0x09, 0x53, 0x64, 0x06, 0x00, 0x00,
}

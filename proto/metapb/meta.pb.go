// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: meta.proto

/*
	Package metapb is a generated protocol buffer package.

	It is generated from these files:
		meta.proto

	It has these top-level messages:
		DB
		Space
		Partition
		Replica
		PartitionServer
		ServerResource
		Route
*/
package metapb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SpaceStatus int32

const (
	SpaceStatus_SS_Invalid SpaceStatus = 0
	// 初始状态，space刚刚创建，分片还不能提供服务
	SpaceStatus_SS_Init SpaceStatus = 1
	// 准备状态，等待space的初始分片补足三个副本
	SpaceStatus_SS_Prepare SpaceStatus = 2
	// 正常状态，可以提供完全的服务
	SpaceStatus_SS_Running SpaceStatus = 3
	// 标记删除，元数据都保留，允许分片参与调度,但不能分裂
	SpaceStatus_SS_Delete SpaceStatus = 4
	// 正在删除
	SpaceStatus_SS_Deleting SpaceStatus = 5
)

var SpaceStatus_name = map[int32]string{
	0: "SS_Invalid",
	1: "SS_Init",
	2: "SS_Prepare",
	3: "SS_Running",
	4: "SS_Delete",
	5: "SS_Deleting",
}
var SpaceStatus_value = map[string]int32{
	"SS_Invalid":  0,
	"SS_Init":     1,
	"SS_Prepare":  2,
	"SS_Running":  3,
	"SS_Delete":   4,
	"SS_Deleting": 5,
}

func (x SpaceStatus) String() string {
	return proto.EnumName(SpaceStatus_name, int32(x))
}
func (SpaceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

type ReplicaStatue int32

const (
	ReplicaStatue_RS_Invalid ReplicaStatue = 0
)

var ReplicaStatue_name = map[int32]string{
	0: "RS_Invalid",
}
var ReplicaStatue_value = map[string]int32{
	"RS_Invalid": 0,
}

func (x ReplicaStatue) String() string {
	return proto.EnumName(ReplicaStatue_name, int32(x))
}
func (ReplicaStatue) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

type PSStatus int32

const (
	PSStatus_PS_Invalid PSStatus = 0
	PSStatus_PS_Initial PSStatus = 1
	PSStatus_PS_Login   PSStatus = 2
	PSStatus_PS_Offline PSStatus = 3
	PSStatus_PS_Logout  PSStatus = 4
)

var PSStatus_name = map[int32]string{
	0: "PS_Invalid",
	1: "PS_Initial",
	2: "PS_Login",
	3: "PS_Offline",
	4: "PS_Logout",
}
var PSStatus_value = map[string]int32{
	"PS_Invalid": 0,
	"PS_Initial": 1,
	"PS_Login":   2,
	"PS_Offline": 3,
	"PS_Logout":  4,
}

func (x PSStatus) String() string {
	return proto.EnumName(PSStatus_name, int32(x))
}
func (PSStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

type DB struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *DB) Reset()                    { *m = DB{} }
func (m *DB) String() string            { return proto.CompactTextString(m) }
func (*DB) ProtoMessage()               {}
func (*DB) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{0} }

func (m *DB) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DB) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Space struct {
	Type   string      `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id     uint32      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Name   string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DbId   uint32      `protobuf:"varint,4,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	DbName string      `protobuf:"bytes,5,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	Status SpaceStatus `protobuf:"varint,6,opt,name=status,proto3,enum=metapb.SpaceStatus" json:"status,omitempty"`
}

func (m *Space) Reset()                    { *m = Space{} }
func (m *Space) String() string            { return proto.CompactTextString(m) }
func (*Space) ProtoMessage()               {}
func (*Space) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{1} }

func (m *Space) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Space) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Space) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Space) GetDbId() uint32 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *Space) GetDbName() string {
	if m != nil {
		return m.DbName
	}
	return ""
}

func (m *Space) GetStatus() SpaceStatus {
	if m != nil {
		return m.Status
	}
	return SpaceStatus_SS_Invalid
}

type Partition struct {
	Id        uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DbId      uint32 `protobuf:"varint,3,opt,name=db_id,json=dbId,proto3" json:"db_id,omitempty"`
	SpaceId   uint32 `protobuf:"varint,4,opt,name=space_id,json=spaceId,proto3" json:"space_id,omitempty"`
	StartSlot uint32 `protobuf:"varint,5,opt,name=start_slot,json=startSlot,proto3" json:"start_slot,omitempty"`
	EndSlot   uint32 `protobuf:"varint,6,opt,name=end_slot,json=endSlot,proto3" json:"end_slot,omitempty"`
}

func (m *Partition) Reset()                    { *m = Partition{} }
func (m *Partition) String() string            { return proto.CompactTextString(m) }
func (*Partition) ProtoMessage()               {}
func (*Partition) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{2} }

func (m *Partition) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Partition) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Partition) GetDbId() uint32 {
	if m != nil {
		return m.DbId
	}
	return 0
}

func (m *Partition) GetSpaceId() uint32 {
	if m != nil {
		return m.SpaceId
	}
	return 0
}

func (m *Partition) GetStartSlot() uint32 {
	if m != nil {
		return m.StartSlot
	}
	return 0
}

func (m *Partition) GetEndSlot() uint32 {
	if m != nil {
		return m.EndSlot
	}
	return 0
}

type Replica struct {
	Id          uint32        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PartitionId uint32        `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3" json:"partition_id,omitempty"`
	PsId        uint32        `protobuf:"varint,3,opt,name=ps_id,json=psId,proto3" json:"ps_id,omitempty"`
	Status      ReplicaStatue `protobuf:"varint,4,opt,name=status,proto3,enum=metapb.ReplicaStatue" json:"status,omitempty"`
	IsLeader    bool          `protobuf:"varint,5,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
}

func (m *Replica) Reset()                    { *m = Replica{} }
func (m *Replica) String() string            { return proto.CompactTextString(m) }
func (*Replica) ProtoMessage()               {}
func (*Replica) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{3} }

func (m *Replica) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Replica) GetPartitionId() uint32 {
	if m != nil {
		return m.PartitionId
	}
	return 0
}

func (m *Replica) GetPsId() uint32 {
	if m != nil {
		return m.PsId
	}
	return 0
}

func (m *Replica) GetStatus() ReplicaStatue {
	if m != nil {
		return m.Status
	}
	return ReplicaStatue_RS_Invalid
}

func (m *Replica) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

type PartitionServer struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Zone string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	Ip   string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port string `protobuf:"bytes,5,opt,name=port,proto3" json:"port,omitempty"`
}

func (m *PartitionServer) Reset()                    { *m = PartitionServer{} }
func (m *PartitionServer) String() string            { return proto.CompactTextString(m) }
func (*PartitionServer) ProtoMessage()               {}
func (*PartitionServer) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{4} }

func (m *PartitionServer) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PartitionServer) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

func (m *PartitionServer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *PartitionServer) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

type ServerResource struct {
	Cpu    int32 `protobuf:"varint,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory int32 `protobuf:"varint,2,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk   int32 `protobuf:"varint,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (m *ServerResource) Reset()                    { *m = ServerResource{} }
func (m *ServerResource) String() string            { return proto.CompactTextString(m) }
func (*ServerResource) ProtoMessage()               {}
func (*ServerResource) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{5} }

func (m *ServerResource) GetCpu() int32 {
	if m != nil {
		return m.Cpu
	}
	return 0
}

func (m *ServerResource) GetMemory() int32 {
	if m != nil {
		return m.Memory
	}
	return 0
}

func (m *ServerResource) GetDisk() int32 {
	if m != nil {
		return m.Disk
	}
	return 0
}

type Route struct {
	Partition       *Partition         `protobuf:"bytes,1,opt,name=partition" json:"partition,omitempty"`
	PartitionServer []*PartitionServer `protobuf:"bytes,2,rep,name=partition_server,json=partitionServer" json:"partition_server,omitempty"`
	LeaderPsId      uint32             `protobuf:"varint,3,opt,name=leader_ps_id,json=leaderPsId,proto3" json:"leader_ps_id,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (m *Route) String() string            { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorMeta, []int{6} }

func (m *Route) GetPartition() *Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *Route) GetPartitionServer() []*PartitionServer {
	if m != nil {
		return m.PartitionServer
	}
	return nil
}

func (m *Route) GetLeaderPsId() uint32 {
	if m != nil {
		return m.LeaderPsId
	}
	return 0
}

func init() {
	proto.RegisterType((*DB)(nil), "metapb.DB")
	proto.RegisterType((*Space)(nil), "metapb.Space")
	proto.RegisterType((*Partition)(nil), "metapb.Partition")
	proto.RegisterType((*Replica)(nil), "metapb.Replica")
	proto.RegisterType((*PartitionServer)(nil), "metapb.PartitionServer")
	proto.RegisterType((*ServerResource)(nil), "metapb.ServerResource")
	proto.RegisterType((*Route)(nil), "metapb.Route")
	proto.RegisterEnum("metapb.SpaceStatus", SpaceStatus_name, SpaceStatus_value)
	proto.RegisterEnum("metapb.ReplicaStatue", ReplicaStatue_name, ReplicaStatue_value)
	proto.RegisterEnum("metapb.PSStatus", PSStatus_name, PSStatus_value)
}
func (m *DB) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DB) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *Space) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Space) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.DbId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.DbId))
	}
	if len(m.DbName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.DbName)))
		i += copy(dAtA[i:], m.DbName)
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Status))
	}
	return i, nil
}

func (m *Partition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.DbId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.DbId))
	}
	if m.SpaceId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.SpaceId))
	}
	if m.StartSlot != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.StartSlot))
	}
	if m.EndSlot != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.EndSlot))
	}
	return i, nil
}

func (m *Replica) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Replica) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
	}
	if m.PartitionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.PartitionId))
	}
	if m.PsId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.PsId))
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Status))
	}
	if m.IsLeader {
		dAtA[i] = 0x28
		i++
		if m.IsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PartitionServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionServer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Id))
	}
	if len(m.Zone) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Zone)))
		i += copy(dAtA[i:], m.Zone)
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	if len(m.Port) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMeta(dAtA, i, uint64(len(m.Port)))
		i += copy(dAtA[i:], m.Port)
	}
	return i, nil
}

func (m *ServerResource) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerResource) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Cpu != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Cpu))
	}
	if m.Memory != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Memory))
	}
	if m.Disk != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Disk))
	}
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Partition != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.Partition.Size()))
		n1, err := m.Partition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.PartitionServer) > 0 {
		for _, msg := range m.PartitionServer {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMeta(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.LeaderPsId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMeta(dAtA, i, uint64(m.LeaderPsId))
	}
	return i, nil
}

func encodeVarintMeta(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *DB) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *Space) Size() (n int) {
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.DbId != 0 {
		n += 1 + sovMeta(uint64(m.DbId))
	}
	l = len(m.DbName)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovMeta(uint64(m.Status))
	}
	return n
}

func (m *Partition) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	if m.DbId != 0 {
		n += 1 + sovMeta(uint64(m.DbId))
	}
	if m.SpaceId != 0 {
		n += 1 + sovMeta(uint64(m.SpaceId))
	}
	if m.StartSlot != 0 {
		n += 1 + sovMeta(uint64(m.StartSlot))
	}
	if m.EndSlot != 0 {
		n += 1 + sovMeta(uint64(m.EndSlot))
	}
	return n
}

func (m *Replica) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	if m.PartitionId != 0 {
		n += 1 + sovMeta(uint64(m.PartitionId))
	}
	if m.PsId != 0 {
		n += 1 + sovMeta(uint64(m.PsId))
	}
	if m.Status != 0 {
		n += 1 + sovMeta(uint64(m.Status))
	}
	if m.IsLeader {
		n += 2
	}
	return n
}

func (m *PartitionServer) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMeta(uint64(m.Id))
	}
	l = len(m.Zone)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	l = len(m.Port)
	if l > 0 {
		n += 1 + l + sovMeta(uint64(l))
	}
	return n
}

func (m *ServerResource) Size() (n int) {
	var l int
	_ = l
	if m.Cpu != 0 {
		n += 1 + sovMeta(uint64(m.Cpu))
	}
	if m.Memory != 0 {
		n += 1 + sovMeta(uint64(m.Memory))
	}
	if m.Disk != 0 {
		n += 1 + sovMeta(uint64(m.Disk))
	}
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	if m.Partition != nil {
		l = m.Partition.Size()
		n += 1 + l + sovMeta(uint64(l))
	}
	if len(m.PartitionServer) > 0 {
		for _, e := range m.PartitionServer {
			l = e.Size()
			n += 1 + l + sovMeta(uint64(l))
		}
	}
	if m.LeaderPsId != 0 {
		n += 1 + sovMeta(uint64(m.LeaderPsId))
	}
	return n
}

func sovMeta(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMeta(x uint64) (n int) {
	return sovMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DB) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DB: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DB: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Space) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Space: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Space: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DbName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (SpaceStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DbId", wireType)
			}
			m.DbId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DbId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			m.SpaceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartSlot", wireType)
			}
			m.StartSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartSlot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndSlot", wireType)
			}
			m.EndSlot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndSlot |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Replica) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Replica: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Replica: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionId", wireType)
			}
			m.PartitionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PsId", wireType)
			}
			m.PsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PsId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (ReplicaStatue(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zone = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Port = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerResource) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerResource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerResource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cpu", wireType)
			}
			m.Cpu = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cpu |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memory", wireType)
			}
			m.Memory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Memory |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Disk", wireType)
			}
			m.Disk = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Disk |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partition == nil {
				m.Partition = &Partition{}
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionServer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMeta
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionServer = append(m.PartitionServer, &PartitionServer{})
			if err := m.PartitionServer[len(m.PartitionServer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderPsId", wireType)
			}
			m.LeaderPsId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderPsId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMeta
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMeta
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMeta(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMeta = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMeta   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("meta.proto", fileDescriptorMeta) }

var fileDescriptorMeta = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x94, 0xd1, 0x6e, 0xd3, 0x3e,
	0x14, 0xc6, 0xe7, 0xb4, 0x69, 0x9b, 0xd3, 0xb5, 0xcb, 0xdf, 0xfb, 0xc3, 0x0a, 0x88, 0x52, 0x72,
	0x55, 0x0d, 0xb1, 0x49, 0xe3, 0x0d, 0xa6, 0xdd, 0x54, 0x9a, 0x46, 0xe5, 0x5c, 0x20, 0xae, 0xa2,
	0xb4, 0xf6, 0x2a, 0x43, 0x1a, 0x5b, 0xb1, 0x3b, 0x69, 0x3c, 0x09, 0x20, 0xc1, 0xf3, 0x70, 0xc9,
	0x23, 0xa0, 0xf1, 0x22, 0xc8, 0x27, 0x69, 0x1a, 0xd8, 0xee, 0xce, 0xf1, 0xf9, 0xfc, 0xf9, 0xe7,
	0xcf, 0x51, 0x00, 0xd6, 0xc2, 0xa6, 0x27, 0xba, 0x50, 0x56, 0xd1, 0x8e, 0xab, 0xf5, 0xe2, 0xe9,
	0xff, 0x2b, 0xb5, 0x52, 0xb8, 0x74, 0xea, 0xaa, 0x72, 0x1a, 0x4d, 0xc1, 0xbb, 0x38, 0xa7, 0x43,
	0xf0, 0x24, 0x1f, 0x91, 0x09, 0x99, 0x0e, 0x98, 0x27, 0x39, 0xa5, 0xd0, 0xce, 0xd3, 0xb5, 0x18,
	0x79, 0x13, 0x32, 0x0d, 0x18, 0xd6, 0xd1, 0x57, 0x02, 0x7e, 0xac, 0xd3, 0xa5, 0x70, 0x53, 0x7b,
	0xab, 0x05, 0xea, 0x03, 0x86, 0x75, 0xe5, 0xe0, 0xdd, 0x73, 0x68, 0xed, 0x1c, 0xe8, 0x21, 0xf8,
	0x7c, 0x91, 0x48, 0x3e, 0x6a, 0xa3, 0xac, 0xcd, 0x17, 0x33, 0x4e, 0x8f, 0xa0, 0xcb, 0x17, 0x09,
	0x6a, 0x7d, 0xd4, 0x76, 0xf8, 0xe2, 0xca, 0xa9, 0x5f, 0x41, 0xc7, 0xd8, 0xd4, 0x6e, 0xcc, 0xa8,
	0x33, 0x21, 0xd3, 0xe1, 0xd9, 0xe1, 0x49, 0x79, 0x91, 0x13, 0x84, 0x88, 0x71, 0xc4, 0x2a, 0x49,
	0xf4, 0x85, 0x40, 0x30, 0x4f, 0x0b, 0x2b, 0xad, 0x54, 0xf9, 0x43, 0xd7, 0x41, 0x60, 0xaf, 0x01,
	0x5c, 0xc3, 0xb4, 0x1a, 0x30, 0x4f, 0xa0, 0x67, 0x9c, 0xfb, 0x0e, 0xb2, 0x8b, 0xfd, 0x8c, 0xd3,
	0xe7, 0x00, 0xc6, 0xa6, 0x85, 0x4d, 0x4c, 0xa6, 0x2c, 0xa2, 0x0e, 0x58, 0x80, 0x2b, 0x71, 0xa6,
	0xac, 0xdb, 0x29, 0x72, 0x5e, 0x0e, 0x3b, 0xe5, 0x4e, 0x91, 0x73, 0x37, 0x8a, 0xbe, 0x11, 0xe8,
	0x32, 0xa1, 0x33, 0xb9, 0x4c, 0xef, 0x91, 0xbd, 0x84, 0x7d, 0xbd, 0xc5, 0x4e, 0xea, 0x00, 0xfb,
	0xf5, 0xda, 0x8c, 0x3b, 0x50, 0x6d, 0x1a, 0xa0, 0xda, 0xcc, 0x38, 0x7d, 0x5d, 0x87, 0xd3, 0xc6,
	0x70, 0x1e, 0x6d, 0xc3, 0xa9, 0x0e, 0xc2, 0x78, 0xc4, 0x36, 0x1e, 0xfa, 0x0c, 0x02, 0x69, 0x92,
	0x4c, 0xa4, 0x5c, 0x14, 0xc8, 0xde, 0x63, 0x3d, 0x69, 0x2e, 0xb1, 0x8f, 0xde, 0xc3, 0x41, 0x1d,
	0x5d, 0x2c, 0x8a, 0x1b, 0x51, 0x3c, 0x14, 0xe0, 0x27, 0x95, 0xd7, 0xaf, 0xe9, 0x6a, 0xd4, 0x68,
	0x3c, 0x3e, 0x60, 0x9e, 0xd4, 0x4e, 0xa3, 0x55, 0x61, 0xab, 0x57, 0xc4, 0x3a, 0xba, 0x82, 0x61,
	0xe9, 0xc8, 0x84, 0x51, 0x9b, 0x62, 0x29, 0x68, 0x08, 0xad, 0xa5, 0xde, 0xa0, 0xb5, 0xcf, 0x5c,
	0x49, 0x1f, 0x43, 0x67, 0x2d, 0xd6, 0xaa, 0xb8, 0xc5, 0xcb, 0xfb, 0xac, 0xea, 0x9c, 0x1f, 0x97,
	0xe6, 0x23, 0x9e, 0xe9, 0x33, 0xac, 0xa3, 0xef, 0x04, 0x7c, 0xa6, 0x36, 0x56, 0xd0, 0x53, 0x08,
	0xea, 0x90, 0xd0, 0xad, 0x7f, 0xf6, 0xdf, 0x36, 0x83, 0xfa, 0x36, 0x6c, 0xa7, 0xa1, 0xe7, 0x10,
	0xee, 0x92, 0x36, 0x08, 0x35, 0xf2, 0x26, 0xad, 0x69, 0xff, 0xec, 0xe8, 0xde, 0xbe, 0x8a, 0xf9,
	0x40, 0xff, 0x13, 0xcb, 0x04, 0xf6, 0xcb, 0x0c, 0x93, 0xe6, 0x8b, 0x40, 0xb9, 0x36, 0x37, 0x33,
	0x7e, 0xfc, 0x01, 0xfa, 0x8d, 0xcf, 0x93, 0x0e, 0x01, 0xe2, 0x38, 0x99, 0xe5, 0x37, 0x69, 0x26,
	0x79, 0xb8, 0x47, 0xfb, 0xd0, 0xc5, 0x5e, 0xda, 0x90, 0x54, 0xc3, 0x79, 0x21, 0x74, 0x5a, 0x88,
	0xd0, 0xab, 0x7a, 0xb6, 0xc9, 0x73, 0x99, 0xaf, 0xc2, 0x16, 0x1d, 0x40, 0x10, 0xc7, 0xc9, 0x85,
	0xc8, 0x84, 0x15, 0x61, 0x9b, 0x1e, 0x40, 0x7f, 0xdb, 0xba, 0xb9, 0x7f, 0xfc, 0x02, 0x06, 0x7f,
	0xbd, 0xb6, 0x33, 0x60, 0x8d, 0xd3, 0x8e, 0xdf, 0x41, 0x6f, 0x1e, 0xef, 0x48, 0xe6, 0x4d, 0x92,
	0x6d, 0x2f, 0xad, 0x4c, 0xb3, 0x90, 0xd0, 0x7d, 0xa7, 0x4d, 0x2e, 0xd5, 0x4a, 0xe6, 0x25, 0xca,
	0x3c, 0x4e, 0xde, 0x5e, 0x5f, 0x67, 0x32, 0x17, 0x25, 0x4a, 0x39, 0x55, 0x1b, 0x1b, 0xb6, 0xcf,
	0xc3, 0x1f, 0x77, 0x63, 0xf2, 0xf3, 0x6e, 0x4c, 0x7e, 0xdd, 0x8d, 0xc9, 0xe7, 0xdf, 0xe3, 0xbd,
	0x45, 0x07, 0xff, 0x26, 0x6f, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x86, 0x9b, 0xcd, 0x79,
	0x04, 0x00, 0x00,
}

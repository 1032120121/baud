syntax = "proto3";
package metapb;

import "gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

message RequestHeader {
}

message ResponseHeader {
    int32       code                = 1;
    string      msg                 = 2;
}

message DB {
    uint32          id      = 1;
    string          name    = 2;
}

enum SpaceStatus {
    SS_Invalid       = 0;
    // 初始状态，space刚刚创建，分片还不能提供服务
    SS_Init          = 1;
    // 准备状态，等待space的初始分片补足三个副本
    SS_Prepare       = 2;
    // 正常状态，可以提供完全的服务
    SS_Running       = 3;
    // 标记删除，元数据都保留，允许分片参与调度,但不能分裂
    SS_Delete        = 4;
    // 正在删除
    SS_Deleting      = 5;
}

message Space {
    string          type        = 1;  // entity/edge/blob
    uint32          id      = 2;
    string          name    = 3;
    uint32          db_id   = 4;
    string          db_name = 5;
    SpaceStatus     status  = 6;
}

message Partition {
    uint32                  id   = 1;
	string                  type        = 2;  // entity/edge/blob
	uint32                  db_id                  = 3;
	uint32                  space_id               = 4;
	uint32                  start_slot           = 5;
	uint32                  end_slot             = 6;
}

enum ReplicaStatue {
    RS_Invalid = 0;
}

message Replica {
    uint32      id = 1;
    uint32      partition_id = 2;
    uint32      ps_id       = 3;
    ReplicaStatue      status   = 4;
    bool        is_leader  = 5;
}

enum PSStatus {
    PS_Invalid   = 0;
    PS_Initial   = 1;  // first created
    PS_Login     = 2;  // when new allocated or restarted ps startup
    PS_Offline   = 3;  // reject any r/w request
    PS_Logout    = 4;  // wait destroy
}

message PartitionServer {
    uint32          id                  = 1;
    string          zone                = 3;
    string          ip                  = 4;
    string          port                = 5;
}

message ServerResource {
    int32           cpu     = 1;
    int32           memory  = 2;
    int32           disk    = 3;
}

message Route {
    Partition                   partition           = 1;
    repeated PartitionServer    partition_server        = 2;
    uint32                      leader_ps_id      = 3;
}


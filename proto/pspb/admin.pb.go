// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: admin.proto

/*
	Package pspb is a generated protocol buffer package.

	It is generated from these files:
		admin.proto

	It has these top-level messages:
		CreatePartitionRequest
		CreatePartitionResponse
		DeletePartitionRequest
		DeletePartitionResponse
		ChangeReplicaRequest
		ChangeReplicaResponse
		ChangeLeaderRequest
		ChangeLeaderResponse
*/
package pspb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/tiglabs/baud/proto/metapb"

import github_com_tiglabs_baud_proto_metapb "github.com/tiglabs/baud/proto/metapb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReplicaChangeType int32

const (
	ReplicaChangeType_Add    ReplicaChangeType = 0
	ReplicaChangeType_Remove ReplicaChangeType = 1
)

var ReplicaChangeType_name = map[int32]string{
	0: "Add",
	1: "Remove",
}
var ReplicaChangeType_value = map[string]int32{
	"Add":    0,
	"Remove": 1,
}

func (x ReplicaChangeType) String() string {
	return proto.EnumName(ReplicaChangeType_name, int32(x))
}
func (ReplicaChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{0} }

type CreatePartitionRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Partition          meta.Partition `protobuf:"bytes,2,opt,name=partition" json:"partition"`
}

func (m *CreatePartitionRequest) Reset()                    { *m = CreatePartitionRequest{} }
func (*CreatePartitionRequest) ProtoMessage()               {}
func (*CreatePartitionRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{0} }

type CreatePartitionResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *CreatePartitionResponse) Reset()                    { *m = CreatePartitionResponse{} }
func (*CreatePartitionResponse) ProtoMessage()               {}
func (*CreatePartitionResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{1} }

type DeletePartitionRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	ID                 github_com_tiglabs_baud_proto_metapb.PartitionID `protobuf:"varint,2,opt,name=id,proto3,casttype=github.com/tiglabs/baud/proto/metapb.PartitionID" json:"id,omitempty"`
}

func (m *DeletePartitionRequest) Reset()                    { *m = DeletePartitionRequest{} }
func (*DeletePartitionRequest) ProtoMessage()               {}
func (*DeletePartitionRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{2} }

type DeletePartitionResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *DeletePartitionResponse) Reset()                    { *m = DeletePartitionResponse{} }
func (*DeletePartitionResponse) ProtoMessage()               {}
func (*DeletePartitionResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{3} }

type ChangeReplicaRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Type               ReplicaChangeType                                `protobuf:"varint,2,opt,name=type,proto3,enum=ReplicaChangeType" json:"type,omitempty"`
	PartitionID        github_com_tiglabs_baud_proto_metapb.PartitionID `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3,casttype=github.com/tiglabs/baud/proto/metapb.PartitionID" json:"partition_id,omitempty"`
	ReplicaID          github_com_tiglabs_baud_proto_metapb.ReplicaID   `protobuf:"varint,4,opt,name=ReplicaID,proto3,casttype=github.com/tiglabs/baud/proto/metapb.ReplicaID" json:"ReplicaID,omitempty"`
	NodeID             github_com_tiglabs_baud_proto_metapb.NodeID      `protobuf:"varint,5,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baud/proto/metapb.NodeID" json:"nodeID,omitempty"`
	meta.RaftAddrs     `protobuf:"bytes,6,opt,name=raft_addrs,json=raftAddrs,embedded=raft_addrs" json:"raft_addrs"`
}

func (m *ChangeReplicaRequest) Reset()                    { *m = ChangeReplicaRequest{} }
func (*ChangeReplicaRequest) ProtoMessage()               {}
func (*ChangeReplicaRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{4} }

type ChangeReplicaResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *ChangeReplicaResponse) Reset()                    { *m = ChangeReplicaResponse{} }
func (*ChangeReplicaResponse) ProtoMessage()               {}
func (*ChangeReplicaResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{5} }

type ChangeLeaderRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	PartitionID        github_com_tiglabs_baud_proto_metapb.PartitionID `protobuf:"varint,2,opt,name=partition_id,json=partitionId,proto3,casttype=github.com/tiglabs/baud/proto/metapb.PartitionID" json:"partition_id,omitempty"`
}

func (m *ChangeLeaderRequest) Reset()                    { *m = ChangeLeaderRequest{} }
func (*ChangeLeaderRequest) ProtoMessage()               {}
func (*ChangeLeaderRequest) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{6} }

type ChangeLeaderResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *ChangeLeaderResponse) Reset()                    { *m = ChangeLeaderResponse{} }
func (*ChangeLeaderResponse) ProtoMessage()               {}
func (*ChangeLeaderResponse) Descriptor() ([]byte, []int) { return fileDescriptorAdmin, []int{7} }

func init() {
	proto.RegisterType((*CreatePartitionRequest)(nil), "CreatePartitionRequest")
	proto.RegisterType((*CreatePartitionResponse)(nil), "CreatePartitionResponse")
	proto.RegisterType((*DeletePartitionRequest)(nil), "DeletePartitionRequest")
	proto.RegisterType((*DeletePartitionResponse)(nil), "DeletePartitionResponse")
	proto.RegisterType((*ChangeReplicaRequest)(nil), "ChangeReplicaRequest")
	proto.RegisterType((*ChangeReplicaResponse)(nil), "ChangeReplicaResponse")
	proto.RegisterType((*ChangeLeaderRequest)(nil), "ChangeLeaderRequest")
	proto.RegisterType((*ChangeLeaderResponse)(nil), "ChangeLeaderResponse")
	proto.RegisterEnum("ReplicaChangeType", ReplicaChangeType_name, ReplicaChangeType_value)
}
func (this *CreatePartitionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePartitionRequest)
	if !ok {
		that2, ok := that.(CreatePartitionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if !this.Partition.Equal(&that1.Partition) {
		return false
	}
	return true
}
func (this *CreatePartitionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePartitionResponse)
	if !ok {
		that2, ok := that.(CreatePartitionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *DeletePartitionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePartitionRequest)
	if !ok {
		that2, ok := that.(DeletePartitionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *DeletePartitionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePartitionResponse)
	if !ok {
		that2, ok := that.(DeletePartitionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *ChangeReplicaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeReplicaRequest)
	if !ok {
		that2, ok := that.(ChangeReplicaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if this.ReplicaID != that1.ReplicaID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.RaftAddrs.Equal(&that1.RaftAddrs) {
		return false
	}
	return true
}
func (this *ChangeReplicaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeReplicaResponse)
	if !ok {
		that2, ok := that.(ChangeReplicaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *ChangeLeaderRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeLeaderRequest)
	if !ok {
		that2, ok := that.(ChangeLeaderRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	return true
}
func (this *ChangeLeaderResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeLeaderResponse)
	if !ok {
		that2, ok := that.(ChangeLeaderResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AdminGrpc service

type AdminGrpcClient interface {
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error)
	DeletePartition(ctx context.Context, in *DeletePartitionRequest, opts ...grpc.CallOption) (*DeletePartitionResponse, error)
	ChangeReplica(ctx context.Context, in *ChangeReplicaRequest, opts ...grpc.CallOption) (*ChangeReplicaResponse, error)
	ChangeLeader(ctx context.Context, in *ChangeLeaderRequest, opts ...grpc.CallOption) (*ChangeLeaderResponse, error)
}

type adminGrpcClient struct {
	cc *grpc.ClientConn
}

func NewAdminGrpcClient(cc *grpc.ClientConn) AdminGrpcClient {
	return &adminGrpcClient{cc}
}

func (c *adminGrpcClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error) {
	out := new(CreatePartitionResponse)
	err := grpc.Invoke(ctx, "/AdminGrpc/CreatePartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcClient) DeletePartition(ctx context.Context, in *DeletePartitionRequest, opts ...grpc.CallOption) (*DeletePartitionResponse, error) {
	out := new(DeletePartitionResponse)
	err := grpc.Invoke(ctx, "/AdminGrpc/DeletePartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcClient) ChangeReplica(ctx context.Context, in *ChangeReplicaRequest, opts ...grpc.CallOption) (*ChangeReplicaResponse, error) {
	out := new(ChangeReplicaResponse)
	err := grpc.Invoke(ctx, "/AdminGrpc/ChangeReplica", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGrpcClient) ChangeLeader(ctx context.Context, in *ChangeLeaderRequest, opts ...grpc.CallOption) (*ChangeLeaderResponse, error) {
	out := new(ChangeLeaderResponse)
	err := grpc.Invoke(ctx, "/AdminGrpc/ChangeLeader", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AdminGrpc service

type AdminGrpcServer interface {
	CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionResponse, error)
	DeletePartition(context.Context, *DeletePartitionRequest) (*DeletePartitionResponse, error)
	ChangeReplica(context.Context, *ChangeReplicaRequest) (*ChangeReplicaResponse, error)
	ChangeLeader(context.Context, *ChangeLeaderRequest) (*ChangeLeaderResponse, error)
}

func RegisterAdminGrpcServer(s *grpc.Server, srv AdminGrpcServer) {
	s.RegisterService(&_AdminGrpc_serviceDesc, srv)
}

func _AdminGrpc_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminGrpc/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpc_DeletePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServer).DeletePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminGrpc/DeletePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServer).DeletePartition(ctx, req.(*DeletePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpc_ChangeReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServer).ChangeReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminGrpc/ChangeReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServer).ChangeReplica(ctx, req.(*ChangeReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGrpc_ChangeLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGrpcServer).ChangeLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdminGrpc/ChangeLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGrpcServer).ChangeLeader(ctx, req.(*ChangeLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdminGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AdminGrpc",
	HandlerType: (*AdminGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartition",
			Handler:    _AdminGrpc_CreatePartition_Handler,
		},
		{
			MethodName: "DeletePartition",
			Handler:    _AdminGrpc_DeletePartition_Handler,
		},
		{
			MethodName: "ChangeReplica",
			Handler:    _AdminGrpc_ChangeReplica_Handler,
		},
		{
			MethodName: "ChangeLeader",
			Handler:    _AdminGrpc_ChangeLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}

func (m *CreatePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.RequestHeader.Size()))
	n1, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.Partition.Size()))
	n2, err := m.Partition.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *CreatePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.ResponseHeader.Size()))
	n3, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	return i, nil
}

func (m *DeletePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.RequestHeader.Size()))
	n4, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ID))
	}
	return i, nil
}

func (m *DeletePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.ResponseHeader.Size()))
	n5, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func (m *ChangeReplicaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReplicaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.RequestHeader.Size()))
	n6, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.Type))
	}
	if m.PartitionID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.PartitionID))
	}
	if m.ReplicaID != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.ReplicaID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.NodeID))
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.RaftAddrs.Size()))
	n7, err := m.RaftAddrs.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *ChangeReplicaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReplicaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.ResponseHeader.Size()))
	n8, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ChangeLeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeLeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.RequestHeader.Size()))
	n9, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if m.PartitionID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAdmin(dAtA, i, uint64(m.PartitionID))
	}
	return i, nil
}

func (m *ChangeLeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeLeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintAdmin(dAtA, i, uint64(m.ResponseHeader.Size()))
	n10, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	return i, nil
}

func encodeVarintAdmin(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCreatePartitionRequest(r randyAdmin, easy bool) *CreatePartitionRequest {
	this := &CreatePartitionRequest{}
	v1 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v1
	v2 := meta.NewPopulatedPartition(r, easy)
	this.Partition = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreatePartitionResponse(r randyAdmin, easy bool) *CreatePartitionResponse {
	this := &CreatePartitionResponse{}
	v3 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v3
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeletePartitionRequest(r randyAdmin, easy bool) *DeletePartitionRequest {
	this := &DeletePartitionRequest{}
	v4 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v4
	this.ID = github_com_tiglabs_baud_proto_metapb.PartitionID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeletePartitionResponse(r randyAdmin, easy bool) *DeletePartitionResponse {
	this := &DeletePartitionResponse{}
	v5 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v5
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeReplicaRequest(r randyAdmin, easy bool) *ChangeReplicaRequest {
	this := &ChangeReplicaRequest{}
	v6 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v6
	this.Type = ReplicaChangeType([]int32{0, 1}[r.Intn(2)])
	this.PartitionID = github_com_tiglabs_baud_proto_metapb.PartitionID(r.Uint32())
	this.ReplicaID = github_com_tiglabs_baud_proto_metapb.ReplicaID(uint64(r.Uint32()))
	this.NodeID = github_com_tiglabs_baud_proto_metapb.NodeID(r.Uint32())
	v7 := meta.NewPopulatedRaftAddrs(r, easy)
	this.RaftAddrs = *v7
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeReplicaResponse(r randyAdmin, easy bool) *ChangeReplicaResponse {
	this := &ChangeReplicaResponse{}
	v8 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeLeaderRequest(r randyAdmin, easy bool) *ChangeLeaderRequest {
	this := &ChangeLeaderRequest{}
	v9 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v9
	this.PartitionID = github_com_tiglabs_baud_proto_metapb.PartitionID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeLeaderResponse(r randyAdmin, easy bool) *ChangeLeaderResponse {
	this := &ChangeLeaderResponse{}
	v10 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v10
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyAdmin interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneAdmin(r randyAdmin) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringAdmin(r randyAdmin) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneAdmin(r)
	}
	return string(tmps)
}
func randUnrecognizedAdmin(r randyAdmin, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldAdmin(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldAdmin(dAtA []byte, r randyAdmin, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateAdmin(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateAdmin(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CreatePartitionRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	l = m.Partition.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *CreatePartitionResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *DeletePartitionRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	if m.ID != 0 {
		n += 1 + sovAdmin(uint64(m.ID))
	}
	return n
}

func (m *DeletePartitionResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *ChangeReplicaRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	if m.Type != 0 {
		n += 1 + sovAdmin(uint64(m.Type))
	}
	if m.PartitionID != 0 {
		n += 1 + sovAdmin(uint64(m.PartitionID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovAdmin(uint64(m.ReplicaID))
	}
	if m.NodeID != 0 {
		n += 1 + sovAdmin(uint64(m.NodeID))
	}
	l = m.RaftAddrs.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *ChangeReplicaResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func (m *ChangeLeaderRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	if m.PartitionID != 0 {
		n += 1 + sovAdmin(uint64(m.PartitionID))
	}
	return n
}

func (m *ChangeLeaderResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovAdmin(uint64(l))
	return n
}

func sovAdmin(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAdmin(x uint64) (n int) {
	return sovAdmin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreatePartitionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartitionRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Partition:` + strings.Replace(strings.Replace(this.Partition.String(), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartitionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartitionResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartitionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartitionRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartitionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartitionResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeReplicaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeReplicaRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`ReplicaID:` + fmt.Sprintf("%v", this.ReplicaID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`RaftAddrs:` + strings.Replace(strings.Replace(this.RaftAddrs.String(), "RaftAddrs", "meta.RaftAddrs", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeReplicaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeReplicaResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeLeaderRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeLeaderRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeLeaderResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeLeaderResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringAdmin(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreatePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (github_com_tiglabs_baud_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReplicaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReplicaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReplicaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ReplicaChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (github_com_tiglabs_baud_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= (github_com_tiglabs_baud_proto_metapb.ReplicaID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baud_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RaftAddrs.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReplicaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReplicaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReplicaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeLeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeLeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeLeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (github_com_tiglabs_baud_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeLeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeLeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeLeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAdmin
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAdmin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAdmin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAdmin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAdmin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAdmin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAdmin
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAdmin
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAdmin(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAdmin = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAdmin   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("admin.proto", fileDescriptorAdmin) }

var fileDescriptorAdmin = []byte{
	// 628 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xdd, 0x4d, 0x83, 0x21, 0x93, 0x7e, 0xb1, 0xf4, 0xc3, 0xca, 0x61, 0x5d, 0xf9, 0x80, 0x2a,
	0x10, 0x9b, 0xd2, 0x9e, 0x40, 0x20, 0x68, 0x1a, 0x41, 0x5d, 0x55, 0x08, 0x2c, 0x4e, 0x48, 0xa8,
	0x5a, 0x77, 0x37, 0xa9, 0xa5, 0x26, 0x36, 0xb6, 0x83, 0x54, 0x4e, 0xfc, 0x0a, 0xc4, 0x81, 0x1f,
	0xc0, 0x8d, 0x2b, 0x37, 0x38, 0xf6, 0xd8, 0x23, 0x27, 0xab, 0x31, 0x7f, 0x80, 0x23, 0xea, 0x09,
	0x65, 0xe3, 0x7c, 0x90, 0xba, 0x52, 0x65, 0xc1, 0x29, 0xf1, 0xdb, 0x99, 0x37, 0xfb, 0x66, 0xde,
	0x0e, 0x94, 0xb9, 0x68, 0xb9, 0x6d, 0xe6, 0x07, 0x5e, 0xe4, 0x55, 0xee, 0x34, 0xdd, 0xe8, 0xa0,
	0xe3, 0xb0, 0x7d, 0xaf, 0x55, 0x6d, 0x7a, 0x4d, 0xaf, 0xaa, 0x60, 0xa7, 0xd3, 0x50, 0x5f, 0xea,
	0x43, 0xfd, 0x4b, 0xc3, 0xab, 0x63, 0xe1, 0x91, 0xdb, 0x3c, 0xe4, 0x4e, 0x58, 0x75, 0x78, 0x47,
	0xf4, 0xd3, 0xaa, 0x2d, 0x19, 0x71, 0xdf, 0x51, 0x3f, 0xfd, 0x04, 0xf3, 0x1d, 0x2c, 0x6d, 0x05,
	0x92, 0x47, 0xf2, 0x39, 0x0f, 0x22, 0x37, 0x72, 0xbd, 0xb6, 0x2d, 0xdf, 0x74, 0x64, 0x18, 0x91,
	0x35, 0xd0, 0x0e, 0x24, 0x17, 0x32, 0xd0, 0xf1, 0x0a, 0x5e, 0x2d, 0xaf, 0xcf, 0xb2, 0xf4, 0x64,
	0x5b, 0xa1, 0xb5, 0x6b, 0xc7, 0xb1, 0x81, 0x4e, 0x62, 0x03, 0xdb, 0x69, 0x1c, 0x61, 0x50, 0xf2,
	0x07, 0x2c, 0x7a, 0x41, 0x25, 0x01, 0x1b, 0xf2, 0xd6, 0x8a, 0xbd, 0x04, 0x7b, 0x14, 0x62, 0xee,
	0xc2, 0xf2, 0xb9, 0xda, 0xa1, 0xef, 0xb5, 0x43, 0x49, 0xee, 0x4e, 0x14, 0x9f, 0x63, 0x83, 0xa3,
	0x8b, 0xaa, 0x9b, 0x1f, 0x30, 0x2c, 0xd5, 0xe5, 0xa1, 0xfc, 0x27, 0x52, 0x76, 0xa0, 0xe0, 0x0a,
	0xa5, 0x61, 0xa6, 0x76, 0x3f, 0x89, 0x8d, 0x82, 0x55, 0x3f, 0x8b, 0x8d, 0xb5, 0xcb, 0x74, 0x77,
	0xa4, 0xd8, 0xaa, 0xdb, 0x05, 0x57, 0xf4, 0x64, 0x9e, 0xbb, 0x57, 0x7e, 0x99, 0xdf, 0xa6, 0x60,
	0x61, 0xeb, 0x80, 0xb7, 0x9b, 0xd2, 0x96, 0xfe, 0xa1, 0xbb, 0xcf, 0xf3, 0x8b, 0xbc, 0x09, 0xc5,
	0xe8, 0xc8, 0x97, 0x4a, 0xe6, 0xec, 0x3a, 0x61, 0x29, 0x61, 0x9f, 0xfd, 0xe5, 0x91, 0x2f, 0x6d,
	0x75, 0x4e, 0x1a, 0x30, 0x3d, 0x1c, 0xda, 0x9e, 0x2b, 0xf4, 0x29, 0xd5, 0x96, 0xad, 0x24, 0x36,
	0xca, 0x63, 0x5a, 0x73, 0xf5, 0xa7, 0x3c, 0x24, 0xb6, 0x04, 0x79, 0x0d, 0xa5, 0xf4, 0x0a, 0x56,
	0x5d, 0x2f, 0xae, 0xe0, 0xd5, 0x62, 0xed, 0x51, 0x12, 0x1b, 0x23, 0xf0, 0x2c, 0x36, 0xd8, 0xa5,
	0x4a, 0x0c, 0x33, 0xec, 0x51, 0x32, 0x79, 0x01, 0x5a, 0xdb, 0x13, 0xd2, 0xaa, 0xeb, 0x57, 0x94,
	0x80, 0x7b, 0x49, 0x6c, 0x68, 0xcf, 0x14, 0x72, 0x16, 0x1b, 0xb7, 0x2f, 0x45, 0xdc, 0x0f, 0xb7,
	0x53, 0x22, 0xb2, 0x01, 0x10, 0xf0, 0x46, 0xb4, 0xc7, 0x85, 0x08, 0x42, 0x5d, 0x4b, 0x2d, 0x6f,
	0xf3, 0x46, 0xb4, 0xd9, 0x43, 0xc6, 0x7a, 0x5e, 0x0a, 0x06, 0xa0, 0xb9, 0x03, 0x8b, 0x13, 0x03,
	0xcc, 0xef, 0x86, 0x2f, 0x18, 0x6e, 0xf4, 0xc9, 0x76, 0x15, 0x90, 0xdf, 0x0c, 0x93, 0x43, 0x2e,
	0xfc, 0x9f, 0x21, 0x9b, 0xd6, 0xc0, 0xbe, 0x83, 0x0b, 0xe7, 0x16, 0x7f, 0x6b, 0x15, 0xae, 0x9f,
	0xb3, 0x2c, 0xb9, 0x0a, 0x53, 0x9b, 0x42, 0xcc, 0x23, 0x02, 0xa0, 0xd9, 0xb2, 0xe5, 0xbd, 0x95,
	0xf3, 0x78, 0xfd, 0x53, 0x01, 0x4a, 0x9b, 0xbd, 0xad, 0xfa, 0x34, 0xf0, 0xf7, 0xc9, 0x13, 0x98,
	0x9b, 0xd8, 0x3b, 0x64, 0x99, 0x65, 0x6f, 0xc1, 0x8a, 0xce, 0x2e, 0x58, 0x51, 0x26, 0xea, 0xf1,
	0x4c, 0x3c, 0x6c, 0xb2, 0xcc, 0xb2, 0x57, 0x50, 0x45, 0x67, 0x17, 0xec, 0x00, 0x13, 0x91, 0xc7,
	0x30, 0xf3, 0x97, 0x21, 0xc8, 0x22, 0xcb, 0x7a, 0xe1, 0x95, 0x25, 0x96, 0xe9, 0x1b, 0x13, 0x91,
	0x87, 0x30, 0x3d, 0xde, 0x54, 0xb2, 0xc0, 0x32, 0x4c, 0x51, 0x59, 0x64, 0x59, 0x9d, 0x37, 0x51,
	0xed, 0xc1, 0x71, 0x97, 0xa2, 0x1f, 0x5d, 0x8a, 0x4e, 0xbb, 0x14, 0xfd, 0xea, 0x52, 0xf4, 0xbb,
	0x4b, 0xf1, 0xfb, 0x84, 0xe2, 0xcf, 0x09, 0xc5, 0x5f, 0x13, 0x8a, 0xbe, 0x27, 0x14, 0x1d, 0x27,
	0x14, 0x9f, 0x24, 0x14, 0x9f, 0x26, 0x14, 0x7f, 0xfc, 0x49, 0xd1, 0x36, 0x7e, 0x55, 0xf4, 0x43,
	0xdf, 0x71, 0x34, 0x35, 0xf8, 0x8d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x29, 0x26, 0x43, 0x07,
	0xb8, 0x06, 0x00, 0x00,
}

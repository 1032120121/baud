// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errorpb.proto

/*
	Package pspb is a generated protocol buffer package.

	It is generated from these files:
		errorpb.proto

	It has these top-level messages:
		Error
*/
package pspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strconv "strconv"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ErrorCode int32

const (
	NOTLEADER         ErrorCode = 0
	NOLEADER          ErrorCode = 1
	PARTITIONNOTFOUND ErrorCode = 2
	KEYEXISTS         ErrorCode = 3
	KEYNOTEXISTS      ErrorCode = 4
)

var ErrorCode_name = map[int32]string{
	0: "NOTLEADER",
	1: "NOLEADER",
	2: "PARTITIONNOTFOUND",
	3: "KEYEXISTS",
	4: "KEYNOTEXISTS",
}
var ErrorCode_value = map[string]int32{
	"NOTLEADER":         0,
	"NOLEADER":          1,
	"PARTITIONNOTFOUND": 2,
	"KEYEXISTS":         3,
	"KEYNOTEXISTS":      4,
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{0} }

type Error struct {
	Message string    `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Code    ErrorCode `protobuf:"varint,2,opt,name=code,proto3,enum=ErrorCode" json:"code,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptorErrorpb, []int{0} }

func init() {
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterEnum("ErrorCode", ErrorCode_name, ErrorCode_value)
}
func (x ErrorCode) String() string {
	s, ok := ErrorCode_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&pspb.Error{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringErrorpb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.Code != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintErrorpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedError(r randyErrorpb, easy bool) *Error {
	this := &Error{}
	this.Message = string(randStringErrorpb(r))
	this.Code = ErrorCode([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyErrorpb interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneErrorpb(r randyErrorpb) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringErrorpb(r randyErrorpb) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneErrorpb(r)
	}
	return string(tmps)
}
func randUnrecognizedErrorpb(r randyErrorpb, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldErrorpb(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldErrorpb(dAtA []byte, r randyErrorpb, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateErrorpb(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateErrorpb(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Error) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovErrorpb(uint64(m.Code))
	}
	return n
}

func sovErrorpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrorpb(x uint64) (n int) {
	return sovErrorpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringErrorpb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (ErrorCode(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrorpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrorpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrorpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("errorpb.proto", fileDescriptorErrorpb) }

var fileDescriptorErrorpb = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xb1, 0x4e, 0x32, 0x41,
	0x14, 0x46, 0xe7, 0xf2, 0xef, 0xaf, 0x32, 0x01, 0xb3, 0x4e, 0x62, 0x42, 0x28, 0x6e, 0x88, 0x15,
	0x31, 0x11, 0x12, 0x7d, 0x82, 0x55, 0xc6, 0xb0, 0xc1, 0xcc, 0x98, 0x65, 0x4c, 0xc4, 0xce, 0x85,
	0x65, 0xb5, 0x20, 0xb3, 0xd9, 0x85, 0xde, 0xd2, 0xd2, 0x77, 0xb0, 0xf1, 0x11, 0x2c, 0x2d, 0x29,
	0x29, 0x2d, 0x99, 0xb1, 0xb1, 0xa4, 0xb4, 0x34, 0x8c, 0x68, 0x77, 0xcf, 0xc9, 0x77, 0x8a, 0x4b,
	0xab, 0x49, 0x9e, 0xeb, 0x3c, 0x8b, 0x5b, 0x59, 0xae, 0xa7, 0xba, 0x7e, 0x94, 0xde, 0x4f, 0xef,
	0x66, 0x71, 0x6b, 0xa8, 0x27, 0xed, 0x54, 0xa7, 0xba, 0xed, 0x74, 0x3c, 0x1b, 0x3b, 0x72, 0xe0,
	0xae, 0x9f, 0xf9, 0x41, 0x40, 0xff, 0xf3, 0x75, 0xcf, 0x6a, 0x74, 0x7b, 0x92, 0x14, 0xc5, 0x6d,
	0x9a, 0xd4, 0xa0, 0x01, 0xcd, 0x72, 0xf4, 0x8b, 0x0c, 0xa9, 0x37, 0xd4, 0xa3, 0xa4, 0x56, 0x6a,
	0x40, 0x73, 0xf7, 0x98, 0xb6, 0xdc, 0xfe, 0x4c, 0x8f, 0x92, 0xc8, 0xf9, 0xc3, 0x31, 0x2d, 0xff,
	0x29, 0x56, 0xa5, 0x65, 0x21, 0xd5, 0x05, 0x0f, 0x3a, 0x3c, 0xf2, 0x09, 0xab, 0xd0, 0x1d, 0x21,
	0x37, 0x04, 0x6c, 0x9f, 0xee, 0x5d, 0x06, 0x91, 0x0a, 0x55, 0x28, 0x85, 0x90, 0xea, 0x5c, 0x5e,
	0x89, 0x8e, 0x5f, 0x5a, 0x37, 0x3d, 0x3e, 0xe0, 0xd7, 0x61, 0x5f, 0xf5, 0xfd, 0x7f, 0xcc, 0xa7,
	0x95, 0x1e, 0x1f, 0x08, 0xa9, 0x36, 0xc6, 0xab, 0x7b, 0x8f, 0xcf, 0x48, 0x4e, 0xbb, 0x73, 0x83,
	0x64, 0x61, 0x90, 0xbc, 0x1b, 0x24, 0x4b, 0x83, 0x64, 0x65, 0x10, 0xbe, 0x0c, 0xc2, 0x83, 0x45,
	0x78, 0xb1, 0x08, 0xaf, 0x16, 0xc9, 0x9b, 0x45, 0x32, 0xb7, 0x08, 0x0b, 0x8b, 0xb0, 0xb4, 0x08,
	0x9f, 0x16, 0xc9, 0xca, 0x22, 0x3c, 0x7d, 0x20, 0xe9, 0xc2, 0x8d, 0x97, 0x15, 0x59, 0x1c, 0x6f,
	0xb9, 0xdf, 0x4f, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xae, 0xba, 0x32, 0x3b, 0x01, 0x00,
	0x00,
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

/*
	Package pspb is a generated protocol buffer package.

	It is generated from these files:
		api.proto

	It has these top-level messages:
		ActionRequestHeader
		GetRequest
		GetResponse
		BulkRequest
		BulkResponse
		BulkItemRequest
		BulkItemResponse
		CreateRequest
		CreateResponse
		UpdateRequest
		UpdateResponse
		DeleteRequest
		DeleteResponse
		Failure
		Document
		Field
		FieldValue
		FieldDesc
*/
package pspb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/tiglabs/baudengine/proto/metapb"

import github_com_tiglabs_baudengine_proto_metapb "github.com/tiglabs/baudengine/proto/metapb"

import bytes "bytes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type OpType int32

const (
	// Creates the resource. If there is an existing document with the id, then it won't be removed.
	OpType_CREATE OpType = 0
	// Updates a document. If there an existing document with the id, it will be replaced.
	OpType_UPDATE OpType = 1
	// Deletes a document
	OpType_DELETE OpType = 2
)

var OpType_name = map[int32]string{
	0: "CREATE",
	1: "UPDATE",
	2: "DELETE",
}
var OpType_value = map[string]int32{
	"CREATE": 0,
	"UPDATE": 1,
	"DELETE": 2,
}

func (x OpType) String() string {
	return proto.EnumName(OpType_name, int32(x))
}
func (OpType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type WriteResult int32

const (
	WriteResult_CREATED   WriteResult = 0
	WriteResult_UPDATED   WriteResult = 1
	WriteResult_DELETED   WriteResult = 2
	WriteResult_NOT_FOUND WriteResult = 3
	WriteResult_NOOP      WriteResult = 4
)

var WriteResult_name = map[int32]string{
	0: "CREATED",
	1: "UPDATED",
	2: "DELETED",
	3: "NOT_FOUND",
	4: "NOOP",
}
var WriteResult_value = map[string]int32{
	"CREATED":   0,
	"UPDATED":   1,
	"DELETED":   2,
	"NOT_FOUND": 3,
	"NOOP":      4,
}

func (x WriteResult) String() string {
	return proto.EnumName(WriteResult_name, int32(x))
}
func (WriteResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

// Representing the field value for various types.
type ValueType int32

const (
	ValueType_NULL    ValueType = 0
	ValueType_INT     ValueType = 1
	ValueType_FLOAT   ValueType = 2
	ValueType_DECIMAL ValueType = 3
	ValueType_BOOL    ValueType = 4
	ValueType_STRING  ValueType = 5
	ValueType_TIME    ValueType = 6
	ValueType_BLOB    ValueType = 7
)

var ValueType_name = map[int32]string{
	0: "NULL",
	1: "INT",
	2: "FLOAT",
	3: "DECIMAL",
	4: "BOOL",
	5: "STRING",
	6: "TIME",
	7: "BLOB",
}
var ValueType_value = map[string]int32{
	"NULL":    0,
	"INT":     1,
	"FLOAT":   2,
	"DECIMAL": 3,
	"BOOL":    4,
	"STRING":  5,
	"TIME":    6,
	"BLOB":    7,
}

func (x ValueType) String() string {
	return proto.EnumName(ValueType_name, int32(x))
}
func (ValueType) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

// Controls how much information is stored in the postings lists
type IndexOption int32

const (
	// Not indexed
	IndexOption_NONE IndexOption = 0
	// Only documents are indexed: term frequencies and positions are omitted.
	// Phrase and other positional queries on the field will throw an exception, and scoring will behave as if any term in the document appears only once.
	IndexOption_DOCS IndexOption = 1
	// Only documents and term frequencies are indexed: positions are omitted.
	// This enables normal scoring, except Phrase and other positional queries will throw an exception.
	IndexOption_DOCS_FREQ IndexOption = 2
	// Indexes documents, frequencies and positions.
	// This is a typical default for full-text search: full scoring is enabled and positional queries are supported.
	IndexOption_DOCS_FREQ_POSITION IndexOption = 3
	// Indexes documents, frequencies, positions and offsets.
	// Character offsets are encoded alongside the positions.
	IndexOption_DOCS_FREQ_POSITION_OFFSET IndexOption = 4
)

var IndexOption_name = map[int32]string{
	0: "NONE",
	1: "DOCS",
	2: "DOCS_FREQ",
	3: "DOCS_FREQ_POSITION",
	4: "DOCS_FREQ_POSITION_OFFSET",
}
var IndexOption_value = map[string]int32{
	"NONE":                      0,
	"DOCS":                      1,
	"DOCS_FREQ":                 2,
	"DOCS_FREQ_POSITION":        3,
	"DOCS_FREQ_POSITION_OFFSET": 4,
}

func (x IndexOption) String() string {
	return proto.EnumName(IndexOption_name, int32(x))
}
func (IndexOption) EnumDescriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type ActionRequestHeader struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Partition          github_com_tiglabs_baudengine_proto_metapb.PartitionID `protobuf:"varint,2,opt,name=partition,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.PartitionID" json:"partition,omitempty"`
}

func (m *ActionRequestHeader) Reset()                    { *m = ActionRequestHeader{} }
func (*ActionRequestHeader) ProtoMessage()               {}
func (*ActionRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{0} }

type GetRequest struct {
	ActionRequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Id                  github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,2,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Fields              []uint32                                       `protobuf:"varint,3,rep,packed,name=fields" json:"fields,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{1} }

type GetResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Id                  github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,2,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Found               bool                                           `protobuf:"varint,3,opt,name=found,proto3" json:"found,omitempty"`
	Fields              []FieldValue                                   `protobuf:"bytes,4,rep,name=fields" json:"fields"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{2} }

type BulkRequest struct {
	ActionRequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Requests            []BulkItemRequest `protobuf:"bytes,2,rep,name=requests" json:"requests"`
}

func (m *BulkRequest) Reset()                    { *m = BulkRequest{} }
func (*BulkRequest) ProtoMessage()               {}
func (*BulkRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{3} }

type BulkResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Responses           []BulkItemResponse `protobuf:"bytes,2,rep,name=responses" json:"responses"`
}

func (m *BulkResponse) Reset()                    { *m = BulkResponse{} }
func (*BulkResponse) ProtoMessage()               {}
func (*BulkResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{4} }

type BulkItemRequest struct {
	OpType OpType         `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=OpType" json:"op_type,omitempty"`
	Create *CreateRequest `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	Update *UpdateRequest `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Delete *DeleteRequest `protobuf:"bytes,4,opt,name=delete" json:"delete,omitempty"`
}

func (m *BulkItemRequest) Reset()                    { *m = BulkItemRequest{} }
func (*BulkItemRequest) ProtoMessage()               {}
func (*BulkItemRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{5} }

type BulkItemResponse struct {
	OpType  OpType          `protobuf:"varint,1,opt,name=op_type,json=opType,proto3,enum=OpType" json:"op_type,omitempty"`
	Create  *CreateResponse `protobuf:"bytes,2,opt,name=create" json:"create,omitempty"`
	Update  *UpdateResponse `protobuf:"bytes,3,opt,name=update" json:"update,omitempty"`
	Delete  *DeleteResponse `protobuf:"bytes,4,opt,name=delete" json:"delete,omitempty"`
	Failure *Failure        `protobuf:"bytes,5,opt,name=failure" json:"failure,omitempty"`
}

func (m *BulkItemResponse) Reset()                    { *m = BulkItemResponse{} }
func (*BulkItemResponse) ProtoMessage()               {}
func (*BulkItemResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{6} }

type CreateRequest struct {
	Slot github_com_tiglabs_baudengine_proto_metapb.SlotID `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.SlotID" json:"slot,omitempty"`
	Doc  Document                                          `protobuf:"bytes,2,opt,name=doc" json:"doc"`
}

func (m *CreateRequest) Reset()                    { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage()               {}
func (*CreateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{7} }

type CreateResponse struct {
	Id     string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Result WriteResult `protobuf:"varint,2,opt,name=result,proto3,enum=WriteResult" json:"result,omitempty"`
}

func (m *CreateResponse) Reset()                    { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage()               {}
func (*CreateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{8} }

type UpdateRequest struct {
	Slot   github_com_tiglabs_baudengine_proto_metapb.SlotID `protobuf:"varint,1,opt,name=slot,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.SlotID" json:"slot,omitempty"`
	Doc    Document                                          `protobuf:"bytes,2,opt,name=doc" json:"doc"`
	Upsert bool                                              `protobuf:"varint,3,opt,name=upsert,proto3" json:"upsert,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{9} }

type UpdateResponse struct {
	Id     github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Result WriteResult                                    `protobuf:"varint,2,opt,name=result,proto3,enum=WriteResult" json:"result,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{10} }

type DeleteRequest struct {
	Id github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{11} }

type DeleteResponse struct {
	Id     github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Result WriteResult                                    `protobuf:"varint,2,opt,name=result,proto3,enum=WriteResult" json:"result,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{12} }

type Failure struct {
	Id      github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Cause   string                                         `protobuf:"bytes,2,opt,name=cause,proto3" json:"cause,omitempty"`
	Aborted bool                                           `protobuf:"varint,3,opt,name=aborted,proto3" json:"aborted,omitempty"`
}

func (m *Failure) Reset()                    { *m = Failure{} }
func (*Failure) ProtoMessage()               {}
func (*Failure) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{13} }

type Document struct {
	Id     github_com_tiglabs_baudengine_proto_metapb.Key `protobuf:"bytes,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.Key" json:"id,omitempty"`
	Fields []Field                                        `protobuf:"bytes,2,rep,name=fields" json:"fields"`
}

func (m *Document) Reset()                    { *m = Document{} }
func (*Document) ProtoMessage()               {}
func (*Document) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{14} }

type Field struct {
	FieldValue `protobuf:"bytes,1,opt,name=value,embedded=value" json:"value"`
	Desc       FieldDesc `protobuf:"bytes,2,opt,name=desc" json:"desc"`
}

func (m *Field) Reset()                    { *m = Field{} }
func (*Field) ProtoMessage()               {}
func (*Field) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{15} }

type FieldValue struct {
	Id    uint32                                             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  ValueType                                          `protobuf:"varint,2,opt,name=type,proto3,enum=ValueType" json:"type,omitempty"`
	Datas []github_com_tiglabs_baudengine_proto_metapb.Value `protobuf:"bytes,3,rep,name=datas,casttype=github.com/tiglabs/baudengine/proto/metapb.Value" json:"datas,omitempty"`
}

func (m *FieldValue) Reset()                    { *m = FieldValue{} }
func (*FieldValue) ProtoMessage()               {}
func (*FieldValue) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{16} }

type FieldDesc struct {
	Stored      bool        `protobuf:"varint,1,opt,name=stored,proto3" json:"stored,omitempty"`
	Tokenized   bool        `protobuf:"varint,2,opt,name=tokenized,proto3" json:"tokenized,omitempty"`
	IndexOption IndexOption `protobuf:"varint,3,opt,name=indexOption,proto3,enum=IndexOption" json:"indexOption,omitempty"`
	Analyzer    string      `protobuf:"bytes,4,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
}

func (m *FieldDesc) Reset()                    { *m = FieldDesc{} }
func (*FieldDesc) ProtoMessage()               {}
func (*FieldDesc) Descriptor() ([]byte, []int) { return fileDescriptorApi, []int{17} }

func init() {
	proto.RegisterType((*ActionRequestHeader)(nil), "ActionRequestHeader")
	proto.RegisterType((*GetRequest)(nil), "GetRequest")
	proto.RegisterType((*GetResponse)(nil), "GetResponse")
	proto.RegisterType((*BulkRequest)(nil), "BulkRequest")
	proto.RegisterType((*BulkResponse)(nil), "BulkResponse")
	proto.RegisterType((*BulkItemRequest)(nil), "BulkItemRequest")
	proto.RegisterType((*BulkItemResponse)(nil), "BulkItemResponse")
	proto.RegisterType((*CreateRequest)(nil), "CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "CreateResponse")
	proto.RegisterType((*UpdateRequest)(nil), "UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "UpdateResponse")
	proto.RegisterType((*DeleteRequest)(nil), "DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "DeleteResponse")
	proto.RegisterType((*Failure)(nil), "Failure")
	proto.RegisterType((*Document)(nil), "Document")
	proto.RegisterType((*Field)(nil), "Field")
	proto.RegisterType((*FieldValue)(nil), "FieldValue")
	proto.RegisterType((*FieldDesc)(nil), "FieldDesc")
	proto.RegisterEnum("OpType", OpType_name, OpType_value)
	proto.RegisterEnum("WriteResult", WriteResult_name, WriteResult_value)
	proto.RegisterEnum("ValueType", ValueType_name, ValueType_value)
	proto.RegisterEnum("IndexOption", IndexOption_name, IndexOption_value)
}
func (this *ActionRequestHeader) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ActionRequestHeader)
	if !ok {
		that2, ok := that.(ActionRequestHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.Partition != that1.Partition {
		return false
	}
	return true
}
func (this *GetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRequest)
	if !ok {
		that2, ok := that.(GetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionRequestHeader.Equal(&that1.ActionRequestHeader) {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if this.Fields[i] != that1.Fields[i] {
			return false
		}
	}
	return true
}
func (this *GetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetResponse)
	if !ok {
		that2, ok := that.(GetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Found != that1.Found {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(&that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *BulkRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkRequest)
	if !ok {
		that2, ok := that.(BulkRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ActionRequestHeader.Equal(&that1.ActionRequestHeader) {
		return false
	}
	if len(this.Requests) != len(that1.Requests) {
		return false
	}
	for i := range this.Requests {
		if !this.Requests[i].Equal(&that1.Requests[i]) {
			return false
		}
	}
	return true
}
func (this *BulkResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkResponse)
	if !ok {
		that2, ok := that.(BulkResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if len(this.Responses) != len(that1.Responses) {
		return false
	}
	for i := range this.Responses {
		if !this.Responses[i].Equal(&that1.Responses[i]) {
			return false
		}
	}
	return true
}
func (this *BulkItemRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkItemRequest)
	if !ok {
		that2, ok := that.(BulkItemRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OpType != that1.OpType {
		return false
	}
	if !this.Create.Equal(that1.Create) {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.Delete.Equal(that1.Delete) {
		return false
	}
	return true
}
func (this *BulkItemResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BulkItemResponse)
	if !ok {
		that2, ok := that.(BulkItemResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.OpType != that1.OpType {
		return false
	}
	if !this.Create.Equal(that1.Create) {
		return false
	}
	if !this.Update.Equal(that1.Update) {
		return false
	}
	if !this.Delete.Equal(that1.Delete) {
		return false
	}
	if !this.Failure.Equal(that1.Failure) {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if !this.Doc.Equal(&that1.Doc) {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *UpdateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateRequest)
	if !ok {
		that2, ok := that.(UpdateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	if !this.Doc.Equal(&that1.Doc) {
		return false
	}
	if this.Upsert != that1.Upsert {
		return false
	}
	return true
}
func (this *UpdateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateResponse)
	if !ok {
		that2, ok := that.(UpdateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *DeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteRequest)
	if !ok {
		that2, ok := that.(DeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	return true
}
func (this *DeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteResponse)
	if !ok {
		that2, ok := that.(DeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Result != that1.Result {
		return false
	}
	return true
}
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Failure)
	if !ok {
		that2, ok := that.(Failure)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.Cause != that1.Cause {
		return false
	}
	if this.Aborted != that1.Aborted {
		return false
	}
	return true
}
func (this *Document) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Document)
	if !ok {
		that2, ok := that.(Document)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if len(this.Fields) != len(that1.Fields) {
		return false
	}
	for i := range this.Fields {
		if !this.Fields[i].Equal(&that1.Fields[i]) {
			return false
		}
	}
	return true
}
func (this *Field) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Field)
	if !ok {
		that2, ok := that.(Field)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldValue.Equal(&that1.FieldValue) {
		return false
	}
	if !this.Desc.Equal(&that1.Desc) {
		return false
	}
	return true
}
func (this *FieldValue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldValue)
	if !ok {
		that2, ok := that.(FieldValue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.Datas) != len(that1.Datas) {
		return false
	}
	for i := range this.Datas {
		if !bytes.Equal(this.Datas[i], that1.Datas[i]) {
			return false
		}
	}
	return true
}
func (this *FieldDesc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FieldDesc)
	if !ok {
		that2, ok := that.(FieldDesc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Stored != that1.Stored {
		return false
	}
	if this.Tokenized != that1.Tokenized {
		return false
	}
	if this.IndexOption != that1.IndexOption {
		return false
	}
	if this.Analyzer != that1.Analyzer {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ApiGrpc service

type ApiGrpcClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	BulkWrite(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (*BulkResponse, error)
}

type apiGrpcClient struct {
	cc *grpc.ClientConn
}

func NewApiGrpcClient(cc *grpc.ClientConn) ApiGrpcClient {
	return &apiGrpcClient{cc}
}

func (c *apiGrpcClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/ApiGrpc/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiGrpcClient) BulkWrite(ctx context.Context, in *BulkRequest, opts ...grpc.CallOption) (*BulkResponse, error) {
	out := new(BulkResponse)
	err := grpc.Invoke(ctx, "/ApiGrpc/BulkWrite", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ApiGrpc service

type ApiGrpcServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	BulkWrite(context.Context, *BulkRequest) (*BulkResponse, error)
}

func RegisterApiGrpcServer(s *grpc.Server, srv ApiGrpcServer) {
	s.RegisterService(&_ApiGrpc_serviceDesc, srv)
}

func _ApiGrpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiGrpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiGrpc_BulkWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiGrpcServer).BulkWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiGrpc/BulkWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiGrpcServer).BulkWrite(ctx, req.(*BulkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApiGrpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ApiGrpc",
	HandlerType: (*ApiGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ApiGrpc_Get_Handler,
		},
		{
			MethodName: "BulkWrite",
			Handler:    _ApiGrpc_BulkWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *ActionRequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionRequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.RequestHeader.Size()))
	n1, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Partition != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Partition))
	}
	return i, nil
}

func (m *GetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ActionRequestHeader.Size()))
	n2, err := m.ActionRequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Fields) > 0 {
		dAtA4 := make([]byte, len(m.Fields)*10)
		var j3 int
		for _, num := range m.Fields {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	return i, nil
}

func (m *GetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ResponseHeader.Size()))
	n5, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Found {
		dAtA[i] = 0x18
		i++
		if m.Found {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x22
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BulkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ActionRequestHeader.Size()))
	n6, err := m.ActionRequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.Requests) > 0 {
		for _, msg := range m.Requests {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BulkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.ResponseHeader.Size()))
	n7, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if len(m.Responses) > 0 {
		for _, msg := range m.Responses {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BulkItemRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkItemRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OpType))
	}
	if m.Create != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Create.Size()))
		n8, err := m.Create.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Update != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Update.Size()))
		n9, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.Delete != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Delete.Size()))
		n10, err := m.Delete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}

func (m *BulkItemResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BulkItemResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.OpType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.OpType))
	}
	if m.Create != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Create.Size()))
		n11, err := m.Create.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.Update != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Update.Size()))
		n12, err := m.Update.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.Delete != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Delete.Size()))
		n13, err := m.Delete.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.Failure != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Failure.Size()))
		n14, err := m.Failure.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Slot))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Doc.Size()))
	n15, err := m.Doc.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *UpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Slot != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Slot))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Doc.Size()))
	n16, err := m.Doc.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	if m.Upsert {
		dAtA[i] = 0x18
		i++
		if m.Upsert {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *UpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Result))
	}
	return i, nil
}

func (m *Failure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Failure) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Cause) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cause)))
		i += copy(dAtA[i:], m.Cause)
	}
	if m.Aborted {
		dAtA[i] = 0x18
		i++
		if m.Aborted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Document) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Document) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Fields) > 0 {
		for _, msg := range m.Fields {
			dAtA[i] = 0x12
			i++
			i = encodeVarintApi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Field) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.FieldValue.Size()))
	n17, err := m.FieldValue.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	dAtA[i] = 0x12
	i++
	i = encodeVarintApi(dAtA, i, uint64(m.Desc.Size()))
	n18, err := m.Desc.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	return i, nil
}

func (m *FieldValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Id))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.Type))
	}
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintApi(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *FieldDesc) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldDesc) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Stored {
		dAtA[i] = 0x8
		i++
		if m.Stored {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Tokenized {
		dAtA[i] = 0x10
		i++
		if m.Tokenized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IndexOption != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintApi(dAtA, i, uint64(m.IndexOption))
	}
	if len(m.Analyzer) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintApi(dAtA, i, uint64(len(m.Analyzer)))
		i += copy(dAtA[i:], m.Analyzer)
	}
	return i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedActionRequestHeader(r randyApi, easy bool) *ActionRequestHeader {
	this := &ActionRequestHeader{}
	v1 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v1
	this.Partition = github_com_tiglabs_baudengine_proto_metapb.PartitionID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRequest(r randyApi, easy bool) *GetRequest {
	this := &GetRequest{}
	v2 := NewPopulatedActionRequestHeader(r, easy)
	this.ActionRequestHeader = *v2
	v3 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v3)
	for i := 0; i < v3; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(10)
	this.Fields = make([]uint32, v4)
	for i := 0; i < v4; i++ {
		this.Fields[i] = uint32(r.Uint32())
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetResponse(r randyApi, easy bool) *GetResponse {
	this := &GetResponse{}
	v5 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v5
	v6 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v6)
	for i := 0; i < v6; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	this.Found = bool(bool(r.Intn(2) == 0))
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.Fields = make([]FieldValue, v7)
		for i := 0; i < v7; i++ {
			v8 := NewPopulatedFieldValue(r, easy)
			this.Fields[i] = *v8
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBulkRequest(r randyApi, easy bool) *BulkRequest {
	this := &BulkRequest{}
	v9 := NewPopulatedActionRequestHeader(r, easy)
	this.ActionRequestHeader = *v9
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Requests = make([]BulkItemRequest, v10)
		for i := 0; i < v10; i++ {
			v11 := NewPopulatedBulkItemRequest(r, easy)
			this.Requests[i] = *v11
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBulkResponse(r randyApi, easy bool) *BulkResponse {
	this := &BulkResponse{}
	v12 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v12
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Responses = make([]BulkItemResponse, v13)
		for i := 0; i < v13; i++ {
			v14 := NewPopulatedBulkItemResponse(r, easy)
			this.Responses[i] = *v14
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBulkItemRequest(r randyApi, easy bool) *BulkItemRequest {
	this := &BulkItemRequest{}
	this.OpType = OpType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.Create = NewPopulatedCreateRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Update = NewPopulatedUpdateRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Delete = NewPopulatedDeleteRequest(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBulkItemResponse(r randyApi, easy bool) *BulkItemResponse {
	this := &BulkItemResponse{}
	this.OpType = OpType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.Create = NewPopulatedCreateResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Update = NewPopulatedUpdateResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Delete = NewPopulatedDeleteResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.Failure = NewPopulatedFailure(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateRequest(r randyApi, easy bool) *CreateRequest {
	this := &CreateRequest{}
	this.Slot = github_com_tiglabs_baudengine_proto_metapb.SlotID(r.Uint32())
	v15 := NewPopulatedDocument(r, easy)
	this.Doc = *v15
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateResponse(r randyApi, easy bool) *CreateResponse {
	this := &CreateResponse{}
	this.Id = string(randStringApi(r))
	this.Result = WriteResult([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateRequest(r randyApi, easy bool) *UpdateRequest {
	this := &UpdateRequest{}
	this.Slot = github_com_tiglabs_baudengine_proto_metapb.SlotID(r.Uint32())
	v16 := NewPopulatedDocument(r, easy)
	this.Doc = *v16
	this.Upsert = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateResponse(r randyApi, easy bool) *UpdateResponse {
	this := &UpdateResponse{}
	v17 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v17)
	for i := 0; i < v17; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	this.Result = WriteResult([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteRequest(r randyApi, easy bool) *DeleteRequest {
	this := &DeleteRequest{}
	v18 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v18)
	for i := 0; i < v18; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeleteResponse(r randyApi, easy bool) *DeleteResponse {
	this := &DeleteResponse{}
	v19 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v19)
	for i := 0; i < v19; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	this.Result = WriteResult([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFailure(r randyApi, easy bool) *Failure {
	this := &Failure{}
	v20 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v20)
	for i := 0; i < v20; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	this.Cause = string(randStringApi(r))
	this.Aborted = bool(bool(r.Intn(2) == 0))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDocument(r randyApi, easy bool) *Document {
	this := &Document{}
	v21 := r.Intn(100)
	this.Id = make(github_com_tiglabs_baudengine_proto_metapb.Key, v21)
	for i := 0; i < v21; i++ {
		this.Id[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v22 := r.Intn(5)
		this.Fields = make([]Field, v22)
		for i := 0; i < v22; i++ {
			v23 := NewPopulatedField(r, easy)
			this.Fields[i] = *v23
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedField(r randyApi, easy bool) *Field {
	this := &Field{}
	v24 := NewPopulatedFieldValue(r, easy)
	this.FieldValue = *v24
	v25 := NewPopulatedFieldDesc(r, easy)
	this.Desc = *v25
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldValue(r randyApi, easy bool) *FieldValue {
	this := &FieldValue{}
	this.Id = uint32(r.Uint32())
	this.Type = ValueType([]int32{0, 1, 2, 3, 4, 5, 6, 7}[r.Intn(8)])
	v26 := r.Intn(10)
	this.Datas = make([]github_com_tiglabs_baudengine_proto_metapb.Value, v26)
	for i := 0; i < v26; i++ {
		v27 := r.Intn(100)
		this.Datas[i] = make([]byte, v27)
		for j := 0; j < v27; j++ {
			this.Datas[i][j] = byte(r.Intn(256))
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFieldDesc(r randyApi, easy bool) *FieldDesc {
	this := &FieldDesc{}
	this.Stored = bool(bool(r.Intn(2) == 0))
	this.Tokenized = bool(bool(r.Intn(2) == 0))
	this.IndexOption = IndexOption([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.Analyzer = string(randStringApi(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyApi interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneApi(r randyApi) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringApi(r randyApi) string {
	v28 := r.Intn(100)
	tmps := make([]rune, v28)
	for i := 0; i < v28; i++ {
		tmps[i] = randUTF8RuneApi(r)
	}
	return string(tmps)
}
func randUnrecognizedApi(r randyApi, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldApi(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldApi(dAtA []byte, r randyApi, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		v29 := r.Int63()
		if r.Intn(2) == 0 {
			v29 *= -1
		}
		dAtA = encodeVarintPopulateApi(dAtA, uint64(v29))
	case 1:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateApi(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateApi(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateApi(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ActionRequestHeader) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.Partition != 0 {
		n += 1 + sovApi(uint64(m.Partition))
	}
	return n
}

func (m *GetRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ActionRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Fields) > 0 {
		l = 0
		for _, e := range m.Fields {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	return n
}

func (m *GetResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Found {
		n += 2
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BulkRequest) Size() (n int) {
	var l int
	_ = l
	l = m.ActionRequestHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if len(m.Requests) > 0 {
		for _, e := range m.Requests {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BulkResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovApi(uint64(l))
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *BulkItemRequest) Size() (n int) {
	var l int
	_ = l
	if m.OpType != 0 {
		n += 1 + sovApi(uint64(m.OpType))
	}
	if m.Create != nil {
		l = m.Create.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Delete != nil {
		l = m.Delete.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *BulkItemResponse) Size() (n int) {
	var l int
	_ = l
	if m.OpType != 0 {
		n += 1 + sovApi(uint64(m.OpType))
	}
	if m.Create != nil {
		l = m.Create.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Update != nil {
		l = m.Update.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Delete != nil {
		l = m.Delete.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Failure != nil {
		l = m.Failure.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovApi(uint64(m.Slot))
	}
	l = m.Doc.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *CreateResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	return n
}

func (m *UpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Slot != 0 {
		n += 1 + sovApi(uint64(m.Slot))
	}
	l = m.Doc.Size()
	n += 1 + l + sovApi(uint64(l))
	if m.Upsert {
		n += 2
	}
	return n
}

func (m *UpdateResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	return n
}

func (m *DeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovApi(uint64(m.Result))
	}
	return n
}

func (m *Failure) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cause)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Aborted {
		n += 2
	}
	return n
}

func (m *Document) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *Field) Size() (n int) {
	var l int
	_ = l
	l = m.FieldValue.Size()
	n += 1 + l + sovApi(uint64(l))
	l = m.Desc.Size()
	n += 1 + l + sovApi(uint64(l))
	return n
}

func (m *FieldValue) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovApi(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovApi(uint64(m.Type))
	}
	if len(m.Datas) > 0 {
		for _, b := range m.Datas {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	return n
}

func (m *FieldDesc) Size() (n int) {
	var l int
	_ = l
	if m.Stored {
		n += 2
	}
	if m.Tokenized {
		n += 2
	}
	if m.IndexOption != 0 {
		n += 1 + sovApi(uint64(m.IndexOption))
	}
	l = len(m.Analyzer)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	return n
}

func sovApi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ActionRequestHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ActionRequestHeader{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Partition:` + fmt.Sprintf("%v", this.Partition) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRequest{`,
		`ActionRequestHeader:` + strings.Replace(strings.Replace(this.ActionRequestHeader.String(), "ActionRequestHeader", "ActionRequestHeader", 1), `&`, ``, 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Fields:` + fmt.Sprintf("%v", this.Fields) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Found:` + fmt.Sprintf("%v", this.Found) + `,`,
		`Fields:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Fields), "FieldValue", "FieldValue", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkRequest{`,
		`ActionRequestHeader:` + strings.Replace(strings.Replace(this.ActionRequestHeader.String(), "ActionRequestHeader", "ActionRequestHeader", 1), `&`, ``, 1) + `,`,
		`Requests:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Requests), "BulkItemRequest", "BulkItemRequest", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Responses:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Responses), "BulkItemResponse", "BulkItemResponse", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkItemRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkItemRequest{`,
		`OpType:` + fmt.Sprintf("%v", this.OpType) + `,`,
		`Create:` + strings.Replace(fmt.Sprintf("%v", this.Create), "CreateRequest", "CreateRequest", 1) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "UpdateRequest", "UpdateRequest", 1) + `,`,
		`Delete:` + strings.Replace(fmt.Sprintf("%v", this.Delete), "DeleteRequest", "DeleteRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BulkItemResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BulkItemResponse{`,
		`OpType:` + fmt.Sprintf("%v", this.OpType) + `,`,
		`Create:` + strings.Replace(fmt.Sprintf("%v", this.Create), "CreateResponse", "CreateResponse", 1) + `,`,
		`Update:` + strings.Replace(fmt.Sprintf("%v", this.Update), "UpdateResponse", "UpdateResponse", 1) + `,`,
		`Delete:` + strings.Replace(fmt.Sprintf("%v", this.Delete), "DeleteResponse", "DeleteResponse", 1) + `,`,
		`Failure:` + strings.Replace(fmt.Sprintf("%v", this.Failure), "Failure", "Failure", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Doc:` + strings.Replace(strings.Replace(this.Doc.String(), "Document", "Document", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateRequest{`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`Doc:` + strings.Replace(strings.Replace(this.Doc.String(), "Document", "Document", 1), `&`, ``, 1) + `,`,
		`Upsert:` + fmt.Sprintf("%v", this.Upsert) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteResponse{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Result:` + fmt.Sprintf("%v", this.Result) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Failure) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Failure{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Cause:` + fmt.Sprintf("%v", this.Cause) + `,`,
		`Aborted:` + fmt.Sprintf("%v", this.Aborted) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Document) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Document{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Fields:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Fields), "Field", "Field", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Field) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Field{`,
		`FieldValue:` + strings.Replace(strings.Replace(this.FieldValue.String(), "FieldValue", "FieldValue", 1), `&`, ``, 1) + `,`,
		`Desc:` + strings.Replace(strings.Replace(this.Desc.String(), "FieldDesc", "FieldDesc", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldValue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldValue{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Datas:` + fmt.Sprintf("%v", this.Datas) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FieldDesc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FieldDesc{`,
		`Stored:` + fmt.Sprintf("%v", this.Stored) + `,`,
		`Tokenized:` + fmt.Sprintf("%v", this.Tokenized) + `,`,
		`IndexOption:` + fmt.Sprintf("%v", this.IndexOption) + `,`,
		`Analyzer:` + fmt.Sprintf("%v", this.Analyzer) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ActionRequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionRequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionRequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			m.Partition = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Partition |= (github_com_tiglabs_baudengine_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint32(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Fields = append(m.Fields, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Fields = append(m.Fields, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Found", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Found = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, FieldValue{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActionRequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ActionRequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requests = append(m.Requests, BulkItemRequest{})
			if err := m.Requests[len(m.Requests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, BulkItemResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkItemRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkItemRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkItemRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Create == nil {
				m.Create = &CreateRequest{}
			}
			if err := m.Create.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &UpdateRequest{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delete == nil {
				m.Delete = &DeleteRequest{}
			}
			if err := m.Delete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BulkItemResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BulkItemResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BulkItemResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpType", wireType)
			}
			m.OpType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpType |= (OpType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Create", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Create == nil {
				m.Create = &CreateResponse{}
			}
			if err := m.Create.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Update == nil {
				m.Update = &UpdateResponse{}
			}
			if err := m.Update.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delete", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Delete == nil {
				m.Delete = &DeleteResponse{}
			}
			if err := m.Delete.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Failure == nil {
				m.Failure = &Failure{}
			}
			if err := m.Failure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (github_com_tiglabs_baudengine_proto_metapb.SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (WriteResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (github_com_tiglabs_baudengine_proto_metapb.SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Doc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Doc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upsert", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Upsert = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (WriteResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (WriteResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Failure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Failure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Failure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cause = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aborted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Aborted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Document) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Document: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Document: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, Field{})
			if err := m.Fields[len(m.Fields)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldValue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Desc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ValueType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Datas", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Datas = append(m.Datas, make([]byte, postIndex-iNdEx))
			copy(m.Datas[len(m.Datas)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldDesc) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldDesc: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldDesc: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stored", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Stored = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokenized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tokenized = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexOption", wireType)
			}
			m.IndexOption = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IndexOption |= (IndexOption(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Analyzer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Analyzer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowApi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipApi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthApi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("api.proto", fileDescriptorApi) }

var fileDescriptorApi = []byte{
	// 1198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xdf, 0xb1, 0xd7, 0x1f, 0xfb, 0x1c, 0x27, 0xcb, 0x50, 0x55, 0x26, 0x82, 0x75, 0x58, 0x55,
	0x34, 0x04, 0xd8, 0xb4, 0x86, 0xf6, 0x50, 0x71, 0x89, 0xb3, 0x76, 0x6a, 0x70, 0xbd, 0x61, 0xe3,
	0xf0, 0x75, 0x49, 0xd7, 0xde, 0x49, 0xba, 0xaa, 0xe3, 0x5d, 0xf6, 0x03, 0x91, 0x48, 0x7c, 0x48,
	0xdc, 0x11, 0x12, 0x42, 0xe2, 0x08, 0x17, 0x84, 0xc4, 0x3f, 0xc0, 0x91, 0x63, 0x25, 0x2e, 0x95,
	0xb8, 0x70, 0x8a, 0x1a, 0xf3, 0x0f, 0x70, 0x44, 0x39, 0xa1, 0xf9, 0xf0, 0xfa, 0x83, 0x1e, 0x5a,
	0x1a, 0x7a, 0xda, 0xf9, 0xcd, 0xfb, 0xcd, 0x7b, 0xbf, 0x37, 0xfb, 0xe6, 0xcd, 0x80, 0xe2, 0x04,
	0x9e, 0x11, 0x84, 0x7e, 0xec, 0x2f, 0xbf, 0x76, 0xe0, 0xc5, 0x77, 0x92, 0x9e, 0xd1, 0xf7, 0x0f,
	0xd7, 0x0f, 0xfc, 0x03, 0x7f, 0x9d, 0x4d, 0xf7, 0x92, 0x7d, 0x86, 0x18, 0x60, 0x23, 0x41, 0xbf,
	0x36, 0x45, 0x8f, 0xbd, 0x83, 0x81, 0xd3, 0x8b, 0xd6, 0x7b, 0x4e, 0xe2, 0x92, 0xe1, 0x81, 0x37,
	0x24, 0x7c, 0xf1, 0xfa, 0x21, 0x89, 0x9d, 0xa0, 0xc7, 0x3e, 0x7c, 0x99, 0xfe, 0x03, 0x82, 0x67,
	0x37, 0xfa, 0xb1, 0xe7, 0x0f, 0x6d, 0xf2, 0x51, 0x42, 0xa2, 0xf8, 0x26, 0x71, 0x5c, 0x12, 0xe2,
	0x2b, 0x90, 0xbf, 0xc3, 0x46, 0x15, 0xb4, 0x82, 0x56, 0x4b, 0xb5, 0x45, 0x63, 0xc6, 0x5e, 0x2f,
	0xde, 0x3b, 0xa9, 0x4a, 0xf7, 0x4f, 0xaa, 0xc8, 0x16, 0x3c, 0xfc, 0x3e, 0x28, 0x81, 0x13, 0xc6,
	0x1e, 0xf5, 0x55, 0xc9, 0xac, 0xa0, 0xd5, 0x72, 0xfd, 0xc6, 0xd9, 0x49, 0xf5, 0xfa, 0xa3, 0xeb,
	0x32, 0xb6, 0xc7, 0xeb, 0x5b, 0xa6, 0x3d, 0x71, 0xa6, 0xff, 0x88, 0x00, 0xb6, 0x48, 0x2c, 0x04,
	0xe0, 0xeb, 0x73, 0xd2, 0x2e, 0x18, 0x0f, 0x49, 0xe0, 0x21, 0x02, 0xeb, 0x90, 0xf1, 0x5c, 0xa6,
	0x6c, 0xa1, 0x5e, 0x3b, 0x3b, 0xa9, 0x1a, 0x8f, 0xa1, 0xec, 0x6d, 0x72, 0x64, 0x67, 0x3c, 0x17,
	0x5f, 0x84, 0xfc, 0xbe, 0x47, 0x06, 0x6e, 0x54, 0xc9, 0xae, 0x64, 0x57, 0xcb, 0xb6, 0x40, 0x37,
	0xe4, 0xef, 0xbe, 0xaf, 0x4a, 0xfa, 0x6f, 0x08, 0x4a, 0x4c, 0x68, 0x14, 0xf8, 0xc3, 0x88, 0xe0,
	0xab, 0x73, 0x4a, 0x97, 0x8c, 0xb1, 0xe9, 0x7f, 0x15, 0x79, 0x01, 0x72, 0xfb, 0x7e, 0x32, 0x74,
	0x2b, 0xd9, 0x15, 0xb4, 0x5a, 0xb4, 0x39, 0xc0, 0x2f, 0xa7, 0xd2, 0xe5, 0x95, 0xec, 0x6a, 0xa9,
	0x56, 0x32, 0x9a, 0x14, 0xbe, 0xeb, 0x0c, 0x12, 0x52, 0x97, 0xa9, 0x90, 0xb9, 0x6c, 0x3e, 0x87,
	0x52, 0x3d, 0x19, 0xdc, 0x7d, 0xd2, 0x6d, 0xaf, 0x41, 0x31, 0xe4, 0x94, 0xa8, 0x92, 0x61, 0x91,
	0x55, 0x83, 0xfa, 0x6d, 0xc5, 0xe4, 0x50, 0xac, 0x15, 0xe1, 0x53, 0x9e, 0x10, 0xf0, 0x19, 0x2c,
	0x70, 0x01, 0xff, 0x7d, 0x3b, 0xaf, 0x81, 0x12, 0x0a, 0xce, 0x38, 0xfa, 0x33, 0x53, 0xd1, 0xb9,
	0x45, 0x84, 0x9f, 0x30, 0x45, 0xfc, 0x9f, 0x11, 0x2c, 0xcd, 0x29, 0xc5, 0x2b, 0x50, 0xf0, 0x83,
	0xbd, 0xf8, 0x28, 0x20, 0x4c, 0xc4, 0x62, 0xad, 0x60, 0x58, 0x41, 0xf7, 0x28, 0x20, 0x76, 0xde,
	0x67, 0x5f, 0xfc, 0x12, 0xe4, 0xfb, 0x21, 0x71, 0x62, 0xc2, 0xfe, 0x22, 0x3d, 0x39, 0x9b, 0x0c,
	0x0a, 0x0f, 0xb6, 0xb0, 0x52, 0x5e, 0x12, 0xb8, 0x94, 0x97, 0x15, 0xbc, 0x5d, 0x06, 0x53, 0x1e,
	0xb7, 0x52, 0x9e, 0x4b, 0x06, 0x24, 0x26, 0x15, 0x59, 0xf0, 0x4c, 0x06, 0x53, 0x1e, 0xb7, 0xea,
	0xbf, 0x23, 0x50, 0xe7, 0x33, 0x7b, 0x04, 0xb9, 0x97, 0xe7, 0xe4, 0x2e, 0xa5, 0x72, 0xb9, 0x8b,
	0x54, 0xef, 0xe5, 0x39, 0xbd, 0x4b, 0xa9, 0xde, 0x31, 0x51, 0x08, 0xbe, 0x3c, 0x27, 0x78, 0x29,
	0x15, 0x3c, 0x26, 0x72, 0x33, 0xd6, 0xa1, 0xb0, 0xef, 0x78, 0x83, 0x24, 0x24, 0x95, 0x1c, 0x63,
	0x16, 0x8d, 0x26, 0xc7, 0xf6, 0xd8, 0xa0, 0x7f, 0x0a, 0xe5, 0x99, 0xed, 0xc3, 0x2d, 0x90, 0xa3,
	0x81, 0x1f, 0xb3, 0x74, 0xca, 0xf5, 0x6b, 0x67, 0x27, 0xd5, 0xab, 0x8f, 0x71, 0x44, 0x76, 0x06,
	0x7e, 0xdc, 0x32, 0x6d, 0xe6, 0x02, 0xbf, 0x08, 0x59, 0xd7, 0xef, 0x8b, 0xbc, 0x15, 0xc3, 0xf4,
	0xfb, 0xc9, 0x21, 0x19, 0x8e, 0xab, 0x91, 0xda, 0xf4, 0x26, 0x2c, 0xce, 0x6e, 0x07, 0x5e, 0x64,
	0x07, 0x94, 0x46, 0x57, 0xd8, 0x61, 0xbb, 0x04, 0xf9, 0x90, 0x44, 0xc9, 0x20, 0x66, 0x7e, 0x16,
	0x6b, 0x0b, 0xc6, 0x7b, 0xa1, 0xc7, 0xf8, 0xc9, 0x20, 0xb6, 0x85, 0x4d, 0xff, 0x16, 0x41, 0x79,
	0xe6, 0xf7, 0x3e, 0xdd, 0x3c, 0x68, 0xdf, 0x4a, 0x82, 0x88, 0x84, 0xb1, 0xe8, 0x09, 0x02, 0xe9,
	0xc7, 0xb0, 0x38, 0xfb, 0x17, 0x45, 0x03, 0x42, 0x4f, 0xd4, 0x80, 0x1e, 0x6d, 0x4f, 0x76, 0xa0,
	0x3c, 0x53, 0xc9, 0xe7, 0x11, 0x9a, 0x26, 0x34, 0x5b, 0x6d, 0x4f, 0x31, 0xa1, 0x2f, 0x11, 0x14,
	0x44, 0x01, 0x9f, 0x4b, 0xd4, 0x0b, 0x90, 0xeb, 0x3b, 0x49, 0xc4, 0x4f, 0xa6, 0x62, 0x73, 0x80,
	0x2b, 0x50, 0x70, 0x7a, 0x7e, 0x18, 0x93, 0x71, 0x7f, 0x1f, 0x43, 0xd1, 0xb5, 0x8e, 0xa1, 0x38,
	0xae, 0x80, 0xf3, 0xca, 0x5d, 0xdc, 0x1b, 0xbc, 0x7f, 0xe6, 0xf9, 0xbd, 0xf1, 0xd0, 0x2b, 0xe3,
	0x36, 0xe4, 0x98, 0x11, 0xbf, 0x02, 0xb9, 0x8f, 0xe9, 0xc5, 0x22, 0x3a, 0xf5, 0xcc, 0x5d, 0x33,
	0xe9, 0xd2, 0x9c, 0x83, 0x2f, 0x81, 0xec, 0x92, 0x68, 0x5c, 0xc0, 0xc0, 0xb9, 0x26, 0x89, 0xfa,
	0x22, 0x06, 0xb3, 0x8a, 0x08, 0x5f, 0x21, 0x80, 0x89, 0xaf, 0xa9, 0xd3, 0x58, 0x66, 0x62, 0x35,
	0x90, 0x59, 0xb3, 0xe3, 0xbf, 0x09, 0x0c, 0xc6, 0x62, 0xfd, 0x8e, 0xcd, 0xe3, 0xb7, 0x20, 0xe7,
	0x3a, 0xb1, 0xc3, 0xaf, 0xef, 0x85, 0xfa, 0x1b, 0x67, 0x27, 0xd5, 0x2b, 0x8f, 0xb1, 0x27, 0xcc,
	0x9d, 0xcd, 0x5d, 0x08, 0x41, 0xdf, 0x20, 0x50, 0x52, 0xc1, 0xf4, 0x9c, 0x45, 0xb1, 0x1f, 0x12,
	0xae, 0xa9, 0x68, 0x0b, 0x84, 0x9f, 0x07, 0x25, 0xf6, 0xef, 0x92, 0xa1, 0x77, 0x4c, 0xf8, 0xed,
	0x5e, 0xb4, 0x27, 0x13, 0xd8, 0x80, 0x92, 0x37, 0x74, 0xc9, 0x27, 0x56, 0xc0, 0x1e, 0x4f, 0x59,
	0x51, 0x63, 0xad, 0xc9, 0x9c, 0x3d, 0x4d, 0xc0, 0xcb, 0x50, 0x74, 0x86, 0xce, 0xe0, 0xe8, 0x98,
	0x84, 0xac, 0xc7, 0x2a, 0x76, 0x8a, 0xb9, 0xaa, 0xb5, 0x57, 0x21, 0xcf, 0xfb, 0x3c, 0x06, 0xc8,
	0x6f, 0xda, 0x8d, 0x8d, 0x6e, 0x43, 0x95, 0xe8, 0x78, 0x77, 0xdb, 0xa4, 0x63, 0x44, 0xc7, 0x66,
	0xa3, 0xdd, 0xe8, 0x36, 0xd4, 0xcc, 0xda, 0x2d, 0x28, 0x4d, 0xd5, 0x33, 0x2e, 0x41, 0x81, 0x2f,
	0x31, 0x55, 0x89, 0x02, 0xbe, 0xc6, 0x54, 0x11, 0x05, 0x7c, 0x91, 0xa9, 0x66, 0x70, 0x19, 0x94,
	0x8e, 0xd5, 0xdd, 0x6b, 0x5a, 0xbb, 0x1d, 0x53, 0xcd, 0xe2, 0x22, 0xc8, 0x1d, 0xcb, 0xda, 0x56,
	0xe5, 0xb5, 0xdb, 0xa0, 0xa4, 0xfb, 0xce, 0xa6, 0x77, 0xdb, 0x6d, 0x55, 0xc2, 0x05, 0xc8, 0xb6,
	0x3a, 0x5d, 0x15, 0x61, 0x05, 0x72, 0xcd, 0xb6, 0xb5, 0xd1, 0x55, 0x33, 0xdc, 0xe1, 0x66, 0xeb,
	0xd6, 0x46, 0x9b, 0x7b, 0xa8, 0x5b, 0x56, 0x5b, 0x95, 0xa9, 0xb8, 0x9d, 0xae, 0xdd, 0xea, 0x6c,
	0xa9, 0x39, 0x3a, 0xdb, 0x6d, 0xdd, 0x6a, 0xa8, 0x79, 0x66, 0x6f, 0x5b, 0x75, 0xb5, 0xb0, 0x76,
	0x00, 0xa5, 0xa9, 0xcd, 0xe1, 0xa1, 0x3b, 0x34, 0xc3, 0x22, 0xc8, 0xa6, 0xb5, 0xb9, 0xa3, 0x22,
	0xaa, 0x8e, 0x8e, 0xf6, 0x9a, 0x76, 0xe3, 0x1d, 0x35, 0x83, 0x2f, 0x02, 0x4e, 0xe1, 0xde, 0xb6,
	0xb5, 0xd3, 0xea, 0xb6, 0xac, 0x8e, 0x9a, 0xc5, 0x2f, 0xc0, 0x73, 0xff, 0x9e, 0xdf, 0xb3, 0x9a,
	0xcd, 0x9d, 0x46, 0x57, 0x95, 0x6b, 0x1f, 0x40, 0x61, 0x23, 0xf0, 0xb6, 0xc2, 0xa0, 0x8f, 0x75,
	0xc8, 0x6e, 0x91, 0x18, 0x97, 0x8c, 0xc9, 0x53, 0x74, 0x79, 0xc1, 0x98, 0x7a, 0xee, 0xe9, 0x12,
	0x5e, 0x03, 0x85, 0x5e, 0xc1, 0x6c, 0x33, 0xf1, 0x82, 0x31, 0xf5, 0x7c, 0x5a, 0x2e, 0x1b, 0xd3,
	0x6f, 0x19, 0x5d, 0xaa, 0xbf, 0x79, 0xef, 0x54, 0x93, 0xfe, 0x38, 0xd5, 0xa4, 0x07, 0xa7, 0x9a,
	0xf4, 0xd7, 0xa9, 0x26, 0xfd, 0x7d, 0xaa, 0xa1, 0x2f, 0x46, 0x1a, 0xfa, 0x69, 0xa4, 0xa1, 0x5f,
	0x46, 0x9a, 0xf4, 0xeb, 0x48, 0x93, 0xee, 0x8d, 0x34, 0x74, 0x7f, 0xa4, 0xa1, 0x07, 0x23, 0x0d,
	0x7d, 0xfd, 0xa7, 0x26, 0xdd, 0x44, 0x1f, 0xca, 0x41, 0x14, 0xf4, 0x7a, 0x79, 0x56, 0x97, 0xaf,
	0xff, 0x13, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x07, 0x0c, 0x5b, 0x31, 0x0c, 0x00, 0x00,
}

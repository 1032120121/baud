// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zone_master.proto

/*
	Package zonemasterpb is a generated protocol buffer package.

	It is generated from these files:
		zone_master.proto

	It has these top-level messages:
		CreatePartitionRequest
		CreatePartitionResponse
		DeletePartitionRequest
		DeletePartitionResponse
		ChangeReplicaRequest
		ChangeReplicaResponse
		Route
		GetDBRequest
		GetDBResponse
		GetSpaceRequest
		GetSpaceResponse
		GetRouteRequest
		GetRouteResponse
		PSRegisterRequest
		PSRegisterResponse
		PSConfig
		PSHeartbeatRequest
		PSHeartbeatResponse
		PartitionInfo
		RuntimeInfo
		RaftStatus
		RaftFollowerStatus
		NodeSysStats
		PartitionStats
*/
package zonemasterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import meta "github.com/tiglabs/baudengine/proto/metapb"

import github_com_tiglabs_baudengine_proto_metapb "github.com/tiglabs/baudengine/proto/metapb"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import binary "encoding/binary"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReplicaChangeType int32

const (
	ReplicaChangeType_Add    ReplicaChangeType = 0
	ReplicaChangeType_Remove ReplicaChangeType = 1
)

var ReplicaChangeType_name = map[int32]string{
	0: "Add",
	1: "Remove",
}
var ReplicaChangeType_value = map[string]int32{
	"Add":    0,
	"Remove": 1,
}

func (x ReplicaChangeType) String() string {
	return proto.EnumName(ReplicaChangeType_name, int32(x))
}
func (ReplicaChangeType) EnumDescriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{0} }

type CreatePartitionRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Partition          meta.Partition `protobuf:"bytes,2,opt,name=partition" json:"partition"`
}

func (m *CreatePartitionRequest) Reset()                    { *m = CreatePartitionRequest{} }
func (*CreatePartitionRequest) ProtoMessage()               {}
func (*CreatePartitionRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{0} }

type CreatePartitionResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Replica             meta.Replica `protobuf:"bytes,2,opt,name=replica" json:"replica"`
}

func (m *CreatePartitionResponse) Reset()      { *m = CreatePartitionResponse{} }
func (*CreatePartitionResponse) ProtoMessage() {}
func (*CreatePartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorZoneMaster, []int{1}
}

type DeletePartitionRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	PartitionID        github_com_tiglabs_baudengine_proto_metapb.PartitionID `protobuf:"varint,2,opt,name=partitionID,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.PartitionID" json:"partitionID,omitempty"`
	NodeID             github_com_tiglabs_baudengine_proto_metapb.NodeID      `protobuf:"varint,3,opt,name=nodeId,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.NodeID" json:"nodeId,omitempty"`
}

func (m *DeletePartitionRequest) Reset()                    { *m = DeletePartitionRequest{} }
func (*DeletePartitionRequest) ProtoMessage()               {}
func (*DeletePartitionRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{2} }

type DeletePartitionResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *DeletePartitionResponse) Reset()      { *m = DeletePartitionResponse{} }
func (*DeletePartitionResponse) ProtoMessage() {}
func (*DeletePartitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorZoneMaster, []int{3}
}

type ChangeReplicaRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Type               ReplicaChangeType                                      `protobuf:"varint,2,opt,name=type,proto3,enum=ReplicaChangeType" json:"type,omitempty"`
	PartitionID        github_com_tiglabs_baudengine_proto_metapb.PartitionID `protobuf:"varint,3,opt,name=partition_id,json=partitionId,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.PartitionID" json:"partition_id,omitempty"`
	Replica            meta.Replica                                           `protobuf:"bytes,4,opt,name=replica" json:"replica"`
}

func (m *ChangeReplicaRequest) Reset()                    { *m = ChangeReplicaRequest{} }
func (*ChangeReplicaRequest) ProtoMessage()               {}
func (*ChangeReplicaRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{4} }

type ChangeReplicaResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *ChangeReplicaResponse) Reset()                    { *m = ChangeReplicaResponse{} }
func (*ChangeReplicaResponse) ProtoMessage()               {}
func (*ChangeReplicaResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{5} }

type Route struct {
	meta.Partition `protobuf:"bytes,1,opt,name=partition,embedded=partition" json:"partition"`
	Nodes          []*meta.Node                                      `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	Leader         github_com_tiglabs_baudengine_proto_metapb.NodeID `protobuf:"varint,3,opt,name=leader,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.NodeID" json:"leader,omitempty"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{6} }

type GetDBRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	DBName             string `protobuf:"bytes,2,opt,name=DB_name,json=DBName,proto3" json:"DB_name,omitempty"`
}

func (m *GetDBRequest) Reset()                    { *m = GetDBRequest{} }
func (*GetDBRequest) ProtoMessage()               {}
func (*GetDBRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{7} }

type GetDBResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Db                  meta.DB `protobuf:"bytes,2,opt,name=db" json:"db"`
}

func (m *GetDBResponse) Reset()                    { *m = GetDBResponse{} }
func (*GetDBResponse) ProtoMessage()               {}
func (*GetDBResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{8} }

type GetSpaceRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	ID                 github_com_tiglabs_baudengine_proto_metapb.DBID `protobuf:"varint,2,opt,name=db_id,json=dbId,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.DBID" json:"db_id,omitempty"`
	SpaceName          string                                          `protobuf:"bytes,3,opt,name=Space_name,json=SpaceName,proto3" json:"Space_name,omitempty"`
}

func (m *GetSpaceRequest) Reset()                    { *m = GetSpaceRequest{} }
func (*GetSpaceRequest) ProtoMessage()               {}
func (*GetSpaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{9} }

type GetSpaceResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Space               meta.Space `protobuf:"bytes,2,opt,name=space" json:"space"`
}

func (m *GetSpaceResponse) Reset()                    { *m = GetSpaceResponse{} }
func (*GetSpaceResponse) ProtoMessage()               {}
func (*GetSpaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{10} }

type GetRouteRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	DB                 github_com_tiglabs_baudengine_proto_metapb.DBID    `protobuf:"varint,2,opt,name=db,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.DBID" json:"db,omitempty"`
	Space              github_com_tiglabs_baudengine_proto_metapb.SpaceID `protobuf:"varint,3,opt,name=space,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.SpaceID" json:"space,omitempty"`
	Slot               github_com_tiglabs_baudengine_proto_metapb.SlotID  `protobuf:"varint,4,opt,name=slot,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.SlotID" json:"slot,omitempty"`
}

func (m *GetRouteRequest) Reset()                    { *m = GetRouteRequest{} }
func (*GetRouteRequest) ProtoMessage()               {}
func (*GetRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{11} }

type GetRouteResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Routes              []Route `protobuf:"bytes,2,rep,name=routes" json:"routes"`
}

func (m *GetRouteResponse) Reset()                    { *m = GetRouteResponse{} }
func (*GetRouteResponse) ProtoMessage()               {}
func (*GetRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{12} }

type PSRegisterRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID             github_com_tiglabs_baudengine_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.NodeID" json:"nodeID,omitempty"`
	Ip                 string                                            `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	RuntimeInfo        `protobuf:"bytes,4,opt,name=runtime_info,json=runtimeInfo,embedded=runtime_info" json:"runtime_info"`
}

func (m *PSRegisterRequest) Reset()                    { *m = PSRegisterRequest{} }
func (*PSRegisterRequest) ProtoMessage()               {}
func (*PSRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{13} }

type PSRegisterResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID              github_com_tiglabs_baudengine_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.NodeID" json:"nodeID,omitempty"`
	PSConfig            `protobuf:"bytes,3,opt,name=config,embedded=config" json:"config"`
	Partitions          []meta.Partition `protobuf:"bytes,4,rep,name=partitions" json:"partitions"`
}

func (m *PSRegisterResponse) Reset()                    { *m = PSRegisterResponse{} }
func (*PSRegisterResponse) ProtoMessage()               {}
func (*PSRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{14} }

type PSConfig struct {
	RPCPort                 int    `protobuf:"varint,1,opt,name=rpc_port,json=rpcPort,proto3,casttype=int" json:"rpc_port,omitempty"`
	AdminPort               int    `protobuf:"varint,2,opt,name=admin_port,json=adminPort,proto3,casttype=int" json:"admin_port,omitempty"`
	HeartbeatInterval       int    `protobuf:"varint,3,opt,name=heartbeat_interval,json=heartbeatInterval,proto3,casttype=int" json:"heartbeat_interval,omitempty"`
	RaftHeartbeatPort       int    `protobuf:"varint,4,opt,name=raft_heartbeat_port,json=raftHeartbeatPort,proto3,casttype=int" json:"raft_heartbeat_port,omitempty"`
	RaftReplicatePort       int    `protobuf:"varint,5,opt,name=raft_replicate_port,json=raftReplicatePort,proto3,casttype=int" json:"raft_replicate_port,omitempty"`
	RaftHeartbeatInterval   int    `protobuf:"varint,6,opt,name=raft_heartbeat_interval,json=raftHeartbeatInterval,proto3,casttype=int" json:"raft_heartbeat_interval,omitempty"`
	RaftRetainLogs          uint64 `protobuf:"varint,7,opt,name=raft_retain_logs,json=raftRetainLogs,proto3" json:"raft_retain_logs,omitempty"`
	RaftReplicaConcurrency  int    `protobuf:"varint,8,opt,name=raft_replica_concurrency,json=raftReplicaConcurrency,proto3,casttype=int" json:"raft_replica_concurrency,omitempty"`
	RaftSnapshotConcurrency int    `protobuf:"varint,9,opt,name=raft_snapshot_concurrency,json=raftSnapshotConcurrency,proto3,casttype=int" json:"raft_snapshot_concurrency,omitempty"`
}

func (m *PSConfig) Reset()                    { *m = PSConfig{} }
func (*PSConfig) ProtoMessage()               {}
func (*PSConfig) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{15} }

type PSHeartbeatRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID             github_com_tiglabs_baudengine_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.NodeID" json:"nodeID,omitempty"`
	Partitions         []PartitionInfo                                   `protobuf:"bytes,3,rep,name=partitions" json:"partitions"`
	SysStats           NodeSysStats                                      `protobuf:"bytes,4,opt,name=sys_stats,json=sysStats" json:"sys_stats"`
}

func (m *PSHeartbeatRequest) Reset()                    { *m = PSHeartbeatRequest{} }
func (*PSHeartbeatRequest) ProtoMessage()               {}
func (*PSHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{16} }

type PSHeartbeatResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *PSHeartbeatResponse) Reset()                    { *m = PSHeartbeatResponse{} }
func (*PSHeartbeatResponse) ProtoMessage()               {}
func (*PSHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{17} }

type PartitionInfo struct {
	ID         github_com_tiglabs_baudengine_proto_metapb.PartitionID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/tiglabs/baudengine/proto/metapb.PartitionID" json:"id,omitempty"`
	IsLeader   bool                                                   `protobuf:"varint,2,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	Status     meta.PartitionStatus                                   `protobuf:"varint,3,opt,name=status,proto3,enum=PartitionStatus" json:"status,omitempty"`
	Epoch      meta.PartitionEpoch                                    `protobuf:"bytes,4,opt,name=epoch" json:"epoch"`
	Statistics PartitionStats                                         `protobuf:"bytes,5,opt,name=statistics" json:"statistics"`
	RaftStatus *RaftStatus                                            `protobuf:"bytes,6,opt,name=raft_status,json=raftStatus" json:"raft_status,omitempty"`
}

func (m *PartitionInfo) Reset()                    { *m = PartitionInfo{} }
func (*PartitionInfo) ProtoMessage()               {}
func (*PartitionInfo) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{18} }

type RuntimeInfo struct {
	AppVersion string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	StartTime  string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	GoVersion  string `protobuf:"bytes,3,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *RuntimeInfo) Reset()                    { *m = RuntimeInfo{} }
func (*RuntimeInfo) ProtoMessage()               {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{19} }

type RaftStatus struct {
	meta.Replica `protobuf:"bytes,1,opt,name=replica,embedded=replica" json:"replica"`
	Term         uint64               `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	Index        uint64               `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Commit       uint64               `protobuf:"varint,4,opt,name=commit,proto3" json:"commit,omitempty"`
	Applied      uint64               `protobuf:"varint,5,opt,name=applied,proto3" json:"applied,omitempty"`
	Followers    []RaftFollowerStatus `protobuf:"bytes,6,rep,name=followers" json:"followers"`
}

func (m *RaftStatus) Reset()                    { *m = RaftStatus{} }
func (*RaftStatus) ProtoMessage()               {}
func (*RaftStatus) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{20} }

type RaftFollowerStatus struct {
	meta.Replica `protobuf:"bytes,1,opt,name=replica,embedded=replica" json:"replica"`
	Match        uint64 `protobuf:"varint,2,opt,name=match,proto3" json:"match,omitempty"`
	Commit       uint64 `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Next         uint64 `protobuf:"varint,4,opt,name=next,proto3" json:"next,omitempty"`
	DownSeconds  uint64 `protobuf:"varint,5,opt,name=down_seconds,json=downSeconds,proto3" json:"down_seconds,omitempty"`
	State        string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *RaftFollowerStatus) Reset()                    { *m = RaftFollowerStatus{} }
func (*RaftFollowerStatus) ProtoMessage()               {}
func (*RaftFollowerStatus) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{21} }

type NodeSysStats struct {
	// Memory
	MemoryTotal   uint64 `protobuf:"varint,1,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsedRss uint64 `protobuf:"varint,2,opt,name=memory_used_rss,json=memoryUsedRss,proto3" json:"memory_used_rss,omitempty"`
	MemoryUsed    uint64 `protobuf:"varint,3,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	MemoryFree    uint64 `protobuf:"varint,4,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	// double memory_used_percent               = 5;
	SwapMemoryTotal uint64 `protobuf:"varint,6,opt,name=swap_memory_total,json=swapMemoryTotal,proto3" json:"swap_memory_total,omitempty"`
	SwapMemoryUsed  uint64 `protobuf:"varint,7,opt,name=swap_memory_used,json=swapMemoryUsed,proto3" json:"swap_memory_used,omitempty"`
	SwapMemoryFree  uint64 `protobuf:"varint,8,opt,name=swap_memory_free,json=swapMemoryFree,proto3" json:"swap_memory_free,omitempty"`
	// double swap_memory_used_percent          = 9;
	// CPU
	CpuProcRate float64 `protobuf:"fixed64,10,opt,name=cpu_proc_rate,json=cpuProcRate,proto3" json:"cpu_proc_rate,omitempty"`
	CpuCount    uint32  `protobuf:"varint,11,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// double load1                             = 12;
	// double load5                             = 13;
	// double load15                            = 14;
	// Disk
	DiskTotal uint64 `protobuf:"varint,15,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
	DiskUsed  uint64 `protobuf:"varint,16,opt,name=disk_used,json=diskUsed,proto3" json:"disk_used,omitempty"`
	DiskFree  uint64 `protobuf:"varint,17,opt,name=disk_free,json=diskFree,proto3" json:"disk_free,omitempty"`
	// double disk_proc_rate                    = 18;
	// uint64 disk_read_byte_per_sec            = 19;
	// uint64 disk_write_byte_per_sec           = 20;
	// Net
	NetIoInBytePerSec       uint64 `protobuf:"varint,21,opt,name=net_io_in_byte_per_sec,json=netIoInBytePerSec,proto3" json:"net_io_in_byte_per_sec,omitempty"`
	NetIoOutBytePerSec      uint64 `protobuf:"varint,22,opt,name=net_io_out_byte_per_sec,json=netIoOutBytePerSec,proto3" json:"net_io_out_byte_per_sec,omitempty"`
	NetTcpConnections       uint32 `protobuf:"varint,23,opt,name=net_tcp_connections,json=netTcpConnections,proto3" json:"net_tcp_connections,omitempty"`
	NetTcpActiveOpensPerSec uint64 `protobuf:"varint,24,opt,name=net_tcp_active_opens_per_sec,json=netTcpActiveOpensPerSec,proto3" json:"net_tcp_active_opens_per_sec,omitempty"`
	// server
	Ops uint64 `protobuf:"varint,25,opt,name=ops,proto3" json:"ops,omitempty"`
}

func (m *NodeSysStats) Reset()                    { *m = NodeSysStats{} }
func (*NodeSysStats) ProtoMessage()               {}
func (*NodeSysStats) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{22} }

type PartitionStats struct {
	Size_                  uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Ops                    uint64 `protobuf:"varint,2,opt,name=ops,proto3" json:"ops,omitempty"`
	BytesInPerSec          uint64 `protobuf:"varint,3,opt,name=bytes_in_per_sec,json=bytesInPerSec,proto3" json:"bytes_in_per_sec,omitempty"`
	BytesOutPerSec         uint64 `protobuf:"varint,4,opt,name=bytes_out_per_sec,json=bytesOutPerSec,proto3" json:"bytes_out_per_sec,omitempty"`
	TotalCommandsProcessed uint64 `protobuf:"varint,5,opt,name=total_commands_processed,json=totalCommandsProcessed,proto3" json:"total_commands_processed,omitempty"`
	KeyspaceMisses         uint64 `protobuf:"varint,6,opt,name=keyspace_misses,json=keyspaceMisses,proto3" json:"keyspace_misses,omitempty"`
}

func (m *PartitionStats) Reset()                    { *m = PartitionStats{} }
func (*PartitionStats) ProtoMessage()               {}
func (*PartitionStats) Descriptor() ([]byte, []int) { return fileDescriptorZoneMaster, []int{23} }

func init() {
	proto.RegisterType((*CreatePartitionRequest)(nil), "CreatePartitionRequest")
	proto.RegisterType((*CreatePartitionResponse)(nil), "CreatePartitionResponse")
	proto.RegisterType((*DeletePartitionRequest)(nil), "DeletePartitionRequest")
	proto.RegisterType((*DeletePartitionResponse)(nil), "DeletePartitionResponse")
	proto.RegisterType((*ChangeReplicaRequest)(nil), "ChangeReplicaRequest")
	proto.RegisterType((*ChangeReplicaResponse)(nil), "ChangeReplicaResponse")
	proto.RegisterType((*Route)(nil), "Route")
	proto.RegisterType((*GetDBRequest)(nil), "GetDBRequest")
	proto.RegisterType((*GetDBResponse)(nil), "GetDBResponse")
	proto.RegisterType((*GetSpaceRequest)(nil), "GetSpaceRequest")
	proto.RegisterType((*GetSpaceResponse)(nil), "GetSpaceResponse")
	proto.RegisterType((*GetRouteRequest)(nil), "GetRouteRequest")
	proto.RegisterType((*GetRouteResponse)(nil), "GetRouteResponse")
	proto.RegisterType((*PSRegisterRequest)(nil), "PSRegisterRequest")
	proto.RegisterType((*PSRegisterResponse)(nil), "PSRegisterResponse")
	proto.RegisterType((*PSConfig)(nil), "PSConfig")
	proto.RegisterType((*PSHeartbeatRequest)(nil), "PSHeartbeatRequest")
	proto.RegisterType((*PSHeartbeatResponse)(nil), "PSHeartbeatResponse")
	proto.RegisterType((*PartitionInfo)(nil), "PartitionInfo")
	proto.RegisterType((*RuntimeInfo)(nil), "RuntimeInfo")
	proto.RegisterType((*RaftStatus)(nil), "RaftStatus")
	proto.RegisterType((*RaftFollowerStatus)(nil), "RaftFollowerStatus")
	proto.RegisterType((*NodeSysStats)(nil), "NodeSysStats")
	proto.RegisterType((*PartitionStats)(nil), "PartitionStats")
	proto.RegisterEnum("ReplicaChangeType", ReplicaChangeType_name, ReplicaChangeType_value)
}
func (this *CreatePartitionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePartitionRequest)
	if !ok {
		that2, ok := that.(CreatePartitionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if !this.Partition.Equal(&that1.Partition) {
		return false
	}
	return true
}
func (this *CreatePartitionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreatePartitionResponse)
	if !ok {
		that2, ok := that.(CreatePartitionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !this.Replica.Equal(&that1.Replica) {
		return false
	}
	return true
}
func (this *DeletePartitionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePartitionRequest)
	if !ok {
		that2, ok := that.(DeletePartitionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	return true
}
func (this *DeletePartitionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeletePartitionResponse)
	if !ok {
		that2, ok := that.(DeletePartitionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *ChangeReplicaRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeReplicaRequest)
	if !ok {
		that2, ok := that.(ChangeReplicaRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.PartitionID != that1.PartitionID {
		return false
	}
	if !this.Replica.Equal(&that1.Replica) {
		return false
	}
	return true
}
func (this *ChangeReplicaResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChangeReplicaResponse)
	if !ok {
		that2, ok := that.(ChangeReplicaResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Partition.Equal(&that1.Partition) {
		return false
	}
	if len(this.Nodes) != len(that1.Nodes) {
		return false
	}
	for i := range this.Nodes {
		if !this.Nodes[i].Equal(that1.Nodes[i]) {
			return false
		}
	}
	if this.Leader != that1.Leader {
		return false
	}
	return true
}
func (this *GetDBRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDBRequest)
	if !ok {
		that2, ok := that.(GetDBRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.DBName != that1.DBName {
		return false
	}
	return true
}
func (this *GetDBResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDBResponse)
	if !ok {
		that2, ok := that.(GetDBResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !this.Db.Equal(&that1.Db) {
		return false
	}
	return true
}
func (this *GetSpaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpaceRequest)
	if !ok {
		that2, ok := that.(GetSpaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.SpaceName != that1.SpaceName {
		return false
	}
	return true
}
func (this *GetSpaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpaceResponse)
	if !ok {
		that2, ok := that.(GetSpaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !this.Space.Equal(&that1.Space) {
		return false
	}
	return true
}
func (this *GetRouteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRouteRequest)
	if !ok {
		that2, ok := that.(GetRouteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.DB != that1.DB {
		return false
	}
	if this.Space != that1.Space {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *GetRouteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRouteResponse)
	if !ok {
		that2, ok := that.(GetRouteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(&that1.Routes[i]) {
			return false
		}
	}
	return true
}
func (this *PSRegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSRegisterRequest)
	if !ok {
		that2, ok := that.(PSRegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !this.RuntimeInfo.Equal(&that1.RuntimeInfo) {
		return false
	}
	return true
}
func (this *PSRegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSRegisterResponse)
	if !ok {
		that2, ok := that.(PSRegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.PSConfig.Equal(&that1.PSConfig) {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(&that1.Partitions[i]) {
			return false
		}
	}
	return true
}
func (this *PSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSConfig)
	if !ok {
		that2, ok := that.(PSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RPCPort != that1.RPCPort {
		return false
	}
	if this.AdminPort != that1.AdminPort {
		return false
	}
	if this.HeartbeatInterval != that1.HeartbeatInterval {
		return false
	}
	if this.RaftHeartbeatPort != that1.RaftHeartbeatPort {
		return false
	}
	if this.RaftReplicatePort != that1.RaftReplicatePort {
		return false
	}
	if this.RaftHeartbeatInterval != that1.RaftHeartbeatInterval {
		return false
	}
	if this.RaftRetainLogs != that1.RaftRetainLogs {
		return false
	}
	if this.RaftReplicaConcurrency != that1.RaftReplicaConcurrency {
		return false
	}
	if this.RaftSnapshotConcurrency != that1.RaftSnapshotConcurrency {
		return false
	}
	return true
}
func (this *PSHeartbeatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSHeartbeatRequest)
	if !ok {
		that2, ok := that.(PSHeartbeatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(&that1.Partitions[i]) {
			return false
		}
	}
	if !this.SysStats.Equal(&that1.SysStats) {
		return false
	}
	return true
}
func (this *PSHeartbeatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSHeartbeatResponse)
	if !ok {
		that2, ok := that.(PSHeartbeatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *PartitionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionInfo)
	if !ok {
		that2, ok := that.(PartitionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.IsLeader != that1.IsLeader {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Epoch.Equal(&that1.Epoch) {
		return false
	}
	if !this.Statistics.Equal(&that1.Statistics) {
		return false
	}
	if !this.RaftStatus.Equal(that1.RaftStatus) {
		return false
	}
	return true
}
func (this *RuntimeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuntimeInfo)
	if !ok {
		that2, ok := that.(RuntimeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppVersion != that1.AppVersion {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.GoVersion != that1.GoVersion {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	return true
}
func (this *RaftStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftStatus)
	if !ok {
		that2, ok := that.(RaftStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Replica.Equal(&that1.Replica) {
		return false
	}
	if this.Term != that1.Term {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Commit != that1.Commit {
		return false
	}
	if this.Applied != that1.Applied {
		return false
	}
	if len(this.Followers) != len(that1.Followers) {
		return false
	}
	for i := range this.Followers {
		if !this.Followers[i].Equal(&that1.Followers[i]) {
			return false
		}
	}
	return true
}
func (this *RaftFollowerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftFollowerStatus)
	if !ok {
		that2, ok := that.(RaftFollowerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Replica.Equal(&that1.Replica) {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	if this.Commit != that1.Commit {
		return false
	}
	if this.Next != that1.Next {
		return false
	}
	if this.DownSeconds != that1.DownSeconds {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *NodeSysStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSysStats)
	if !ok {
		that2, ok := that.(NodeSysStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemoryTotal != that1.MemoryTotal {
		return false
	}
	if this.MemoryUsedRss != that1.MemoryUsedRss {
		return false
	}
	if this.MemoryUsed != that1.MemoryUsed {
		return false
	}
	if this.MemoryFree != that1.MemoryFree {
		return false
	}
	if this.SwapMemoryTotal != that1.SwapMemoryTotal {
		return false
	}
	if this.SwapMemoryUsed != that1.SwapMemoryUsed {
		return false
	}
	if this.SwapMemoryFree != that1.SwapMemoryFree {
		return false
	}
	if this.CpuProcRate != that1.CpuProcRate {
		return false
	}
	if this.CpuCount != that1.CpuCount {
		return false
	}
	if this.DiskTotal != that1.DiskTotal {
		return false
	}
	if this.DiskUsed != that1.DiskUsed {
		return false
	}
	if this.DiskFree != that1.DiskFree {
		return false
	}
	if this.NetIoInBytePerSec != that1.NetIoInBytePerSec {
		return false
	}
	if this.NetIoOutBytePerSec != that1.NetIoOutBytePerSec {
		return false
	}
	if this.NetTcpConnections != that1.NetTcpConnections {
		return false
	}
	if this.NetTcpActiveOpensPerSec != that1.NetTcpActiveOpensPerSec {
		return false
	}
	if this.Ops != that1.Ops {
		return false
	}
	return true
}
func (this *PartitionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionStats)
	if !ok {
		that2, ok := that.(PartitionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if this.Ops != that1.Ops {
		return false
	}
	if this.BytesInPerSec != that1.BytesInPerSec {
		return false
	}
	if this.BytesOutPerSec != that1.BytesOutPerSec {
		return false
	}
	if this.TotalCommandsProcessed != that1.TotalCommandsProcessed {
		return false
	}
	if this.KeyspaceMisses != that1.KeyspaceMisses {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ZoneMasterRpc service

type ZoneMasterRpcClient interface {
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error)
	DeletePartition(ctx context.Context, in *DeletePartitionRequest, opts ...grpc.CallOption) (*DeletePartitionResponse, error)
	ChangeReplica(ctx context.Context, in *ChangeReplicaRequest, opts ...grpc.CallOption) (*ChangeReplicaResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	PSRegister(ctx context.Context, in *PSRegisterRequest, opts ...grpc.CallOption) (*PSRegisterResponse, error)
	PSHeartbeat(ctx context.Context, in *PSHeartbeatRequest, opts ...grpc.CallOption) (*PSHeartbeatResponse, error)
	GetDB(ctx context.Context, in *GetDBRequest, opts ...grpc.CallOption) (*GetDBResponse, error)
	GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*GetSpaceResponse, error)
}

type zoneMasterRpcClient struct {
	cc *grpc.ClientConn
}

func NewZoneMasterRpcClient(cc *grpc.ClientConn) ZoneMasterRpcClient {
	return &zoneMasterRpcClient{cc}
}

func (c *zoneMasterRpcClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*CreatePartitionResponse, error) {
	out := new(CreatePartitionResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/CreatePartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) DeletePartition(ctx context.Context, in *DeletePartitionRequest, opts ...grpc.CallOption) (*DeletePartitionResponse, error) {
	out := new(DeletePartitionResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/DeletePartition", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) ChangeReplica(ctx context.Context, in *ChangeReplicaRequest, opts ...grpc.CallOption) (*ChangeReplicaResponse, error) {
	out := new(ChangeReplicaResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/ChangeReplica", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/GetRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) PSRegister(ctx context.Context, in *PSRegisterRequest, opts ...grpc.CallOption) (*PSRegisterResponse, error) {
	out := new(PSRegisterResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/PSRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) PSHeartbeat(ctx context.Context, in *PSHeartbeatRequest, opts ...grpc.CallOption) (*PSHeartbeatResponse, error) {
	out := new(PSHeartbeatResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/PSHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) GetDB(ctx context.Context, in *GetDBRequest, opts ...grpc.CallOption) (*GetDBResponse, error) {
	out := new(GetDBResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/GetDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *zoneMasterRpcClient) GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*GetSpaceResponse, error) {
	out := new(GetSpaceResponse)
	err := grpc.Invoke(ctx, "/ZoneMasterRpc/GetSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ZoneMasterRpc service

type ZoneMasterRpcServer interface {
	CreatePartition(context.Context, *CreatePartitionRequest) (*CreatePartitionResponse, error)
	DeletePartition(context.Context, *DeletePartitionRequest) (*DeletePartitionResponse, error)
	ChangeReplica(context.Context, *ChangeReplicaRequest) (*ChangeReplicaResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	PSRegister(context.Context, *PSRegisterRequest) (*PSRegisterResponse, error)
	PSHeartbeat(context.Context, *PSHeartbeatRequest) (*PSHeartbeatResponse, error)
	GetDB(context.Context, *GetDBRequest) (*GetDBResponse, error)
	GetSpace(context.Context, *GetSpaceRequest) (*GetSpaceResponse, error)
}

func RegisterZoneMasterRpcServer(s *grpc.Server, srv ZoneMasterRpcServer) {
	s.RegisterService(&_ZoneMasterRpc_serviceDesc, srv)
}

func _ZoneMasterRpc_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_DeletePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).DeletePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/DeletePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).DeletePartition(ctx, req.(*DeletePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_ChangeReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).ChangeReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/ChangeReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).ChangeReplica(ctx, req.(*ChangeReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_PSRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).PSRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/PSRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).PSRegister(ctx, req.(*PSRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_PSHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).PSHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/PSHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).PSHeartbeat(ctx, req.(*PSHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_GetDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).GetDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/GetDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).GetDB(ctx, req.(*GetDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ZoneMasterRpc_GetSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ZoneMasterRpcServer).GetSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ZoneMasterRpc/GetSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ZoneMasterRpcServer).GetSpace(ctx, req.(*GetSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ZoneMasterRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ZoneMasterRpc",
	HandlerType: (*ZoneMasterRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartition",
			Handler:    _ZoneMasterRpc_CreatePartition_Handler,
		},
		{
			MethodName: "DeletePartition",
			Handler:    _ZoneMasterRpc_DeletePartition_Handler,
		},
		{
			MethodName: "ChangeReplica",
			Handler:    _ZoneMasterRpc_ChangeReplica_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _ZoneMasterRpc_GetRoute_Handler,
		},
		{
			MethodName: "PSRegister",
			Handler:    _ZoneMasterRpc_PSRegister_Handler,
		},
		{
			MethodName: "PSHeartbeat",
			Handler:    _ZoneMasterRpc_PSHeartbeat_Handler,
		},
		{
			MethodName: "GetDB",
			Handler:    _ZoneMasterRpc_GetDB_Handler,
		},
		{
			MethodName: "GetSpace",
			Handler:    _ZoneMasterRpc_GetSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zone_master.proto",
}

func (m *CreatePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n1, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x12
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Partition.Size()))
	n2, err := m.Partition.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	return i, nil
}

func (m *CreatePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreatePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n3, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Replica.Size()))
	n4, err := m.Replica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *DeletePartitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n5, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.PartitionID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.PartitionID))
	}
	if m.NodeID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NodeID))
	}
	return i, nil
}

func (m *DeletePartitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeletePartitionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n6, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	return i, nil
}

func (m *ChangeReplicaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReplicaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n7, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Type))
	}
	if m.PartitionID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.PartitionID))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Replica.Size()))
	n8, err := m.Replica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	return i, nil
}

func (m *ChangeReplicaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChangeReplicaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n9, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	return i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Partition.Size()))
	n10, err := m.Partition.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintZoneMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Leader != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Leader))
	}
	return i, nil
}

func (m *GetDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n11, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.DBName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.DBName)))
		i += copy(dAtA[i:], m.DBName)
	}
	return i, nil
}

func (m *GetDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n12, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	dAtA[i] = 0x12
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Db.Size()))
	n13, err := m.Db.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	return i, nil
}

func (m *GetSpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n14, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.ID))
	}
	if len(m.SpaceName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.SpaceName)))
		i += copy(dAtA[i:], m.SpaceName)
	}
	return i, nil
}

func (m *GetSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n15, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	dAtA[i] = 0x12
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Space.Size()))
	n16, err := m.Space.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *GetRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n17, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if m.DB != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.DB))
	}
	if m.Space != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Space))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *GetRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n18, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n18
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintZoneMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PSRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n19, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RuntimeInfo.Size()))
	n20, err := m.RuntimeInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *PSRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n21, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n21
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NodeID))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.PSConfig.Size()))
	n22, err := m.PSConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Partitions) > 0 {
		for _, msg := range m.Partitions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintZoneMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RPCPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RPCPort))
	}
	if m.AdminPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.AdminPort))
	}
	if m.HeartbeatInterval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.HeartbeatInterval))
	}
	if m.RaftHeartbeatPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftHeartbeatPort))
	}
	if m.RaftReplicatePort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftReplicatePort))
	}
	if m.RaftHeartbeatInterval != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftHeartbeatInterval))
	}
	if m.RaftRetainLogs != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftRetainLogs))
	}
	if m.RaftReplicaConcurrency != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftReplicaConcurrency))
	}
	if m.RaftSnapshotConcurrency != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftSnapshotConcurrency))
	}
	return i, nil
}

func (m *PSHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n23, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Partitions) > 0 {
		for _, msg := range m.Partitions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintZoneMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.SysStats.Size()))
	n24, err := m.SysStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *PSHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n25, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	return i, nil
}

func (m *PartitionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.ID))
	}
	if m.IsLeader {
		dAtA[i] = 0x10
		i++
		if m.IsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Status))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Epoch.Size()))
	n26, err := m.Epoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	dAtA[i] = 0x2a
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Statistics.Size()))
	n27, err := m.Statistics.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.RaftStatus != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.RaftStatus.Size()))
		n28, err := m.RaftStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *RuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.GoVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.GoVersion)))
		i += copy(dAtA[i:], m.GoVersion)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *RaftStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Replica.Size()))
	n29, err := m.Replica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Index))
	}
	if m.Commit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Commit))
	}
	if m.Applied != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Applied))
	}
	if len(m.Followers) > 0 {
		for _, msg := range m.Followers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintZoneMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RaftFollowerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftFollowerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintZoneMaster(dAtA, i, uint64(m.Replica.Size()))
	n30, err := m.Replica.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	if m.Match != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Match))
	}
	if m.Commit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Commit))
	}
	if m.Next != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Next))
	}
	if m.DownSeconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.DownSeconds))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *NodeSysStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSysStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MemoryTotal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.MemoryTotal))
	}
	if m.MemoryUsedRss != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.MemoryUsedRss))
	}
	if m.MemoryUsed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.MemoryUsed))
	}
	if m.MemoryFree != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.MemoryFree))
	}
	if m.SwapMemoryTotal != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.SwapMemoryTotal))
	}
	if m.SwapMemoryUsed != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.SwapMemoryUsed))
	}
	if m.SwapMemoryFree != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.SwapMemoryFree))
	}
	if m.CpuProcRate != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuProcRate))))
		i += 8
	}
	if m.CpuCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.CpuCount))
	}
	if m.DiskTotal != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.DiskTotal))
	}
	if m.DiskUsed != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.DiskUsed))
	}
	if m.DiskFree != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.DiskFree))
	}
	if m.NetIoInBytePerSec != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NetIoInBytePerSec))
	}
	if m.NetIoOutBytePerSec != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NetIoOutBytePerSec))
	}
	if m.NetTcpConnections != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NetTcpConnections))
	}
	if m.NetTcpActiveOpensPerSec != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.NetTcpActiveOpensPerSec))
	}
	if m.Ops != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Ops))
	}
	return i, nil
}

func (m *PartitionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Size_))
	}
	if m.Ops != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.Ops))
	}
	if m.BytesInPerSec != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.BytesInPerSec))
	}
	if m.BytesOutPerSec != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.BytesOutPerSec))
	}
	if m.TotalCommandsProcessed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.TotalCommandsProcessed))
	}
	if m.KeyspaceMisses != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintZoneMaster(dAtA, i, uint64(m.KeyspaceMisses))
	}
	return i, nil
}

func encodeVarintZoneMaster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedCreatePartitionRequest(r randyZoneMaster, easy bool) *CreatePartitionRequest {
	this := &CreatePartitionRequest{}
	v1 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v1
	v2 := meta.NewPopulatedPartition(r, easy)
	this.Partition = *v2
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreatePartitionResponse(r randyZoneMaster, easy bool) *CreatePartitionResponse {
	this := &CreatePartitionResponse{}
	v3 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v3
	v4 := meta.NewPopulatedReplica(r, easy)
	this.Replica = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeletePartitionRequest(r randyZoneMaster, easy bool) *DeletePartitionRequest {
	this := &DeletePartitionRequest{}
	v5 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v5
	this.PartitionID = github_com_tiglabs_baudengine_proto_metapb.PartitionID(r.Uint32())
	this.NodeID = github_com_tiglabs_baudengine_proto_metapb.NodeID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedDeletePartitionResponse(r randyZoneMaster, easy bool) *DeletePartitionResponse {
	this := &DeletePartitionResponse{}
	v6 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v6
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeReplicaRequest(r randyZoneMaster, easy bool) *ChangeReplicaRequest {
	this := &ChangeReplicaRequest{}
	v7 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v7
	this.Type = ReplicaChangeType([]int32{0, 1}[r.Intn(2)])
	this.PartitionID = github_com_tiglabs_baudengine_proto_metapb.PartitionID(r.Uint32())
	v8 := meta.NewPopulatedReplica(r, easy)
	this.Replica = *v8
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedChangeReplicaResponse(r randyZoneMaster, easy bool) *ChangeReplicaResponse {
	this := &ChangeReplicaResponse{}
	v9 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRoute(r randyZoneMaster, easy bool) *Route {
	this := &Route{}
	v10 := meta.NewPopulatedPartition(r, easy)
	this.Partition = *v10
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Nodes = make([]*meta.Node, v11)
		for i := 0; i < v11; i++ {
			this.Nodes[i] = meta.NewPopulatedNode(r, easy)
		}
	}
	this.Leader = github_com_tiglabs_baudengine_proto_metapb.NodeID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDBRequest(r randyZoneMaster, easy bool) *GetDBRequest {
	this := &GetDBRequest{}
	v12 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v12
	this.DBName = string(randStringZoneMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDBResponse(r randyZoneMaster, easy bool) *GetDBResponse {
	this := &GetDBResponse{}
	v13 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v13
	v14 := meta.NewPopulatedDB(r, easy)
	this.Db = *v14
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpaceRequest(r randyZoneMaster, easy bool) *GetSpaceRequest {
	this := &GetSpaceRequest{}
	v15 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v15
	this.ID = github_com_tiglabs_baudengine_proto_metapb.DBID(r.Uint32())
	this.SpaceName = string(randStringZoneMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpaceResponse(r randyZoneMaster, easy bool) *GetSpaceResponse {
	this := &GetSpaceResponse{}
	v16 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v16
	v17 := meta.NewPopulatedSpace(r, easy)
	this.Space = *v17
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRouteRequest(r randyZoneMaster, easy bool) *GetRouteRequest {
	this := &GetRouteRequest{}
	v18 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v18
	this.DB = github_com_tiglabs_baudengine_proto_metapb.DBID(r.Uint32())
	this.Space = github_com_tiglabs_baudengine_proto_metapb.SpaceID(r.Uint32())
	this.Slot = github_com_tiglabs_baudengine_proto_metapb.SlotID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRouteResponse(r randyZoneMaster, easy bool) *GetRouteResponse {
	this := &GetRouteResponse{}
	v19 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v19
	if r.Intn(10) != 0 {
		v20 := r.Intn(5)
		this.Routes = make([]Route, v20)
		for i := 0; i < v20; i++ {
			v21 := NewPopulatedRoute(r, easy)
			this.Routes[i] = *v21
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSRegisterRequest(r randyZoneMaster, easy bool) *PSRegisterRequest {
	this := &PSRegisterRequest{}
	v22 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v22
	this.NodeID = github_com_tiglabs_baudengine_proto_metapb.NodeID(r.Uint32())
	this.Ip = string(randStringZoneMaster(r))
	v23 := NewPopulatedRuntimeInfo(r, easy)
	this.RuntimeInfo = *v23
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSRegisterResponse(r randyZoneMaster, easy bool) *PSRegisterResponse {
	this := &PSRegisterResponse{}
	v24 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v24
	this.NodeID = github_com_tiglabs_baudengine_proto_metapb.NodeID(r.Uint32())
	v25 := NewPopulatedPSConfig(r, easy)
	this.PSConfig = *v25
	if r.Intn(10) != 0 {
		v26 := r.Intn(5)
		this.Partitions = make([]meta.Partition, v26)
		for i := 0; i < v26; i++ {
			v27 := meta.NewPopulatedPartition(r, easy)
			this.Partitions[i] = *v27
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSConfig(r randyZoneMaster, easy bool) *PSConfig {
	this := &PSConfig{}
	this.RPCPort = int(r.Uint32())
	this.AdminPort = int(r.Uint32())
	this.HeartbeatInterval = int(r.Uint32())
	this.RaftHeartbeatPort = int(r.Uint32())
	this.RaftReplicatePort = int(r.Uint32())
	this.RaftHeartbeatInterval = int(r.Uint32())
	this.RaftRetainLogs = uint64(uint64(r.Uint32()))
	this.RaftReplicaConcurrency = int(r.Uint32())
	this.RaftSnapshotConcurrency = int(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSHeartbeatRequest(r randyZoneMaster, easy bool) *PSHeartbeatRequest {
	this := &PSHeartbeatRequest{}
	v28 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v28
	this.NodeID = github_com_tiglabs_baudengine_proto_metapb.NodeID(r.Uint32())
	if r.Intn(10) != 0 {
		v29 := r.Intn(5)
		this.Partitions = make([]PartitionInfo, v29)
		for i := 0; i < v29; i++ {
			v30 := NewPopulatedPartitionInfo(r, easy)
			this.Partitions[i] = *v30
		}
	}
	v31 := NewPopulatedNodeSysStats(r, easy)
	this.SysStats = *v31
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSHeartbeatResponse(r randyZoneMaster, easy bool) *PSHeartbeatResponse {
	this := &PSHeartbeatResponse{}
	v32 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v32
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionInfo(r randyZoneMaster, easy bool) *PartitionInfo {
	this := &PartitionInfo{}
	this.ID = github_com_tiglabs_baudengine_proto_metapb.PartitionID(r.Uint32())
	this.IsLeader = bool(bool(r.Intn(2) == 0))
	this.Status = meta.PartitionStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v33 := meta.NewPopulatedPartitionEpoch(r, easy)
	this.Epoch = *v33
	v34 := NewPopulatedPartitionStats(r, easy)
	this.Statistics = *v34
	if r.Intn(10) != 0 {
		this.RaftStatus = NewPopulatedRaftStatus(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRuntimeInfo(r randyZoneMaster, easy bool) *RuntimeInfo {
	this := &RuntimeInfo{}
	this.AppVersion = string(randStringZoneMaster(r))
	this.StartTime = string(randStringZoneMaster(r))
	this.GoVersion = string(randStringZoneMaster(r))
	this.Platform = string(randStringZoneMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftStatus(r randyZoneMaster, easy bool) *RaftStatus {
	this := &RaftStatus{}
	v35 := meta.NewPopulatedReplica(r, easy)
	this.Replica = *v35
	this.Term = uint64(uint64(r.Uint32()))
	this.Index = uint64(uint64(r.Uint32()))
	this.Commit = uint64(uint64(r.Uint32()))
	this.Applied = uint64(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v36 := r.Intn(5)
		this.Followers = make([]RaftFollowerStatus, v36)
		for i := 0; i < v36; i++ {
			v37 := NewPopulatedRaftFollowerStatus(r, easy)
			this.Followers[i] = *v37
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftFollowerStatus(r randyZoneMaster, easy bool) *RaftFollowerStatus {
	this := &RaftFollowerStatus{}
	v38 := meta.NewPopulatedReplica(r, easy)
	this.Replica = *v38
	this.Match = uint64(uint64(r.Uint32()))
	this.Commit = uint64(uint64(r.Uint32()))
	this.Next = uint64(uint64(r.Uint32()))
	this.DownSeconds = uint64(uint64(r.Uint32()))
	this.State = string(randStringZoneMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNodeSysStats(r randyZoneMaster, easy bool) *NodeSysStats {
	this := &NodeSysStats{}
	this.MemoryTotal = uint64(uint64(r.Uint32()))
	this.MemoryUsedRss = uint64(uint64(r.Uint32()))
	this.MemoryUsed = uint64(uint64(r.Uint32()))
	this.MemoryFree = uint64(uint64(r.Uint32()))
	this.SwapMemoryTotal = uint64(uint64(r.Uint32()))
	this.SwapMemoryUsed = uint64(uint64(r.Uint32()))
	this.SwapMemoryFree = uint64(uint64(r.Uint32()))
	this.CpuProcRate = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.CpuProcRate *= -1
	}
	this.CpuCount = uint32(r.Uint32())
	this.DiskTotal = uint64(uint64(r.Uint32()))
	this.DiskUsed = uint64(uint64(r.Uint32()))
	this.DiskFree = uint64(uint64(r.Uint32()))
	this.NetIoInBytePerSec = uint64(uint64(r.Uint32()))
	this.NetIoOutBytePerSec = uint64(uint64(r.Uint32()))
	this.NetTcpConnections = uint32(r.Uint32())
	this.NetTcpActiveOpensPerSec = uint64(uint64(r.Uint32()))
	this.Ops = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionStats(r randyZoneMaster, easy bool) *PartitionStats {
	this := &PartitionStats{}
	this.Size_ = uint64(uint64(r.Uint32()))
	this.Ops = uint64(uint64(r.Uint32()))
	this.BytesInPerSec = uint64(uint64(r.Uint32()))
	this.BytesOutPerSec = uint64(uint64(r.Uint32()))
	this.TotalCommandsProcessed = uint64(uint64(r.Uint32()))
	this.KeyspaceMisses = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyZoneMaster interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneZoneMaster(r randyZoneMaster) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringZoneMaster(r randyZoneMaster) string {
	v39 := r.Intn(100)
	tmps := make([]rune, v39)
	for i := 0; i < v39; i++ {
		tmps[i] = randUTF8RuneZoneMaster(r)
	}
	return string(tmps)
}
func randUnrecognizedZoneMaster(r randyZoneMaster, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldZoneMaster(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldZoneMaster(dAtA []byte, r randyZoneMaster, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(key))
		v40 := r.Int63()
		if r.Intn(2) == 0 {
			v40 *= -1
		}
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(v40))
	case 1:
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateZoneMaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateZoneMaster(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *CreatePartitionRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = m.Partition.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *CreatePartitionResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = m.Replica.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *DeletePartitionRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.PartitionID != 0 {
		n += 1 + sovZoneMaster(uint64(m.PartitionID))
	}
	if m.NodeID != 0 {
		n += 1 + sovZoneMaster(uint64(m.NodeID))
	}
	return n
}

func (m *DeletePartitionResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *ChangeReplicaRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.Type != 0 {
		n += 1 + sovZoneMaster(uint64(m.Type))
	}
	if m.PartitionID != 0 {
		n += 1 + sovZoneMaster(uint64(m.PartitionID))
	}
	l = m.Replica.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *ChangeReplicaResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *Route) Size() (n int) {
	var l int
	_ = l
	l = m.Partition.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovZoneMaster(uint64(l))
		}
	}
	if m.Leader != 0 {
		n += 1 + sovZoneMaster(uint64(m.Leader))
	}
	return n
}

func (m *GetDBRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = len(m.DBName)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	return n
}

func (m *GetDBResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = m.Db.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *GetSpaceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.ID != 0 {
		n += 1 + sovZoneMaster(uint64(m.ID))
	}
	l = len(m.SpaceName)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	return n
}

func (m *GetSpaceResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = m.Space.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *GetRouteRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.DB != 0 {
		n += 1 + sovZoneMaster(uint64(m.DB))
	}
	if m.Space != 0 {
		n += 1 + sovZoneMaster(uint64(m.Space))
	}
	if m.Slot != 0 {
		n += 1 + sovZoneMaster(uint64(m.Slot))
	}
	return n
}

func (m *GetRouteResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovZoneMaster(uint64(l))
		}
	}
	return n
}

func (m *PSRegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovZoneMaster(uint64(m.NodeID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	l = m.RuntimeInfo.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *PSRegisterResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovZoneMaster(uint64(m.NodeID))
	}
	l = m.PSConfig.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovZoneMaster(uint64(l))
		}
	}
	return n
}

func (m *PSConfig) Size() (n int) {
	var l int
	_ = l
	if m.RPCPort != 0 {
		n += 1 + sovZoneMaster(uint64(m.RPCPort))
	}
	if m.AdminPort != 0 {
		n += 1 + sovZoneMaster(uint64(m.AdminPort))
	}
	if m.HeartbeatInterval != 0 {
		n += 1 + sovZoneMaster(uint64(m.HeartbeatInterval))
	}
	if m.RaftHeartbeatPort != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftHeartbeatPort))
	}
	if m.RaftReplicatePort != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftReplicatePort))
	}
	if m.RaftHeartbeatInterval != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftHeartbeatInterval))
	}
	if m.RaftRetainLogs != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftRetainLogs))
	}
	if m.RaftReplicaConcurrency != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftReplicaConcurrency))
	}
	if m.RaftSnapshotConcurrency != 0 {
		n += 1 + sovZoneMaster(uint64(m.RaftSnapshotConcurrency))
	}
	return n
}

func (m *PSHeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovZoneMaster(uint64(m.NodeID))
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovZoneMaster(uint64(l))
		}
	}
	l = m.SysStats.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *PSHeartbeatResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	return n
}

func (m *PartitionInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovZoneMaster(uint64(m.ID))
	}
	if m.IsLeader {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovZoneMaster(uint64(m.Status))
	}
	l = m.Epoch.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	l = m.Statistics.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.RaftStatus != nil {
		l = m.RaftStatus.Size()
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	return n
}

func (m *RuntimeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	l = len(m.GoVersion)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	return n
}

func (m *RaftStatus) Size() (n int) {
	var l int
	_ = l
	l = m.Replica.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.Term != 0 {
		n += 1 + sovZoneMaster(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovZoneMaster(uint64(m.Index))
	}
	if m.Commit != 0 {
		n += 1 + sovZoneMaster(uint64(m.Commit))
	}
	if m.Applied != 0 {
		n += 1 + sovZoneMaster(uint64(m.Applied))
	}
	if len(m.Followers) > 0 {
		for _, e := range m.Followers {
			l = e.Size()
			n += 1 + l + sovZoneMaster(uint64(l))
		}
	}
	return n
}

func (m *RaftFollowerStatus) Size() (n int) {
	var l int
	_ = l
	l = m.Replica.Size()
	n += 1 + l + sovZoneMaster(uint64(l))
	if m.Match != 0 {
		n += 1 + sovZoneMaster(uint64(m.Match))
	}
	if m.Commit != 0 {
		n += 1 + sovZoneMaster(uint64(m.Commit))
	}
	if m.Next != 0 {
		n += 1 + sovZoneMaster(uint64(m.Next))
	}
	if m.DownSeconds != 0 {
		n += 1 + sovZoneMaster(uint64(m.DownSeconds))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovZoneMaster(uint64(l))
	}
	return n
}

func (m *NodeSysStats) Size() (n int) {
	var l int
	_ = l
	if m.MemoryTotal != 0 {
		n += 1 + sovZoneMaster(uint64(m.MemoryTotal))
	}
	if m.MemoryUsedRss != 0 {
		n += 1 + sovZoneMaster(uint64(m.MemoryUsedRss))
	}
	if m.MemoryUsed != 0 {
		n += 1 + sovZoneMaster(uint64(m.MemoryUsed))
	}
	if m.MemoryFree != 0 {
		n += 1 + sovZoneMaster(uint64(m.MemoryFree))
	}
	if m.SwapMemoryTotal != 0 {
		n += 1 + sovZoneMaster(uint64(m.SwapMemoryTotal))
	}
	if m.SwapMemoryUsed != 0 {
		n += 1 + sovZoneMaster(uint64(m.SwapMemoryUsed))
	}
	if m.SwapMemoryFree != 0 {
		n += 1 + sovZoneMaster(uint64(m.SwapMemoryFree))
	}
	if m.CpuProcRate != 0 {
		n += 9
	}
	if m.CpuCount != 0 {
		n += 1 + sovZoneMaster(uint64(m.CpuCount))
	}
	if m.DiskTotal != 0 {
		n += 1 + sovZoneMaster(uint64(m.DiskTotal))
	}
	if m.DiskUsed != 0 {
		n += 2 + sovZoneMaster(uint64(m.DiskUsed))
	}
	if m.DiskFree != 0 {
		n += 2 + sovZoneMaster(uint64(m.DiskFree))
	}
	if m.NetIoInBytePerSec != 0 {
		n += 2 + sovZoneMaster(uint64(m.NetIoInBytePerSec))
	}
	if m.NetIoOutBytePerSec != 0 {
		n += 2 + sovZoneMaster(uint64(m.NetIoOutBytePerSec))
	}
	if m.NetTcpConnections != 0 {
		n += 2 + sovZoneMaster(uint64(m.NetTcpConnections))
	}
	if m.NetTcpActiveOpensPerSec != 0 {
		n += 2 + sovZoneMaster(uint64(m.NetTcpActiveOpensPerSec))
	}
	if m.Ops != 0 {
		n += 2 + sovZoneMaster(uint64(m.Ops))
	}
	return n
}

func (m *PartitionStats) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovZoneMaster(uint64(m.Size_))
	}
	if m.Ops != 0 {
		n += 1 + sovZoneMaster(uint64(m.Ops))
	}
	if m.BytesInPerSec != 0 {
		n += 1 + sovZoneMaster(uint64(m.BytesInPerSec))
	}
	if m.BytesOutPerSec != 0 {
		n += 1 + sovZoneMaster(uint64(m.BytesOutPerSec))
	}
	if m.TotalCommandsProcessed != 0 {
		n += 1 + sovZoneMaster(uint64(m.TotalCommandsProcessed))
	}
	if m.KeyspaceMisses != 0 {
		n += 1 + sovZoneMaster(uint64(m.KeyspaceMisses))
	}
	return n
}

func sovZoneMaster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozZoneMaster(x uint64) (n int) {
	return sovZoneMaster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreatePartitionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartitionRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Partition:` + strings.Replace(strings.Replace(this.Partition.String(), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreatePartitionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreatePartitionResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Replica:` + strings.Replace(strings.Replace(this.Replica.String(), "Replica", "meta.Replica", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartitionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartitionRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeletePartitionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeletePartitionResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeReplicaRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeReplicaRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PartitionID:` + fmt.Sprintf("%v", this.PartitionID) + `,`,
		`Replica:` + strings.Replace(strings.Replace(this.Replica.String(), "Replica", "meta.Replica", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ChangeReplicaResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChangeReplicaResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Route) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route{`,
		`Partition:` + strings.Replace(strings.Replace(this.Partition.String(), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`Nodes:` + strings.Replace(fmt.Sprintf("%v", this.Nodes), "Node", "meta.Node", 1) + `,`,
		`Leader:` + fmt.Sprintf("%v", this.Leader) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDBRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDBRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`DBName:` + fmt.Sprintf("%v", this.DBName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDBResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDBResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Db:` + strings.Replace(strings.Replace(this.Db.String(), "DB", "meta.DB", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`SpaceName:` + fmt.Sprintf("%v", this.SpaceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Space:` + strings.Replace(strings.Replace(this.Space.String(), "Space", "meta.Space", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRouteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRouteRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`DB:` + fmt.Sprintf("%v", this.DB) + `,`,
		`Space:` + fmt.Sprintf("%v", this.Space) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRouteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRouteResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Routes:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSRegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSRegisterRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`RuntimeInfo:` + strings.Replace(strings.Replace(this.RuntimeInfo.String(), "RuntimeInfo", "RuntimeInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSRegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSRegisterResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`PSConfig:` + strings.Replace(strings.Replace(this.PSConfig.String(), "PSConfig", "PSConfig", 1), `&`, ``, 1) + `,`,
		`Partitions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Partitions), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSConfig{`,
		`RPCPort:` + fmt.Sprintf("%v", this.RPCPort) + `,`,
		`AdminPort:` + fmt.Sprintf("%v", this.AdminPort) + `,`,
		`HeartbeatInterval:` + fmt.Sprintf("%v", this.HeartbeatInterval) + `,`,
		`RaftHeartbeatPort:` + fmt.Sprintf("%v", this.RaftHeartbeatPort) + `,`,
		`RaftReplicatePort:` + fmt.Sprintf("%v", this.RaftReplicatePort) + `,`,
		`RaftHeartbeatInterval:` + fmt.Sprintf("%v", this.RaftHeartbeatInterval) + `,`,
		`RaftRetainLogs:` + fmt.Sprintf("%v", this.RaftRetainLogs) + `,`,
		`RaftReplicaConcurrency:` + fmt.Sprintf("%v", this.RaftReplicaConcurrency) + `,`,
		`RaftSnapshotConcurrency:` + fmt.Sprintf("%v", this.RaftSnapshotConcurrency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSHeartbeatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSHeartbeatRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Partitions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Partitions), "PartitionInfo", "PartitionInfo", 1), `&`, ``, 1) + `,`,
		`SysStats:` + strings.Replace(strings.Replace(this.SysStats.String(), "NodeSysStats", "NodeSysStats", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSHeartbeatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSHeartbeatResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionInfo{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`IsLeader:` + fmt.Sprintf("%v", this.IsLeader) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Epoch:` + strings.Replace(strings.Replace(this.Epoch.String(), "PartitionEpoch", "meta.PartitionEpoch", 1), `&`, ``, 1) + `,`,
		`Statistics:` + strings.Replace(strings.Replace(this.Statistics.String(), "PartitionStats", "PartitionStats", 1), `&`, ``, 1) + `,`,
		`RaftStatus:` + strings.Replace(fmt.Sprintf("%v", this.RaftStatus), "RaftStatus", "RaftStatus", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RuntimeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuntimeInfo{`,
		`AppVersion:` + fmt.Sprintf("%v", this.AppVersion) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`GoVersion:` + fmt.Sprintf("%v", this.GoVersion) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftStatus{`,
		`Replica:` + strings.Replace(strings.Replace(this.Replica.String(), "Replica", "meta.Replica", 1), `&`, ``, 1) + `,`,
		`Term:` + fmt.Sprintf("%v", this.Term) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Commit:` + fmt.Sprintf("%v", this.Commit) + `,`,
		`Applied:` + fmt.Sprintf("%v", this.Applied) + `,`,
		`Followers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Followers), "RaftFollowerStatus", "RaftFollowerStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftFollowerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftFollowerStatus{`,
		`Replica:` + strings.Replace(strings.Replace(this.Replica.String(), "Replica", "meta.Replica", 1), `&`, ``, 1) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`Commit:` + fmt.Sprintf("%v", this.Commit) + `,`,
		`Next:` + fmt.Sprintf("%v", this.Next) + `,`,
		`DownSeconds:` + fmt.Sprintf("%v", this.DownSeconds) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSysStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSysStats{`,
		`MemoryTotal:` + fmt.Sprintf("%v", this.MemoryTotal) + `,`,
		`MemoryUsedRss:` + fmt.Sprintf("%v", this.MemoryUsedRss) + `,`,
		`MemoryUsed:` + fmt.Sprintf("%v", this.MemoryUsed) + `,`,
		`MemoryFree:` + fmt.Sprintf("%v", this.MemoryFree) + `,`,
		`SwapMemoryTotal:` + fmt.Sprintf("%v", this.SwapMemoryTotal) + `,`,
		`SwapMemoryUsed:` + fmt.Sprintf("%v", this.SwapMemoryUsed) + `,`,
		`SwapMemoryFree:` + fmt.Sprintf("%v", this.SwapMemoryFree) + `,`,
		`CpuProcRate:` + fmt.Sprintf("%v", this.CpuProcRate) + `,`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`DiskTotal:` + fmt.Sprintf("%v", this.DiskTotal) + `,`,
		`DiskUsed:` + fmt.Sprintf("%v", this.DiskUsed) + `,`,
		`DiskFree:` + fmt.Sprintf("%v", this.DiskFree) + `,`,
		`NetIoInBytePerSec:` + fmt.Sprintf("%v", this.NetIoInBytePerSec) + `,`,
		`NetIoOutBytePerSec:` + fmt.Sprintf("%v", this.NetIoOutBytePerSec) + `,`,
		`NetTcpConnections:` + fmt.Sprintf("%v", this.NetTcpConnections) + `,`,
		`NetTcpActiveOpensPerSec:` + fmt.Sprintf("%v", this.NetTcpActiveOpensPerSec) + `,`,
		`Ops:` + fmt.Sprintf("%v", this.Ops) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionStats{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Ops:` + fmt.Sprintf("%v", this.Ops) + `,`,
		`BytesInPerSec:` + fmt.Sprintf("%v", this.BytesInPerSec) + `,`,
		`BytesOutPerSec:` + fmt.Sprintf("%v", this.BytesOutPerSec) + `,`,
		`TotalCommandsProcessed:` + fmt.Sprintf("%v", this.TotalCommandsProcessed) + `,`,
		`KeyspaceMisses:` + fmt.Sprintf("%v", this.KeyspaceMisses) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringZoneMaster(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreatePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreatePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreatePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreatePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (github_com_tiglabs_baudengine_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baudengine_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeletePartitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeletePartitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeletePartitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReplicaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReplicaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReplicaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ReplicaChangeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionID", wireType)
			}
			m.PartitionID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PartitionID |= (github_com_tiglabs_baudengine_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChangeReplicaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChangeReplicaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChangeReplicaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &meta.Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			m.Leader = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Leader |= (github_com_tiglabs_baudengine_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Db.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (github_com_tiglabs_baudengine_proto_metapb.DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DB", wireType)
			}
			m.DB = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DB |= (github_com_tiglabs_baudengine_proto_metapb.DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= (github_com_tiglabs_baudengine_proto_metapb.SpaceID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (github_com_tiglabs_baudengine_proto_metapb.SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baudengine_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RuntimeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baudengine_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PSConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, meta.Partition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPCPort", wireType)
			}
			m.RPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RPCPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPort", wireType)
			}
			m.AdminPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatInterval", wireType)
			}
			m.HeartbeatInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatInterval |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftHeartbeatPort", wireType)
			}
			m.RaftHeartbeatPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftHeartbeatPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftReplicatePort", wireType)
			}
			m.RaftReplicatePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftReplicatePort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftHeartbeatInterval", wireType)
			}
			m.RaftHeartbeatInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftHeartbeatInterval |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftRetainLogs", wireType)
			}
			m.RaftRetainLogs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftRetainLogs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftReplicaConcurrency", wireType)
			}
			m.RaftReplicaConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftReplicaConcurrency |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftSnapshotConcurrency", wireType)
			}
			m.RaftSnapshotConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftSnapshotConcurrency |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baudengine_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, PartitionInfo{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SysStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (github_com_tiglabs_baudengine_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (meta.PartitionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftStatus == nil {
				m.RaftStatus = &RaftStatus{}
			}
			if err := m.RaftStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			m.Applied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Applied |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Followers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Followers = append(m.Followers, RaftFollowerStatus{})
			if err := m.Followers[len(m.Followers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftFollowerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftFollowerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftFollowerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Replica", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Replica.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			m.Next = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSeconds", wireType)
			}
			m.DownSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZoneMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSysStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSysStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSysStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsedRss", wireType)
			}
			m.MemoryUsedRss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsedRss |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsed", wireType)
			}
			m.MemoryUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFree", wireType)
			}
			m.MemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryTotal", wireType)
			}
			m.SwapMemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryUsed", wireType)
			}
			m.SwapMemoryUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryFree", wireType)
			}
			m.SwapMemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuProcRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuProcRate = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsed", wireType)
			}
			m.DiskUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskFree", wireType)
			}
			m.DiskFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIoInBytePerSec", wireType)
			}
			m.NetIoInBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetIoInBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIoOutBytePerSec", wireType)
			}
			m.NetIoOutBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetIoOutBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTcpConnections", wireType)
			}
			m.NetTcpConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTcpConnections |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTcpActiveOpensPerSec", wireType)
			}
			m.NetTcpActiveOpensPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTcpActiveOpensPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesInPerSec", wireType)
			}
			m.BytesInPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesInPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOutPerSec", wireType)
			}
			m.BytesOutPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOutPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCommandsProcessed", wireType)
			}
			m.TotalCommandsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCommandsProcessed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyspaceMisses", wireType)
			}
			m.KeyspaceMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyspaceMisses |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZoneMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZoneMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZoneMaster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZoneMaster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZoneMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthZoneMaster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowZoneMaster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipZoneMaster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthZoneMaster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZoneMaster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("zone_master.proto", fileDescriptorZoneMaster) }

var fileDescriptorZoneMaster = []byte{
	// 2039 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0x4d, 0x8c, 0x23, 0x47,
	0x15, 0x76, 0xfb, 0x6f, 0xec, 0xe7, 0xb1, 0xc7, 0x53, 0xbb, 0x3b, 0xe3, 0x9d, 0x05, 0x7b, 0x69,
	0xa1, 0xcd, 0x90, 0x9f, 0xde, 0xdd, 0x09, 0xc9, 0x12, 0xa4, 0x28, 0x59, 0x8f, 0xd9, 0xac, 0xd1,
	0xfe, 0x98, 0xf6, 0x06, 0x44, 0x24, 0xd4, 0x6a, 0x77, 0xd7, 0x78, 0x5a, 0x6b, 0x77, 0x35, 0x5d,
	0xe5, 0xd9, 0xcc, 0x9e, 0xb8, 0x91, 0x23, 0x47, 0x4e, 0x9c, 0xb9, 0xc2, 0x29, 0x42, 0x42, 0xe2,
	0xb8, 0x37, 0x72, 0xe4, 0x34, 0xca, 0x18, 0x09, 0x89, 0x03, 0x12, 0x47, 0x94, 0x03, 0xa0, 0x7a,
	0x55, 0x6d, 0xb7, 0x3d, 0xb3, 0x88, 0xb1, 0x12, 0x29, 0x27, 0xbb, 0xde, 0xfb, 0xbe, 0xf7, 0x57,
	0xaf, 0xaa, 0xab, 0x0a, 0x36, 0x9f, 0xb3, 0x90, 0x3a, 0x63, 0x97, 0x0b, 0x1a, 0x5b, 0x51, 0xcc,
	0x04, 0xdb, 0x79, 0x63, 0x18, 0x88, 0xc3, 0xc9, 0xc0, 0xf2, 0xd8, 0xf8, 0xe6, 0x90, 0x0d, 0xd9,
	0x4d, 0x14, 0x0f, 0x26, 0x07, 0x38, 0xc2, 0x01, 0xfe, 0xd3, 0xf0, 0xb7, 0x52, 0x70, 0x11, 0x0c,
	0x47, 0xee, 0x80, 0xdf, 0x1c, 0xb8, 0x13, 0x9f, 0x86, 0xc3, 0x20, 0xa4, 0x8a, 0x7c, 0x73, 0x4c,
	0x85, 0x1b, 0x0d, 0xf0, 0x47, 0xd1, 0xcc, 0xe7, 0xb0, 0xb5, 0x1f, 0x53, 0x57, 0xd0, 0x9e, 0x1b,
	0x8b, 0x40, 0x04, 0x2c, 0xb4, 0xe9, 0xcf, 0x27, 0x94, 0x0b, 0x72, 0x0b, 0x8a, 0x87, 0xd4, 0xf5,
	0x69, 0xdc, 0x30, 0xae, 0x1b, 0xbb, 0x95, 0xbd, 0x9a, 0xa5, 0x35, 0xf7, 0x51, 0xda, 0x2e, 0xbd,
	0x38, 0x69, 0x65, 0x3e, 0x3b, 0x69, 0x19, 0xb6, 0xc6, 0x11, 0x0b, 0xca, 0x51, 0x62, 0xa5, 0x91,
	0x45, 0x12, 0x58, 0x33, 0xbb, 0xed, 0xbc, 0x24, 0xd8, 0x73, 0x88, 0x79, 0x04, 0xdb, 0x67, 0x7c,
	0xf3, 0x88, 0x85, 0x9c, 0x92, 0xdb, 0x4b, 0xce, 0x37, 0xac, 0x44, 0xf5, 0x52, 0xef, 0xbb, 0xb0,
	0x16, 0xd3, 0x68, 0x14, 0x78, 0xae, 0xf6, 0x5d, 0xb2, 0x6c, 0x35, 0xd6, 0x9e, 0x13, 0xb5, 0xf9,
	0xab, 0x2c, 0x6c, 0x75, 0xe8, 0x88, 0x7e, 0x29, 0x49, 0x3f, 0x85, 0xca, 0x2c, 0xa3, 0x6e, 0x07,
	0x5d, 0x57, 0xdb, 0xdd, 0xe9, 0x49, 0xab, 0xd2, 0x9b, 0x8b, 0xbf, 0x38, 0x69, 0xbd, 0xfd, 0xff,
	0xcf, 0x8f, 0x95, 0x62, 0xda, 0x69, 0xeb, 0xe4, 0x27, 0x50, 0x0c, 0x99, 0x4f, 0xbb, 0x7e, 0x23,
	0x87, 0x7e, 0xde, 0x9b, 0x9e, 0xb4, 0x8a, 0x8f, 0xa4, 0x44, 0xba, 0xb8, 0x7d, 0x01, 0x17, 0x8a,
	0x64, 0x6b, 0x73, 0xe6, 0x03, 0xd8, 0x3e, 0x53, 0x91, 0x95, 0xa7, 0xc2, 0xfc, 0x24, 0x0b, 0x97,
	0xf7, 0x0f, 0xdd, 0x70, 0x48, 0xf5, 0x0c, 0xac, 0x5e, 0xde, 0x1b, 0x90, 0x17, 0xc7, 0x11, 0xc5,
	0xba, 0xd6, 0xf6, 0x48, 0x32, 0xa5, 0xca, 0xfa, 0x93, 0xe3, 0x88, 0xda, 0xa8, 0x27, 0x23, 0x58,
	0x9f, 0x15, 0xca, 0x09, 0x92, 0xfa, 0x7c, 0x35, 0xf3, 0xe0, 0xa7, 0x7b, 0x2d, 0xff, 0xbf, 0x7b,
	0xed, 0x87, 0x70, 0x65, 0xa9, 0x12, 0xab, 0x97, 0xf5, 0x77, 0x06, 0x14, 0x6c, 0x36, 0x11, 0x94,
	0xec, 0xa5, 0x57, 0x9a, 0x71, 0x66, 0xa5, 0xcd, 0xa9, 0x73, 0x18, 0xb9, 0x06, 0x05, 0x39, 0xd9,
	0xbc, 0x91, 0xbd, 0x9e, 0xdb, 0xad, 0xec, 0x15, 0xb0, 0x05, 0x6c, 0x25, 0x93, 0x8d, 0x35, 0x52,
	0xd1, 0xa4, 0x1a, 0xeb, 0x01, 0x4a, 0x56, 0x6c, 0x2c, 0x65, 0xce, 0xfc, 0x29, 0xac, 0x7f, 0x40,
	0x45, 0xa7, 0xbd, 0x7a, 0x07, 0x6c, 0xc3, 0x5a, 0xa7, 0xed, 0x84, 0xee, 0x58, 0x35, 0x41, 0xd9,
	0x2e, 0x76, 0xda, 0x8f, 0xdc, 0x31, 0x35, 0x7f, 0x06, 0x55, 0x6d, 0x7a, 0xf5, 0x4d, 0xe3, 0x2a,
	0x64, 0xfd, 0x81, 0xde, 0x2f, 0x72, 0x56, 0xa7, 0xad, 0xa7, 0x2f, 0xeb, 0x0f, 0xcc, 0xdf, 0x1b,
	0xb0, 0xf1, 0x01, 0x15, 0xfd, 0xc8, 0xf5, 0xe8, 0xea, 0xd1, 0x3f, 0x82, 0x82, 0x3f, 0x90, 0x0d,
	0xa9, 0x36, 0x86, 0x77, 0xa6, 0x27, 0xad, 0x2c, 0xf6, 0xe1, 0xcd, 0x0b, 0xd4, 0xb4, 0xd3, 0xee,
	0x76, 0xec, 0xbc, 0x3f, 0xe8, 0xfa, 0xe4, 0x9b, 0x00, 0x18, 0x91, 0x2a, 0x48, 0x0e, 0x0b, 0x52,
	0x46, 0x09, 0xd6, 0x24, 0x80, 0xfa, 0x3c, 0xe6, 0xd5, 0xcb, 0x62, 0x42, 0x81, 0x4b, 0x1b, 0xba,
	0x32, 0x45, 0x0b, 0x2d, 0xea, 0xe2, 0x28, 0x95, 0xf9, 0x69, 0x16, 0xeb, 0x83, 0x0d, 0xb9, 0x7a,
	0x7d, 0xba, 0xb3, 0x09, 0xd0, 0xc5, 0xe9, 0xb4, 0x57, 0x29, 0x4e, 0xd6, 0x1f, 0x90, 0x0f, 0x93,
	0xa0, 0xe7, 0x2d, 0x5c, 0xc0, 0xb8, 0xbf, 0x38, 0x69, 0xed, 0x5d, 0xc0, 0x20, 0x72, 0xba, 0x1d,
	0x9d, 0x27, 0xf9, 0x11, 0xe4, 0xf9, 0x88, 0x09, 0x5c, 0xe8, 0xd5, 0xf6, 0xbb, 0xd3, 0x93, 0x56,
	0xbe, 0x3f, 0x62, 0xe2, 0x82, 0xcb, 0x42, 0x52, 0xe4, 0x24, 0x4a, 0x53, 0xe6, 0x53, 0x9c, 0x25,
	0x5d, 0xb9, 0xd5, 0x67, 0xe9, 0xdb, 0x50, 0x8c, 0xa5, 0x8d, 0x64, 0x49, 0x17, 0x2d, 0x34, 0xa9,
	0xa7, 0x49, 0xeb, 0xcc, 0xbf, 0x1b, 0xb0, 0xd9, 0xeb, 0xdb, 0x74, 0x18, 0xc8, 0xc3, 0xc5, 0xea,
	0x33, 0x95, 0x7c, 0x7b, 0x92, 0x6f, 0xdc, 0x97, 0xf4, 0xed, 0xe9, 0x90, 0x1a, 0x64, 0x83, 0x48,
	0xb7, 0x72, 0x36, 0x88, 0xc8, 0x3b, 0xb0, 0x1e, 0x4f, 0x42, 0x11, 0x8c, 0xa9, 0x13, 0x84, 0x07,
	0x4c, 0xef, 0xb0, 0xeb, 0x96, 0xad, 0x84, 0xdd, 0xf0, 0x80, 0xa5, 0xc2, 0xab, 0xc4, 0x73, 0xb1,
	0xf9, 0x1f, 0x03, 0x48, 0x3a, 0xd7, 0xd5, 0x6b, 0xfb, 0x95, 0x65, 0xfb, 0x1a, 0x14, 0x3d, 0x16,
	0x1e, 0x04, 0x43, 0xcc, 0xb8, 0xb2, 0x57, 0xb6, 0x7a, 0xfd, 0x7d, 0x14, 0xa4, 0xa3, 0x50, 0x10,
	0x72, 0x0b, 0x60, 0xb6, 0x81, 0xf3, 0x46, 0x1e, 0x67, 0xf9, 0xec, 0x91, 0x2a, 0x85, 0x31, 0xff,
	0x9d, 0x83, 0x52, 0x62, 0x90, 0xbc, 0x01, 0xa5, 0x38, 0xf2, 0x9c, 0x88, 0xc5, 0x02, 0x33, 0xaf,
	0xb6, 0xc9, 0xf4, 0xa4, 0xb5, 0x66, 0xf7, 0xf6, 0x7b, 0x2c, 0x96, 0x1d, 0x9c, 0x0b, 0x42, 0x61,
	0xaf, 0xc5, 0x91, 0x27, 0xc7, 0xe4, 0x06, 0x80, 0xeb, 0x8f, 0x83, 0x50, 0x11, 0x54, 0xde, 0x6b,
	0x09, 0xaa, 0x8c, 0x2a, 0xc4, 0xbd, 0x0d, 0xe4, 0x90, 0xba, 0xb1, 0x18, 0x50, 0x57, 0x38, 0x41,
	0x28, 0x68, 0x7c, 0xe4, 0x8e, 0xf4, 0xaa, 0x9b, 0xe1, 0x37, 0x67, 0x90, 0xae, 0x46, 0x90, 0x3b,
	0x70, 0x29, 0x76, 0x0f, 0x84, 0x33, 0x27, 0xa3, 0xa3, 0xfc, 0x12, 0x51, 0x62, 0xee, 0x27, 0x10,
	0x74, 0x98, 0x10, 0xf5, 0x47, 0x55, 0x50, 0x45, 0x2c, 0x9c, 0x43, 0xb4, 0x13, 0x08, 0x12, 0xdf,
	0x83, 0xed, 0x25, 0x8f, 0xb3, 0x70, 0x8b, 0x8b, 0xe4, 0x2b, 0x0b, 0x5e, 0x67, 0x21, 0xef, 0x42,
	0x5d, 0x7b, 0x16, 0x6e, 0x10, 0x3a, 0x23, 0x36, 0xe4, 0x8d, 0xb5, 0xeb, 0xc6, 0x6e, 0xde, 0xae,
	0x29, 0x6f, 0x52, 0xfc, 0x80, 0x0d, 0x39, 0xb9, 0x0b, 0x8d, 0x74, 0x8c, 0x8e, 0xc7, 0x42, 0x6f,
	0x12, 0xc7, 0x34, 0xf4, 0x8e, 0x1b, 0xa5, 0x45, 0x5f, 0x5b, 0xa9, 0x40, 0xf7, 0xe7, 0x30, 0xb2,
	0x0f, 0x57, 0xd1, 0x04, 0x0f, 0xdd, 0x88, 0x1f, 0x32, 0xb1, 0x60, 0xa3, 0xbc, 0x68, 0x03, 0xf3,
	0xea, 0x6b, 0x60, 0xca, 0x88, 0xf9, 0xcb, 0xac, 0x5c, 0x02, 0xb3, 0x4c, 0xbe, 0x86, 0xeb, 0xfd,
	0xbb, 0x0b, 0x4d, 0x9d, 0xc3, 0xa6, 0xae, 0xa5, 0xce, 0x5a, 0x72, 0x7d, 0x9f, 0x69, 0x6c, 0x72,
	0x0b, 0xca, 0xfc, 0x98, 0x3b, 0x5c, 0xb8, 0x82, 0xeb, 0x2d, 0xa1, 0x8a, 0x96, 0xfb, 0xc7, 0xbc,
	0x2f, 0x85, 0x9a, 0x53, 0xe2, 0x7a, 0x6c, 0xde, 0x87, 0x4b, 0x0b, 0x85, 0x58, 0xfd, 0xe0, 0xf5,
	0x87, 0x2c, 0x54, 0x17, 0xe2, 0x23, 0x3d, 0xc8, 0x06, 0xbe, 0x5e, 0x53, 0xef, 0xcf, 0xbe, 0xe9,
	0xab, 0x9e, 0x2d, 0xb3, 0x81, 0x4f, 0xae, 0x41, 0x39, 0xe0, 0x8e, 0x3e, 0x84, 0xc9, 0x8a, 0x97,
	0xec, 0x52, 0xc0, 0x1f, 0x24, 0x77, 0x9b, 0xa2, 0x4c, 0x7c, 0xc2, 0x71, 0x95, 0xd5, 0xf6, 0xea,
	0x73, 0x7a, 0x1f, 0xe5, 0xb6, 0xd6, 0x93, 0xd7, 0xa0, 0x40, 0x23, 0xe6, 0x1d, 0xea, 0x12, 0x6d,
	0xcc, 0x81, 0x3f, 0x90, 0xe2, 0xe4, 0x13, 0x8e, 0x18, 0xf2, 0x16, 0x80, 0xa4, 0x05, 0x5c, 0x04,
	0x1e, 0xc7, 0xe5, 0xb4, 0xc0, 0x48, 0x97, 0x35, 0x05, 0x24, 0xaf, 0x43, 0x45, 0xf5, 0xa9, 0x0a,
	0xa9, 0x88, 0xbc, 0x8a, 0x65, 0xcb, 0x8e, 0x54, 0xd1, 0x40, 0x3c, 0xfb, 0x6f, 0x7e, 0x62, 0x40,
	0x25, 0xb5, 0x75, 0x93, 0x16, 0x54, 0xdc, 0x28, 0x72, 0x8e, 0x68, 0xcc, 0x93, 0xd3, 0x6b, 0xd9,
	0x06, 0x37, 0x8a, 0x7e, 0xac, 0x24, 0xf2, 0x88, 0xc3, 0x85, 0x1b, 0x0b, 0x47, 0x52, 0xf4, 0x99,
	0xaf, 0x8c, 0x92, 0x27, 0xc1, 0x98, 0x4a, 0xf5, 0x90, 0xcd, 0xe8, 0xfa, 0x04, 0x34, 0x64, 0x09,
	0x7b, 0x07, 0x4a, 0xd1, 0xc8, 0x15, 0x07, 0x2c, 0x1e, 0x63, 0x0d, 0xca, 0xf6, 0x6c, 0x6c, 0xfe,
	0xd9, 0x00, 0x98, 0x47, 0x49, 0x5e, 0x9f, 0x9f, 0xe2, 0x8d, 0xa5, 0x53, 0xfc, 0xbc, 0x07, 0x12,
	0x08, 0x21, 0x90, 0x17, 0x34, 0x1e, 0x63, 0x40, 0x79, 0x1b, 0xff, 0x93, 0xcb, 0x50, 0x08, 0x42,
	0x9f, 0x7e, 0x8c, 0x61, 0xe4, 0x6d, 0x35, 0x20, 0x5b, 0x72, 0x8b, 0x1f, 0x8f, 0x03, 0xb5, 0xb5,
	0xe5, 0x6d, 0x3d, 0x22, 0x0d, 0x58, 0x73, 0xa3, 0x68, 0x14, 0x50, 0x1f, 0x6b, 0x9d, 0xb7, 0x93,
	0x21, 0xb9, 0x03, 0xe5, 0x03, 0x36, 0x1a, 0xb1, 0x67, 0x34, 0x96, 0xf5, 0x94, 0x2b, 0xe2, 0x12,
	0xd6, 0xf3, 0x9e, 0x96, 0xaa, 0x88, 0x93, 0x2b, 0xf4, 0x0c, 0x6b, 0xfe, 0xd1, 0x00, 0x72, 0x16,
	0x77, 0xc1, 0xcc, 0x2e, 0x43, 0x61, 0xec, 0x0a, 0xef, 0x50, 0xa7, 0xa6, 0x06, 0xa9, 0x2c, 0x72,
	0x0b, 0x59, 0x10, 0xc8, 0x87, 0xf4, 0xe3, 0x24, 0x37, 0xfc, 0x4f, 0xbe, 0x05, 0xeb, 0x3e, 0x7b,
	0x16, 0x3a, 0x9c, 0x7a, 0x2c, 0xf4, 0xb9, 0x4e, 0xaf, 0x22, 0x65, 0x7d, 0x25, 0x92, 0x4e, 0x64,
	0xbf, 0x50, 0x6c, 0x97, 0xb2, 0xad, 0x06, 0xe6, 0x6f, 0x0a, 0xb0, 0x9e, 0x5e, 0xc4, 0xd2, 0xd2,
	0x98, 0x8e, 0x59, 0x7c, 0xec, 0x08, 0x26, 0xdc, 0x11, 0x86, 0x9f, 0xb7, 0x2b, 0x4a, 0xf6, 0x44,
	0x8a, 0xc8, 0x0d, 0xd8, 0xd0, 0x90, 0x09, 0xa7, 0xbe, 0x13, 0x73, 0xae, 0x03, 0xaf, 0x2a, 0xf1,
	0x87, 0x9c, 0xfa, 0x36, 0xe7, 0xb2, 0xd1, 0x52, 0x38, 0x9d, 0x05, 0xcc, 0x31, 0x29, 0xc0, 0x41,
	0x4c, 0xa9, 0x4e, 0x48, 0x03, 0xee, 0xc5, 0x94, 0x92, 0x57, 0x61, 0x93, 0x3f, 0x73, 0x23, 0x67,
	0x21, 0xa2, 0x22, 0xc2, 0x36, 0xa4, 0xe2, 0x61, 0x2a, 0xaa, 0x5d, 0xa8, 0xa7, 0xb1, 0xe8, 0x52,
	0x7f, 0x29, 0xe6, 0x50, 0x74, 0xbb, 0x84, 0x44, 0xdf, 0xa5, 0x65, 0x24, 0xfa, 0x37, 0xa1, 0xea,
	0x45, 0x13, 0x27, 0x8a, 0x99, 0xe7, 0xc4, 0xb2, 0x76, 0x70, 0xdd, 0xd8, 0x35, 0xec, 0x8a, 0x17,
	0x4d, 0x7a, 0x31, 0xf3, 0x6c, 0x57, 0x50, 0xb9, 0x6f, 0x48, 0x8c, 0xc7, 0x26, 0xa1, 0x68, 0x54,
	0xe4, 0x86, 0x64, 0x97, 0xbc, 0x68, 0xb2, 0x2f, 0xc7, 0x72, 0xad, 0xf8, 0x01, 0x7f, 0xaa, 0x23,
	0xdf, 0x40, 0x27, 0x65, 0x29, 0x51, 0x31, 0x5f, 0x03, 0x1c, 0xa8, 0x60, 0xeb, 0xa8, 0x2d, 0x49,
	0x01, 0x86, 0x99, 0x28, 0x31, 0xbe, 0xcd, 0xb9, 0x12, 0x23, 0xbb, 0x0d, 0x5b, 0x21, 0x15, 0x4e,
	0xc0, 0x9c, 0x20, 0x74, 0x06, 0xc7, 0xf2, 0x8b, 0x4c, 0x63, 0x39, 0xfd, 0x8d, 0x2b, 0x88, 0xdc,
	0x0c, 0xa9, 0xe8, 0xb2, 0x6e, 0xd8, 0x3e, 0x16, 0xb4, 0x47, 0xe3, 0x3e, 0xf5, 0xc8, 0x9b, 0xb0,
	0xad, 0x29, 0x6c, 0x22, 0x16, 0x39, 0x5b, 0xc8, 0x21, 0xc8, 0x79, 0x3c, 0x11, 0x29, 0x92, 0x05,
	0x97, 0x24, 0x49, 0x78, 0x91, 0xfc, 0x18, 0x86, 0xd4, 0x53, 0x1f, 0x8d, 0x6d, 0xcc, 0x53, 0x3a,
	0x79, 0xe2, 0x45, 0xfb, 0x73, 0x05, 0x79, 0x17, 0xbe, 0x91, 0xe0, 0x5d, 0x4f, 0x04, 0x47, 0xd4,
	0x61, 0x11, 0x0d, 0xf9, 0xcc, 0x53, 0x03, 0x3d, 0x6d, 0x2b, 0xe2, 0x5d, 0x44, 0x3c, 0x96, 0x00,
	0xed, 0xae, 0x0e, 0x39, 0x16, 0xf1, 0xc6, 0x55, 0x44, 0xc9, 0xbf, 0xe6, 0x3f, 0x0c, 0xa8, 0x2d,
	0x6e, 0x88, 0x72, 0x01, 0xf0, 0xe0, 0x39, 0xd5, 0xad, 0x89, 0xff, 0x13, 0x62, 0x76, 0x46, 0x24,
	0xaf, 0x40, 0x5d, 0xe6, 0xc8, 0x65, 0x81, 0x12, 0xef, 0xaa, 0x05, 0xab, 0x28, 0xef, 0x86, 0xda,
	0xe7, 0x77, 0x60, 0x53, 0x01, 0x65, 0x59, 0x12, 0xa4, 0xea, 0xc5, 0x1a, 0x2a, 0x1e, 0x4f, 0x84,
	0x86, 0x7e, 0x0f, 0x1a, 0x38, 0x93, 0x8e, 0x5c, 0x8a, 0x6e, 0xe8, 0x73, 0x6c, 0x0d, 0xca, 0xf9,
	0x6c, 0x47, 0xd9, 0x42, 0xfd, 0xbe, 0x56, 0xf7, 0x12, 0x2d, 0x79, 0x05, 0x36, 0x9e, 0xd2, 0x63,
	0xbc, 0xd0, 0x38, 0xe3, 0x80, 0x73, 0xca, 0x75, 0x1f, 0xd7, 0x12, 0xf1, 0x43, 0x94, 0xbe, 0xba,
	0x0b, 0x9b, 0x67, 0x9e, 0x58, 0xc8, 0x1a, 0xe4, 0xee, 0xfa, 0x7e, 0x3d, 0x43, 0x00, 0x8a, 0x36,
	0x1d, 0xb3, 0x23, 0x5a, 0x37, 0xf6, 0xfe, 0x96, 0x83, 0xea, 0x47, 0x2c, 0xa4, 0x0f, 0xf1, 0xd1,
	0xd2, 0x8e, 0x3c, 0x72, 0x0f, 0x36, 0x96, 0xde, 0xf3, 0xc8, 0xb6, 0x75, 0xfe, 0xeb, 0xe2, 0x4e,
	0xc3, 0x7a, 0xc9, 0xd3, 0x9f, 0x99, 0x91, 0x76, 0x96, 0x1e, 0xa3, 0xc8, 0xb6, 0x75, 0xfe, 0x83,
	0xdd, 0x4e, 0xc3, 0x7a, 0xc9, 0xbb, 0x95, 0x99, 0x21, 0xef, 0x43, 0x75, 0xe1, 0xed, 0x85, 0x5c,
	0xb1, 0xce, 0x7b, 0x95, 0xda, 0xd9, 0xb2, 0xce, 0x7d, 0xa2, 0x31, 0x33, 0xe4, 0x36, 0x94, 0x92,
	0x8b, 0x1a, 0xa9, 0x5b, 0x4b, 0xb7, 0xdd, 0x9d, 0x4d, 0x6b, 0xf9, 0x16, 0x67, 0x66, 0xc8, 0x1d,
	0x80, 0xf9, 0x0d, 0x84, 0x10, 0xeb, 0xcc, 0xd5, 0x6b, 0xe7, 0x92, 0x75, 0xf6, 0x8a, 0x62, 0x66,
	0xc8, 0xf7, 0xa1, 0x92, 0x3a, 0xae, 0x10, 0x89, 0x5a, 0x3e, 0xc5, 0xed, 0x5c, 0xb6, 0xce, 0x39,
	0xd1, 0x98, 0x19, 0xb2, 0x0b, 0x05, 0x7c, 0x0a, 0x21, 0x55, 0x2b, 0xfd, 0xda, 0xb2, 0x53, 0xb3,
	0x16, 0x5e, 0x48, 0x66, 0x19, 0xe1, 0x15, 0x57, 0x65, 0x94, 0x7e, 0xdf, 0x50, 0x19, 0x2d, 0xbc,
	0x1e, 0x98, 0x99, 0x76, 0xe7, 0xc5, 0x69, 0x33, 0xf3, 0x97, 0xd3, 0x66, 0xe6, 0xf3, 0xd3, 0x66,
	0xe6, 0x9f, 0xa7, 0xcd, 0xcc, 0xbf, 0x4e, 0x9b, 0xc6, 0x2f, 0xa6, 0x4d, 0xe3, 0xb7, 0xd3, 0xa6,
	0xf1, 0xe9, 0xb4, 0x99, 0xf9, 0xd3, 0xb4, 0x99, 0x79, 0x31, 0x6d, 0x1a, 0x9f, 0x4d, 0x9b, 0xc6,
	0xe7, 0xd3, 0xa6, 0xf1, 0xeb, 0xbf, 0x36, 0x33, 0xf7, 0x8d, 0x8f, 0xd6, 0x9f, 0xb3, 0x90, 0xaa,
	0x27, 0xed, 0x68, 0x30, 0x28, 0xe2, 0xe9, 0xe7, 0xcd, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x58,
	0xf4, 0x06, 0x6a, 0xea, 0x16, 0x00, 0x00,
}

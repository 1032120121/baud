// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raftcmd.proto

/*
	Package masterpb is a generated protocol buffer package.

	It is generated from these files:
		raftcmd.proto

	It has these top-level messages:
		RaftKvPair
		KvPair
		RaftGetRequest
		RaftGetResponse
		RaftPutRequest
		RaftPutResponse
		RaftDeleteRequest
		RaftDeleteResponse
		KvPairExecute
		ExecuteRequest
		ExecuteResponse
		Request
		Response
*/
package masterpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ExecuteType int32

const (
	ExecuteType_ExecInvalid ExecuteType = 0
	ExecuteType_ExecPut     ExecuteType = 1
	ExecuteType_ExecDelete  ExecuteType = 2
)

var ExecuteType_name = map[int32]string{
	0: "ExecInvalid",
	1: "ExecPut",
	2: "ExecDelete",
}
var ExecuteType_value = map[string]int32{
	"ExecInvalid": 0,
	"ExecPut":     1,
	"ExecDelete":  2,
}

func (x ExecuteType) String() string {
	return proto.EnumName(ExecuteType_name, int32(x))
}
func (ExecuteType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{0} }

type CmdType int32

const (
	CmdType_Invalid CmdType = 0
	CmdType_Get     CmdType = 1
	CmdType_Put     CmdType = 2
	CmdType_Delete  CmdType = 3
	CmdType_Execute CmdType = 4
)

var CmdType_name = map[int32]string{
	0: "Invalid",
	1: "Get",
	2: "Put",
	3: "Delete",
	4: "Execute",
}
var CmdType_value = map[string]int32{
	"Invalid": 0,
	"Get":     1,
	"Put":     2,
	"Delete":  3,
	"Execute": 4,
}

func (x CmdType) String() string {
	return proto.EnumName(CmdType_name, int32(x))
}
func (CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{1} }

type ResponseCode int32

const (
	Success    ResponseCode = 0
	UnknownErr ResponseCode = 1
	NoLeader   ResponseCode = 2
	RaftBusy   ResponseCode = 3
)

var ResponseCode_name = map[int32]string{
	0: "Success",
	1: "UnknownErr",
	2: "NoLeader",
	3: "RaftBusy",
}
var ResponseCode_value = map[string]int32{
	"Success":    0,
	"UnknownErr": 1,
	"NoLeader":   2,
	"RaftBusy":   3,
}

func (x ResponseCode) String() string {
	return proto.EnumName(ResponseCode_name, int32(x))
}
func (ResponseCode) EnumDescriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{2} }

type RaftKvPair struct {
	Key        []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value      []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp  uint64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ApplyIndex uint64 `protobuf:"varint,4,opt,name=apply_index,json=applyIndex,proto3" json:"apply_index,omitempty"`
}

func (m *RaftKvPair) Reset()                    { *m = RaftKvPair{} }
func (*RaftKvPair) ProtoMessage()               {}
func (*RaftKvPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{0} }

type KvPair struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KvPair) Reset()                    { *m = KvPair{} }
func (*KvPair) ProtoMessage()               {}
func (*KvPair) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{1} }

type RaftGetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *RaftGetRequest) Reset()                    { *m = RaftGetRequest{} }
func (*RaftGetRequest) ProtoMessage()               {}
func (*RaftGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{2} }

type RaftGetResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RaftGetResponse) Reset()                    { *m = RaftGetResponse{} }
func (*RaftGetResponse) ProtoMessage()               {}
func (*RaftGetResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{3} }

type RaftPutRequest struct {
	Key   []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *RaftPutRequest) Reset()                    { *m = RaftPutRequest{} }
func (*RaftPutRequest) ProtoMessage()               {}
func (*RaftPutRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{4} }

type RaftPutResponse struct {
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RaftPutResponse) Reset()                    { *m = RaftPutResponse{} }
func (*RaftPutResponse) ProtoMessage()               {}
func (*RaftPutResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{5} }

type RaftDeleteRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *RaftDeleteRequest) Reset()                    { *m = RaftDeleteRequest{} }
func (*RaftDeleteRequest) ProtoMessage()               {}
func (*RaftDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{6} }

type RaftDeleteResponse struct {
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *RaftDeleteResponse) Reset()                    { *m = RaftDeleteResponse{} }
func (*RaftDeleteResponse) ProtoMessage()               {}
func (*RaftDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{7} }

type KvPairExecute struct {
	Do     ExecuteType `protobuf:"varint,1,opt,name=do,proto3,enum=ExecuteType" json:"do,omitempty"`
	KvPair *KvPair     `protobuf:"bytes,2,opt,name=kv_pair,json=kvPair" json:"kv_pair,omitempty"`
}

func (m *KvPairExecute) Reset()                    { *m = KvPairExecute{} }
func (*KvPairExecute) ProtoMessage()               {}
func (*KvPairExecute) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{8} }

type ExecuteRequest struct {
	// 历史原因，只能是2
	Execs []*KvPairExecute `protobuf:"bytes,1,rep,name=execs" json:"execs,omitempty"`
}

func (m *ExecuteRequest) Reset()                    { *m = ExecuteRequest{} }
func (*ExecuteRequest) ProtoMessage()               {}
func (*ExecuteRequest) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{9} }

type ExecuteResponse struct {
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ExecuteResponse) Reset()                    { *m = ExecuteResponse{} }
func (*ExecuteResponse) ProtoMessage()               {}
func (*ExecuteResponse) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{10} }

type Request struct {
	CmdType    CmdType            `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=CmdType" json:"cmd_type,omitempty"`
	GetReq     *RaftGetRequest    `protobuf:"bytes,2,opt,name=get_req,json=getReq" json:"get_req,omitempty"`
	PutReq     *RaftPutRequest    `protobuf:"bytes,3,opt,name=put_req,json=putReq" json:"put_req,omitempty"`
	DeleteReq  *RaftDeleteRequest `protobuf:"bytes,4,opt,name=delete_req,json=deleteReq" json:"delete_req,omitempty"`
	ExecuteReq *ExecuteRequest    `protobuf:"bytes,5,opt,name=execute_req,json=executeReq" json:"execute_req,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{11} }

type Response struct {
	CmdType     CmdType             `protobuf:"varint,1,opt,name=cmd_type,json=cmdType,proto3,enum=CmdType" json:"cmd_type,omitempty"`
	GetResp     *RaftGetResponse    `protobuf:"bytes,2,opt,name=get_resp,json=getResp" json:"get_resp,omitempty"`
	PutResp     *RaftPutResponse    `protobuf:"bytes,3,opt,name=put_resp,json=putResp" json:"put_resp,omitempty"`
	DeleteResp  *RaftDeleteResponse `protobuf:"bytes,4,opt,name=delete_resp,json=deleteResp" json:"delete_resp,omitempty"`
	ExecuteResp *ExecuteResponse    `protobuf:"bytes,5,opt,name=execute_resp,json=executeResp" json:"execute_resp,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptorRaftcmd, []int{12} }

func init() {
	proto.RegisterType((*RaftKvPair)(nil), "RaftKvPair")
	proto.RegisterType((*KvPair)(nil), "KvPair")
	proto.RegisterType((*RaftGetRequest)(nil), "RaftGetRequest")
	proto.RegisterType((*RaftGetResponse)(nil), "RaftGetResponse")
	proto.RegisterType((*RaftPutRequest)(nil), "RaftPutRequest")
	proto.RegisterType((*RaftPutResponse)(nil), "RaftPutResponse")
	proto.RegisterType((*RaftDeleteRequest)(nil), "RaftDeleteRequest")
	proto.RegisterType((*RaftDeleteResponse)(nil), "RaftDeleteResponse")
	proto.RegisterType((*KvPairExecute)(nil), "KvPairExecute")
	proto.RegisterType((*ExecuteRequest)(nil), "ExecuteRequest")
	proto.RegisterType((*ExecuteResponse)(nil), "ExecuteResponse")
	proto.RegisterType((*Request)(nil), "Request")
	proto.RegisterType((*Response)(nil), "Response")
	proto.RegisterEnum("ExecuteType", ExecuteType_name, ExecuteType_value)
	proto.RegisterEnum("CmdType", CmdType_name, CmdType_value)
	proto.RegisterEnum("ResponseCode", ResponseCode_name, ResponseCode_value)
}
func (this *RaftKvPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftKvPair)
	if !ok {
		that2, ok := that.(RaftKvPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.ApplyIndex != that1.ApplyIndex {
		return false
	}
	return true
}
func (this *KvPair) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvPair)
	if !ok {
		that2, ok := that.(KvPair)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *RaftGetRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftGetRequest)
	if !ok {
		that2, ok := that.(RaftGetRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *RaftGetResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftGetResponse)
	if !ok {
		that2, ok := that.(RaftGetResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *RaftPutRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftPutRequest)
	if !ok {
		that2, ok := that.(RaftPutRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	if !bytes.Equal(this.Value, that1.Value) {
		return false
	}
	return true
}
func (this *RaftPutResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftPutResponse)
	if !ok {
		that2, ok := that.(RaftPutResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *RaftDeleteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftDeleteRequest)
	if !ok {
		that2, ok := that.(RaftDeleteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Key, that1.Key) {
		return false
	}
	return true
}
func (this *RaftDeleteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftDeleteResponse)
	if !ok {
		that2, ok := that.(RaftDeleteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *KvPairExecute) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*KvPairExecute)
	if !ok {
		that2, ok := that.(KvPairExecute)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Do != that1.Do {
		return false
	}
	if !this.KvPair.Equal(that1.KvPair) {
		return false
	}
	return true
}
func (this *ExecuteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteRequest)
	if !ok {
		that2, ok := that.(ExecuteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Execs) != len(that1.Execs) {
		return false
	}
	for i := range this.Execs {
		if !this.Execs[i].Equal(that1.Execs[i]) {
			return false
		}
	}
	return true
}
func (this *ExecuteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ExecuteResponse)
	if !ok {
		that2, ok := that.(ExecuteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	return true
}
func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmdType != that1.CmdType {
		return false
	}
	if !this.GetReq.Equal(that1.GetReq) {
		return false
	}
	if !this.PutReq.Equal(that1.PutReq) {
		return false
	}
	if !this.DeleteReq.Equal(that1.DeleteReq) {
		return false
	}
	if !this.ExecuteReq.Equal(that1.ExecuteReq) {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CmdType != that1.CmdType {
		return false
	}
	if !this.GetResp.Equal(that1.GetResp) {
		return false
	}
	if !this.PutResp.Equal(that1.PutResp) {
		return false
	}
	if !this.DeleteResp.Equal(that1.DeleteResp) {
		return false
	}
	if !this.ExecuteResp.Equal(that1.ExecuteResp) {
		return false
	}
	return true
}
func (m *RaftKvPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftKvPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Timestamp))
	}
	if m.ApplyIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.ApplyIndex))
	}
	return i, nil
}

func (m *KvPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvPair) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RaftGetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftGetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *RaftGetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftGetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Code))
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RaftPutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftPutRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *RaftPutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftPutResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *RaftDeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftDeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	return i, nil
}

func (m *RaftDeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftDeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *KvPairExecute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KvPairExecute) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Do != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Do))
	}
	if m.KvPair != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.KvPair.Size()))
		n1, err := m.KvPair.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ExecuteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Execs) > 0 {
		for _, msg := range m.Execs {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRaftcmd(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ExecuteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.CmdType))
	}
	if m.GetReq != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.GetReq.Size()))
		n2, err := m.GetReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.PutReq != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.PutReq.Size()))
		n3, err := m.PutReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.DeleteReq != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.DeleteReq.Size()))
		n4, err := m.DeleteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ExecuteReq != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.ExecuteReq.Size()))
		n5, err := m.ExecuteReq.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CmdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.CmdType))
	}
	if m.GetResp != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.GetResp.Size()))
		n6, err := m.GetResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.PutResp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.PutResp.Size()))
		n7, err := m.PutResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.DeleteResp != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.DeleteResp.Size()))
		n8, err := m.DeleteResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.ExecuteResp != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftcmd(dAtA, i, uint64(m.ExecuteResp.Size()))
		n9, err := m.ExecuteResp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func encodeVarintRaftcmd(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRaftKvPair(r randyRaftcmd, easy bool) *RaftKvPair {
	this := &RaftKvPair{}
	v1 := r.Intn(100)
	this.Key = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v2 := r.Intn(100)
	this.Value = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	this.Timestamp = uint64(uint64(r.Uint32()))
	this.ApplyIndex = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKvPair(r randyRaftcmd, easy bool) *KvPair {
	this := &KvPair{}
	v3 := r.Intn(100)
	this.Key = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v4 := r.Intn(100)
	this.Value = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftGetRequest(r randyRaftcmd, easy bool) *RaftGetRequest {
	this := &RaftGetRequest{}
	v5 := r.Intn(100)
	this.Key = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftGetResponse(r randyRaftcmd, easy bool) *RaftGetResponse {
	this := &RaftGetResponse{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	v6 := r.Intn(100)
	this.Value = make([]byte, v6)
	for i := 0; i < v6; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftPutRequest(r randyRaftcmd, easy bool) *RaftPutRequest {
	this := &RaftPutRequest{}
	v7 := r.Intn(100)
	this.Key = make([]byte, v7)
	for i := 0; i < v7; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	v8 := r.Intn(100)
	this.Value = make([]byte, v8)
	for i := 0; i < v8; i++ {
		this.Value[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftPutResponse(r randyRaftcmd, easy bool) *RaftPutResponse {
	this := &RaftPutResponse{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftDeleteRequest(r randyRaftcmd, easy bool) *RaftDeleteRequest {
	this := &RaftDeleteRequest{}
	v9 := r.Intn(100)
	this.Key = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.Key[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftDeleteResponse(r randyRaftcmd, easy bool) *RaftDeleteResponse {
	this := &RaftDeleteResponse{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedKvPairExecute(r randyRaftcmd, easy bool) *KvPairExecute {
	this := &KvPairExecute{}
	this.Do = ExecuteType([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(10) != 0 {
		this.KvPair = NewPopulatedKvPair(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExecuteRequest(r randyRaftcmd, easy bool) *ExecuteRequest {
	this := &ExecuteRequest{}
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Execs = make([]*KvPairExecute, v10)
		for i := 0; i < v10; i++ {
			this.Execs[i] = NewPopulatedKvPairExecute(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedExecuteResponse(r randyRaftcmd, easy bool) *ExecuteResponse {
	this := &ExecuteResponse{}
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRequest(r randyRaftcmd, easy bool) *Request {
	this := &Request{}
	this.CmdType = CmdType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.GetReq = NewPopulatedRaftGetRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PutReq = NewPopulatedRaftPutRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DeleteReq = NewPopulatedRaftDeleteRequest(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ExecuteReq = NewPopulatedExecuteRequest(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedResponse(r randyRaftcmd, easy bool) *Response {
	this := &Response{}
	this.CmdType = CmdType([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	if r.Intn(10) != 0 {
		this.GetResp = NewPopulatedRaftGetResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.PutResp = NewPopulatedRaftPutResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.DeleteResp = NewPopulatedRaftDeleteResponse(r, easy)
	}
	if r.Intn(10) != 0 {
		this.ExecuteResp = NewPopulatedExecuteResponse(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyRaftcmd interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneRaftcmd(r randyRaftcmd) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringRaftcmd(r randyRaftcmd) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneRaftcmd(r)
	}
	return string(tmps)
}
func randUnrecognizedRaftcmd(r randyRaftcmd, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldRaftcmd(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldRaftcmd(dAtA []byte, r randyRaftcmd, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateRaftcmd(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateRaftcmd(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RaftKvPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRaftcmd(uint64(m.Timestamp))
	}
	if m.ApplyIndex != 0 {
		n += 1 + sovRaftcmd(uint64(m.ApplyIndex))
	}
	return n
}

func (m *KvPair) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *RaftGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *RaftGetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRaftcmd(uint64(m.Code))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *RaftPutRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *RaftPutResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRaftcmd(uint64(m.Code))
	}
	return n
}

func (m *RaftDeleteRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *RaftDeleteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRaftcmd(uint64(m.Code))
	}
	return n
}

func (m *KvPairExecute) Size() (n int) {
	var l int
	_ = l
	if m.Do != 0 {
		n += 1 + sovRaftcmd(uint64(m.Do))
	}
	if m.KvPair != nil {
		l = m.KvPair.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *ExecuteRequest) Size() (n int) {
	var l int
	_ = l
	if len(m.Execs) > 0 {
		for _, e := range m.Execs {
			l = e.Size()
			n += 1 + l + sovRaftcmd(uint64(l))
		}
	}
	return n
}

func (m *ExecuteResponse) Size() (n int) {
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovRaftcmd(uint64(m.Code))
	}
	return n
}

func (m *Request) Size() (n int) {
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovRaftcmd(uint64(m.CmdType))
	}
	if m.GetReq != nil {
		l = m.GetReq.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.PutReq != nil {
		l = m.PutReq.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.DeleteReq != nil {
		l = m.DeleteReq.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.ExecuteReq != nil {
		l = m.ExecuteReq.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func (m *Response) Size() (n int) {
	var l int
	_ = l
	if m.CmdType != 0 {
		n += 1 + sovRaftcmd(uint64(m.CmdType))
	}
	if m.GetResp != nil {
		l = m.GetResp.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.PutResp != nil {
		l = m.PutResp.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.DeleteResp != nil {
		l = m.DeleteResp.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	if m.ExecuteResp != nil {
		l = m.ExecuteResp.Size()
		n += 1 + l + sovRaftcmd(uint64(l))
	}
	return n
}

func sovRaftcmd(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftcmd(x uint64) (n int) {
	return sovRaftcmd(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RaftKvPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftKvPair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`ApplyIndex:` + fmt.Sprintf("%v", this.ApplyIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvPair) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvPair{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftGetRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftGetRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftGetResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftGetResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftPutRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftPutRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftPutResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftPutResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftDeleteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftDeleteRequest{`,
		`Key:` + fmt.Sprintf("%v", this.Key) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftDeleteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftDeleteResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *KvPairExecute) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&KvPairExecute{`,
		`Do:` + fmt.Sprintf("%v", this.Do) + `,`,
		`KvPair:` + strings.Replace(fmt.Sprintf("%v", this.KvPair), "KvPair", "KvPair", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteRequest{`,
		`Execs:` + strings.Replace(fmt.Sprintf("%v", this.Execs), "KvPairExecute", "KvPairExecute", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ExecuteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ExecuteResponse{`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`CmdType:` + fmt.Sprintf("%v", this.CmdType) + `,`,
		`GetReq:` + strings.Replace(fmt.Sprintf("%v", this.GetReq), "RaftGetRequest", "RaftGetRequest", 1) + `,`,
		`PutReq:` + strings.Replace(fmt.Sprintf("%v", this.PutReq), "RaftPutRequest", "RaftPutRequest", 1) + `,`,
		`DeleteReq:` + strings.Replace(fmt.Sprintf("%v", this.DeleteReq), "RaftDeleteRequest", "RaftDeleteRequest", 1) + `,`,
		`ExecuteReq:` + strings.Replace(fmt.Sprintf("%v", this.ExecuteReq), "ExecuteRequest", "ExecuteRequest", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`CmdType:` + fmt.Sprintf("%v", this.CmdType) + `,`,
		`GetResp:` + strings.Replace(fmt.Sprintf("%v", this.GetResp), "RaftGetResponse", "RaftGetResponse", 1) + `,`,
		`PutResp:` + strings.Replace(fmt.Sprintf("%v", this.PutResp), "RaftPutResponse", "RaftPutResponse", 1) + `,`,
		`DeleteResp:` + strings.Replace(fmt.Sprintf("%v", this.DeleteResp), "RaftDeleteResponse", "RaftDeleteResponse", 1) + `,`,
		`ExecuteResp:` + strings.Replace(fmt.Sprintf("%v", this.ExecuteResp), "ExecuteResponse", "ExecuteResponse", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringRaftcmd(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RaftKvPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftKvPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftKvPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyIndex", wireType)
			}
			m.ApplyIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KvPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KvPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftGetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftGetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftGetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftGetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftPutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftPutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftPutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftPutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftPutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftPutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftDeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftDeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftDeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftDeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftDeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftDeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KvPairExecute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KvPairExecute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KvPairExecute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Do", wireType)
			}
			m.Do = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Do |= (ExecuteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KvPair == nil {
				m.KvPair = &KvPair{}
			}
			if err := m.KvPair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Execs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Execs = append(m.Execs, &KvPairExecute{})
			if err := m.Execs[len(m.Execs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetReq == nil {
				m.GetReq = &RaftGetRequest{}
			}
			if err := m.GetReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutReq == nil {
				m.PutReq = &RaftPutRequest{}
			}
			if err := m.PutReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteReq == nil {
				m.DeleteReq = &RaftDeleteRequest{}
			}
			if err := m.DeleteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteReq", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecuteReq == nil {
				m.ExecuteReq = &ExecuteRequest{}
			}
			if err := m.ExecuteReq.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CmdType", wireType)
			}
			m.CmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CmdType |= (CmdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetResp == nil {
				m.GetResp = &RaftGetResponse{}
			}
			if err := m.GetResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PutResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PutResp == nil {
				m.PutResp = &RaftPutResponse{}
			}
			if err := m.PutResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteResp == nil {
				m.DeleteResp = &RaftDeleteResponse{}
			}
			if err := m.DeleteResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecuteResp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftcmd
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExecuteResp == nil {
				m.ExecuteResp = &ExecuteResponse{}
			}
			if err := m.ExecuteResp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftcmd(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftcmd
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftcmd(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftcmd
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftcmd
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftcmd
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftcmd
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftcmd(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftcmd = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftcmd   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raftcmd.proto", fileDescriptorRaftcmd) }

var fileDescriptorRaftcmd = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x3d, 0x6f, 0x13, 0x4b,
	0x14, 0xdd, 0xf1, 0xda, 0x5e, 0xe7, 0xae, 0xe3, 0xec, 0x9b, 0xf7, 0x0a, 0x2b, 0x7a, 0xda, 0x67,
	0xed, 0x23, 0x92, 0x15, 0xc4, 0x26, 0x24, 0x08, 0x21, 0xa5, 0x81, 0x84, 0x28, 0x44, 0x7c, 0x45,
	0x03, 0x34, 0x34, 0xd6, 0x7a, 0x77, 0x62, 0x2c, 0x7f, 0xec, 0x64, 0x67, 0xd6, 0xc4, 0x1d, 0x25,
	0x3f, 0x81, 0x9e, 0x86, 0x9f, 0x40, 0x49, 0x99, 0x92, 0x92, 0x32, 0x36, 0x05, 0x2d, 0x05, 0x05,
	0x25, 0x9a, 0x99, 0xb5, 0x9d, 0x0f, 0x39, 0x82, 0xca, 0xf7, 0xdc, 0x39, 0x67, 0xee, 0x3d, 0x77,
	0xae, 0x17, 0x16, 0x93, 0xe0, 0x50, 0x84, 0xbd, 0xc8, 0x67, 0x49, 0x2c, 0xe2, 0xe5, 0x1b, 0xad,
	0xb6, 0x78, 0x95, 0x36, 0xfd, 0x30, 0xee, 0xad, 0xb5, 0xe2, 0x56, 0xbc, 0xa6, 0xd2, 0xcd, 0xf4,
	0x50, 0x21, 0x05, 0x54, 0xa4, 0xe9, 0x1e, 0x07, 0x20, 0xc1, 0xa1, 0x78, 0x38, 0x38, 0x08, 0xda,
	0x09, 0x76, 0xc0, 0xec, 0xd0, 0x61, 0x15, 0xd5, 0x50, 0xbd, 0x4c, 0x64, 0x88, 0xff, 0x81, 0xc2,
	0x20, 0xe8, 0xa6, 0xb4, 0x9a, 0x53, 0x39, 0x0d, 0xf0, 0xbf, 0xb0, 0x20, 0xda, 0x3d, 0xca, 0x45,
	0xd0, 0x63, 0x55, 0xb3, 0x86, 0xea, 0x79, 0x32, 0x4b, 0xe0, 0xff, 0xc0, 0x0e, 0x18, 0xeb, 0x0e,
	0x1b, 0xed, 0x7e, 0x44, 0x8f, 0xab, 0x79, 0x75, 0x0e, 0x2a, 0xb5, 0x2f, 0x33, 0xde, 0x3a, 0x14,
	0xff, 0xac, 0xa0, 0xe7, 0x41, 0x45, 0xb6, 0xb9, 0x47, 0x05, 0xa1, 0x47, 0x29, 0xe5, 0xe2, 0xb2,
	0xd2, 0xdb, 0x82, 0xa5, 0x29, 0x87, 0xb3, 0xb8, 0xcf, 0x29, 0xc6, 0x90, 0x0f, 0xe3, 0x88, 0x2a,
	0x56, 0x81, 0xa8, 0x78, 0x4e, 0x81, 0x3b, 0xba, 0xc0, 0x41, 0x3a, 0xbf, 0xc0, 0x1c, 0xe5, 0x8a,
	0x2e, 0xab, 0x94, 0xf3, 0xcb, 0x7a, 0x2b, 0xf0, 0x97, 0xa4, 0xdd, 0xa7, 0x5d, 0x2a, 0xe8, 0x7c,
	0x13, 0x75, 0xc0, 0x67, 0x69, 0x57, 0x5c, 0xf8, 0x14, 0x16, 0xf5, 0x10, 0x77, 0x8f, 0x69, 0x98,
	0x0a, 0xf9, 0x28, 0xb9, 0x28, 0x56, 0x94, 0xca, 0x46, 0xd9, 0xcf, 0xb2, 0xcf, 0x87, 0x8c, 0x92,
	0x5c, 0x14, 0xe3, 0x1a, 0x58, 0x9d, 0x41, 0x83, 0x05, 0xed, 0x44, 0xb5, 0x6f, 0x6f, 0x58, 0xbe,
	0x96, 0x93, 0x62, 0x47, 0xfd, 0x7a, 0xb7, 0xa1, 0x92, 0x89, 0x26, 0xed, 0x5d, 0x83, 0x02, 0x3d,
	0xa6, 0x21, 0xaf, 0xa2, 0x9a, 0x59, 0xb7, 0x37, 0x2a, 0xfe, 0xb9, 0x82, 0x44, 0x1f, 0xca, 0x01,
	0x4c, 0x75, 0x57, 0xf4, 0xfb, 0x0d, 0x81, 0x35, 0xb9, 0xf8, 0x7f, 0x28, 0x85, 0xbd, 0xa8, 0x21,
	0x86, 0x8c, 0x66, 0x0d, 0x97, 0xfc, 0x9d, 0x5e, 0xa4, 0x9a, 0xb5, 0x42, 0x1d, 0xe0, 0x3a, 0x58,
	0x2d, 0x2a, 0x1a, 0x09, 0x3d, 0xca, 0x3a, 0x5e, 0xf2, 0xcf, 0xef, 0x00, 0x29, 0xb6, 0x54, 0x2c,
	0x99, 0x2c, 0xd5, 0x4c, 0xf3, 0x0c, 0x73, 0xf6, 0x98, 0xa4, 0xc8, 0x54, 0x8c, 0x6f, 0x02, 0x44,
	0x6a, 0xb4, 0x8a, 0x9c, 0x57, 0x64, 0xec, 0x5f, 0x7a, 0x18, 0xb2, 0x10, 0x4d, 0x20, 0x5e, 0x07,
	0x9b, 0x6a, 0x7b, 0x4a, 0x53, 0xc8, 0x0a, 0x9c, 0x1f, 0x15, 0x01, 0x3a, 0xc5, 0xde, 0x0f, 0x04,
	0xa5, 0xe9, 0x28, 0x7e, 0xcb, 0xea, 0x75, 0x28, 0x69, 0xab, 0x9c, 0x65, 0x5e, 0x1d, 0xff, 0xc2,
	0x2e, 0x13, 0xab, 0xa5, 0x81, 0x24, 0x6b, 0xb7, 0x9c, 0x65, 0x76, 0x1d, 0xff, 0xc2, 0x06, 0x12,
	0x8b, 0x69, 0x80, 0x6f, 0x81, 0x3d, 0x35, 0xcc, 0x59, 0xe6, 0xf8, 0x6f, 0xff, 0xf2, 0x8e, 0x11,
	0x88, 0xa6, 0x18, 0x6f, 0x42, 0x79, 0xe6, 0x99, 0xb3, 0xcc, 0xb4, 0xe3, 0x5f, 0x78, 0x67, 0x62,
	0xd3, 0x59, 0x62, 0x75, 0x0b, 0xec, 0x33, 0x4b, 0x87, 0x97, 0x34, 0xdc, 0xef, 0x0f, 0x82, 0x6e,
	0x3b, 0x72, 0x0c, 0x6c, 0x83, 0x25, 0x13, 0x07, 0xa9, 0x70, 0x10, 0xae, 0x00, 0x48, 0xa0, 0x7b,
	0x70, 0x72, 0xab, 0xf7, 0xc0, 0xca, 0xa6, 0x22, 0x79, 0x33, 0x91, 0x05, 0xe6, 0x1e, 0x95, 0x02,
	0x0b, 0x4c, 0xa9, 0xcc, 0x61, 0x80, 0x62, 0xa6, 0x32, 0x27, 0x57, 0xa6, 0x82, 0x3a, 0xf9, 0xd5,
	0xc7, 0x50, 0x9e, 0x34, 0xb6, 0x23, 0xff, 0xe8, 0x36, 0x58, 0xcf, 0xd2, 0x30, 0xa4, 0x9c, 0x3b,
	0x86, 0xac, 0xf7, 0xa2, 0xdf, 0xe9, 0xc7, 0xaf, 0xfb, 0xbb, 0x49, 0xe2, 0x20, 0x5c, 0x86, 0xd2,
	0x93, 0xf8, 0x11, 0x0d, 0x22, 0x9a, 0x38, 0x39, 0x89, 0xe4, 0x44, 0xb6, 0x53, 0x3e, 0x74, 0xcc,
	0xe5, 0xfc, 0xdb, 0xf7, 0xae, 0xb1, 0x7d, 0xf7, 0x64, 0xe4, 0x1a, 0x5f, 0x46, 0xae, 0x71, 0x3a,
	0x72, 0x8d, 0xef, 0x23, 0xd7, 0xf8, 0x39, 0x72, 0xd1, 0x9b, 0xb1, 0x8b, 0x3e, 0x8c, 0x5d, 0xf4,
	0x71, 0xec, 0x1a, 0x9f, 0xc6, 0xae, 0x71, 0x32, 0x76, 0xd1, 0xe7, 0xb1, 0x8b, 0x4e, 0xc7, 0x2e,
	0x7a, 0xf7, 0xd5, 0x35, 0x1e, 0xa0, 0x97, 0xa5, 0x5e, 0xc0, 0x05, 0x4d, 0x58, 0xb3, 0x59, 0x54,
	0x9f, 0xd8, 0xcd, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x21, 0x7f, 0xe9, 0xd9, 0xa2, 0x05, 0x00,
	0x00,
}

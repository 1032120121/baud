// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stats.proto

/*
	Package masterpb is a generated protocol buffer package.

	It is generated from these files:
		stats.proto

	It has these top-level messages:
		RuntimeInfo
		RaftStatus
		RaftFollowerStatus
		NodeSysStats
		PartitionStats
*/
package masterpb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RuntimeInfo struct {
	AppVersion string `protobuf:"bytes,1,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	StartTime  string `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	GoVersion  string `protobuf:"bytes,3,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	Platform   string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (m *RuntimeInfo) Reset()                    { *m = RuntimeInfo{} }
func (*RuntimeInfo) ProtoMessage()               {}
func (*RuntimeInfo) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{0} }

type RaftStatus struct {
	Term      uint64               `protobuf:"varint,1,opt,name=term,proto3" json:"term,omitempty"`
	Index     uint64               `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Commit    uint64               `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Applied   uint64               `protobuf:"varint,4,opt,name=applied,proto3" json:"applied,omitempty"`
	Followers []RaftFollowerStatus `protobuf:"bytes,5,rep,name=followers" json:"followers"`
}

func (m *RaftStatus) Reset()                    { *m = RaftStatus{} }
func (*RaftStatus) ProtoMessage()               {}
func (*RaftStatus) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{1} }

type RaftFollowerStatus struct {
	NodeID      NodeID `protobuf:"varint,1,opt,name=nodeID,proto3,casttype=NodeID" json:"nodeID,omitempty"`
	Match       uint64 `protobuf:"varint,2,opt,name=match,proto3" json:"match,omitempty"`
	Commit      uint64 `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
	Next        uint64 `protobuf:"varint,4,opt,name=next,proto3" json:"next,omitempty"`
	DownSeconds uint64 `protobuf:"varint,5,opt,name=down_seconds,json=downSeconds,proto3" json:"down_seconds,omitempty"`
	State       string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *RaftFollowerStatus) Reset()                    { *m = RaftFollowerStatus{} }
func (*RaftFollowerStatus) ProtoMessage()               {}
func (*RaftFollowerStatus) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{2} }

type NodeSysStats struct {
	// Memory
	MemoryTotal           uint64  `protobuf:"varint,1,opt,name=memory_total,json=memoryTotal,proto3" json:"memory_total,omitempty"`
	MemoryUsedRss         uint64  `protobuf:"varint,2,opt,name=memory_used_rss,json=memoryUsedRss,proto3" json:"memory_used_rss,omitempty"`
	MemoryUsed            uint64  `protobuf:"varint,3,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`
	MemoryFree            uint64  `protobuf:"varint,4,opt,name=memory_free,json=memoryFree,proto3" json:"memory_free,omitempty"`
	MemoryUsedPercent     float64 `protobuf:"fixed64,5,opt,name=memory_used_percent,json=memoryUsedPercent,proto3" json:"memory_used_percent,omitempty"`
	SwapMemoryTotal       uint64  `protobuf:"varint,6,opt,name=swap_memory_total,json=swapMemoryTotal,proto3" json:"swap_memory_total,omitempty"`
	SwapMemoryUsed        uint64  `protobuf:"varint,7,opt,name=swap_memory_used,json=swapMemoryUsed,proto3" json:"swap_memory_used,omitempty"`
	SwapMemoryFree        uint64  `protobuf:"varint,8,opt,name=swap_memory_free,json=swapMemoryFree,proto3" json:"swap_memory_free,omitempty"`
	SwapMemoryUsedPercent float64 `protobuf:"fixed64,9,opt,name=swap_memory_used_percent,json=swapMemoryUsedPercent,proto3" json:"swap_memory_used_percent,omitempty"`
	// CPU
	CpuProcRate float64 `protobuf:"fixed64,10,opt,name=cpu_proc_rate,json=cpuProcRate,proto3" json:"cpu_proc_rate,omitempty"`
	CpuCount    uint32  `protobuf:"varint,11,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	Load1       float64 `protobuf:"fixed64,12,opt,name=load1,proto3" json:"load1,omitempty"`
	Load5       float64 `protobuf:"fixed64,13,opt,name=load5,proto3" json:"load5,omitempty"`
	Load15      float64 `protobuf:"fixed64,14,opt,name=load15,proto3" json:"load15,omitempty"`
	// Disk
	DiskTotal           uint64  `protobuf:"varint,15,opt,name=disk_total,json=diskTotal,proto3" json:"disk_total,omitempty"`
	DiskUsed            uint64  `protobuf:"varint,16,opt,name=disk_used,json=diskUsed,proto3" json:"disk_used,omitempty"`
	DiskFree            uint64  `protobuf:"varint,17,opt,name=disk_free,json=diskFree,proto3" json:"disk_free,omitempty"`
	DiskProcRate        float64 `protobuf:"fixed64,18,opt,name=disk_proc_rate,json=diskProcRate,proto3" json:"disk_proc_rate,omitempty"`
	DiskReadBytePerSec  uint64  `protobuf:"varint,19,opt,name=disk_read_byte_per_sec,json=diskReadBytePerSec,proto3" json:"disk_read_byte_per_sec,omitempty"`
	DiskWriteBytePerSec uint64  `protobuf:"varint,20,opt,name=disk_write_byte_per_sec,json=diskWriteBytePerSec,proto3" json:"disk_write_byte_per_sec,omitempty"`
	// Net
	NetIoInBytePerSec       uint64 `protobuf:"varint,21,opt,name=net_io_in_byte_per_sec,json=netIoInBytePerSec,proto3" json:"net_io_in_byte_per_sec,omitempty"`
	NetIoOutBytePerSec      uint64 `protobuf:"varint,22,opt,name=net_io_out_byte_per_sec,json=netIoOutBytePerSec,proto3" json:"net_io_out_byte_per_sec,omitempty"`
	NetTcpConnections       uint32 `protobuf:"varint,23,opt,name=net_tcp_connections,json=netTcpConnections,proto3" json:"net_tcp_connections,omitempty"`
	NetTcpActiveOpensPerSec uint64 `protobuf:"varint,24,opt,name=net_tcp_active_opens_per_sec,json=netTcpActiveOpensPerSec,proto3" json:"net_tcp_active_opens_per_sec,omitempty"`
	// server
	Ops uint64 `protobuf:"varint,25,opt,name=ops,proto3" json:"ops,omitempty"`
}

func (m *NodeSysStats) Reset()                    { *m = NodeSysStats{} }
func (*NodeSysStats) ProtoMessage()               {}
func (*NodeSysStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{3} }

type PartitionStats struct {
	Size_                  uint64 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	Ops                    uint64 `protobuf:"varint,2,opt,name=ops,proto3" json:"ops,omitempty"`
	BytesInPerSec          uint64 `protobuf:"varint,3,opt,name=bytes_in_per_sec,json=bytesInPerSec,proto3" json:"bytes_in_per_sec,omitempty"`
	BytesOutPerSec         uint64 `protobuf:"varint,4,opt,name=bytes_out_per_sec,json=bytesOutPerSec,proto3" json:"bytes_out_per_sec,omitempty"`
	TotalCommandsProcessed uint64 `protobuf:"varint,5,opt,name=total_commands_processed,json=totalCommandsProcessed,proto3" json:"total_commands_processed,omitempty"`
	KeyspaceMisses         uint64 `protobuf:"varint,6,opt,name=keyspace_misses,json=keyspaceMisses,proto3" json:"keyspace_misses,omitempty"`
}

func (m *PartitionStats) Reset()                    { *m = PartitionStats{} }
func (*PartitionStats) ProtoMessage()               {}
func (*PartitionStats) Descriptor() ([]byte, []int) { return fileDescriptorStats, []int{4} }

func init() {
	proto.RegisterType((*RuntimeInfo)(nil), "RuntimeInfo")
	proto.RegisterType((*RaftStatus)(nil), "RaftStatus")
	proto.RegisterType((*RaftFollowerStatus)(nil), "RaftFollowerStatus")
	proto.RegisterType((*NodeSysStats)(nil), "NodeSysStats")
	proto.RegisterType((*PartitionStats)(nil), "PartitionStats")
}
func (this *RuntimeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RuntimeInfo)
	if !ok {
		that2, ok := that.(RuntimeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AppVersion != that1.AppVersion {
		return false
	}
	if this.StartTime != that1.StartTime {
		return false
	}
	if this.GoVersion != that1.GoVersion {
		return false
	}
	if this.Platform != that1.Platform {
		return false
	}
	return true
}
func (this *RaftStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftStatus)
	if !ok {
		that2, ok := that.(RaftStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Term != that1.Term {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.Commit != that1.Commit {
		return false
	}
	if this.Applied != that1.Applied {
		return false
	}
	if len(this.Followers) != len(that1.Followers) {
		return false
	}
	for i := range this.Followers {
		if !this.Followers[i].Equal(&that1.Followers[i]) {
			return false
		}
	}
	return true
}
func (this *RaftFollowerStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RaftFollowerStatus)
	if !ok {
		that2, ok := that.(RaftFollowerStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Match != that1.Match {
		return false
	}
	if this.Commit != that1.Commit {
		return false
	}
	if this.Next != that1.Next {
		return false
	}
	if this.DownSeconds != that1.DownSeconds {
		return false
	}
	if this.State != that1.State {
		return false
	}
	return true
}
func (this *NodeSysStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*NodeSysStats)
	if !ok {
		that2, ok := that.(NodeSysStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MemoryTotal != that1.MemoryTotal {
		return false
	}
	if this.MemoryUsedRss != that1.MemoryUsedRss {
		return false
	}
	if this.MemoryUsed != that1.MemoryUsed {
		return false
	}
	if this.MemoryFree != that1.MemoryFree {
		return false
	}
	if this.MemoryUsedPercent != that1.MemoryUsedPercent {
		return false
	}
	if this.SwapMemoryTotal != that1.SwapMemoryTotal {
		return false
	}
	if this.SwapMemoryUsed != that1.SwapMemoryUsed {
		return false
	}
	if this.SwapMemoryFree != that1.SwapMemoryFree {
		return false
	}
	if this.SwapMemoryUsedPercent != that1.SwapMemoryUsedPercent {
		return false
	}
	if this.CpuProcRate != that1.CpuProcRate {
		return false
	}
	if this.CpuCount != that1.CpuCount {
		return false
	}
	if this.Load1 != that1.Load1 {
		return false
	}
	if this.Load5 != that1.Load5 {
		return false
	}
	if this.Load15 != that1.Load15 {
		return false
	}
	if this.DiskTotal != that1.DiskTotal {
		return false
	}
	if this.DiskUsed != that1.DiskUsed {
		return false
	}
	if this.DiskFree != that1.DiskFree {
		return false
	}
	if this.DiskProcRate != that1.DiskProcRate {
		return false
	}
	if this.DiskReadBytePerSec != that1.DiskReadBytePerSec {
		return false
	}
	if this.DiskWriteBytePerSec != that1.DiskWriteBytePerSec {
		return false
	}
	if this.NetIoInBytePerSec != that1.NetIoInBytePerSec {
		return false
	}
	if this.NetIoOutBytePerSec != that1.NetIoOutBytePerSec {
		return false
	}
	if this.NetTcpConnections != that1.NetTcpConnections {
		return false
	}
	if this.NetTcpActiveOpensPerSec != that1.NetTcpActiveOpensPerSec {
		return false
	}
	if this.Ops != that1.Ops {
		return false
	}
	return true
}
func (this *PartitionStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionStats)
	if !ok {
		that2, ok := that.(PartitionStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Size_ != that1.Size_ {
		return false
	}
	if this.Ops != that1.Ops {
		return false
	}
	if this.BytesInPerSec != that1.BytesInPerSec {
		return false
	}
	if this.BytesOutPerSec != that1.BytesOutPerSec {
		return false
	}
	if this.TotalCommandsProcessed != that1.TotalCommandsProcessed {
		return false
	}
	if this.KeyspaceMisses != that1.KeyspaceMisses {
		return false
	}
	return true
}
func (this *RuntimeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&masterpb.RuntimeInfo{")
	s = append(s, "AppVersion: "+fmt.Sprintf("%#v", this.AppVersion)+",\n")
	s = append(s, "StartTime: "+fmt.Sprintf("%#v", this.StartTime)+",\n")
	s = append(s, "GoVersion: "+fmt.Sprintf("%#v", this.GoVersion)+",\n")
	s = append(s, "Platform: "+fmt.Sprintf("%#v", this.Platform)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RaftStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&masterpb.RaftStatus{")
	s = append(s, "Term: "+fmt.Sprintf("%#v", this.Term)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "Commit: "+fmt.Sprintf("%#v", this.Commit)+",\n")
	s = append(s, "Applied: "+fmt.Sprintf("%#v", this.Applied)+",\n")
	if this.Followers != nil {
		vs := make([]*RaftFollowerStatus, len(this.Followers))
		for i := range vs {
			vs[i] = &this.Followers[i]
		}
		s = append(s, "Followers: "+fmt.Sprintf("%#v", vs)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RaftFollowerStatus) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&masterpb.RaftFollowerStatus{")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Match: "+fmt.Sprintf("%#v", this.Match)+",\n")
	s = append(s, "Commit: "+fmt.Sprintf("%#v", this.Commit)+",\n")
	s = append(s, "Next: "+fmt.Sprintf("%#v", this.Next)+",\n")
	s = append(s, "DownSeconds: "+fmt.Sprintf("%#v", this.DownSeconds)+",\n")
	s = append(s, "State: "+fmt.Sprintf("%#v", this.State)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *NodeSysStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 29)
	s = append(s, "&masterpb.NodeSysStats{")
	s = append(s, "MemoryTotal: "+fmt.Sprintf("%#v", this.MemoryTotal)+",\n")
	s = append(s, "MemoryUsedRss: "+fmt.Sprintf("%#v", this.MemoryUsedRss)+",\n")
	s = append(s, "MemoryUsed: "+fmt.Sprintf("%#v", this.MemoryUsed)+",\n")
	s = append(s, "MemoryFree: "+fmt.Sprintf("%#v", this.MemoryFree)+",\n")
	s = append(s, "MemoryUsedPercent: "+fmt.Sprintf("%#v", this.MemoryUsedPercent)+",\n")
	s = append(s, "SwapMemoryTotal: "+fmt.Sprintf("%#v", this.SwapMemoryTotal)+",\n")
	s = append(s, "SwapMemoryUsed: "+fmt.Sprintf("%#v", this.SwapMemoryUsed)+",\n")
	s = append(s, "SwapMemoryFree: "+fmt.Sprintf("%#v", this.SwapMemoryFree)+",\n")
	s = append(s, "SwapMemoryUsedPercent: "+fmt.Sprintf("%#v", this.SwapMemoryUsedPercent)+",\n")
	s = append(s, "CpuProcRate: "+fmt.Sprintf("%#v", this.CpuProcRate)+",\n")
	s = append(s, "CpuCount: "+fmt.Sprintf("%#v", this.CpuCount)+",\n")
	s = append(s, "Load1: "+fmt.Sprintf("%#v", this.Load1)+",\n")
	s = append(s, "Load5: "+fmt.Sprintf("%#v", this.Load5)+",\n")
	s = append(s, "Load15: "+fmt.Sprintf("%#v", this.Load15)+",\n")
	s = append(s, "DiskTotal: "+fmt.Sprintf("%#v", this.DiskTotal)+",\n")
	s = append(s, "DiskUsed: "+fmt.Sprintf("%#v", this.DiskUsed)+",\n")
	s = append(s, "DiskFree: "+fmt.Sprintf("%#v", this.DiskFree)+",\n")
	s = append(s, "DiskProcRate: "+fmt.Sprintf("%#v", this.DiskProcRate)+",\n")
	s = append(s, "DiskReadBytePerSec: "+fmt.Sprintf("%#v", this.DiskReadBytePerSec)+",\n")
	s = append(s, "DiskWriteBytePerSec: "+fmt.Sprintf("%#v", this.DiskWriteBytePerSec)+",\n")
	s = append(s, "NetIoInBytePerSec: "+fmt.Sprintf("%#v", this.NetIoInBytePerSec)+",\n")
	s = append(s, "NetIoOutBytePerSec: "+fmt.Sprintf("%#v", this.NetIoOutBytePerSec)+",\n")
	s = append(s, "NetTcpConnections: "+fmt.Sprintf("%#v", this.NetTcpConnections)+",\n")
	s = append(s, "NetTcpActiveOpensPerSec: "+fmt.Sprintf("%#v", this.NetTcpActiveOpensPerSec)+",\n")
	s = append(s, "Ops: "+fmt.Sprintf("%#v", this.Ops)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PartitionStats) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&masterpb.PartitionStats{")
	s = append(s, "Size_: "+fmt.Sprintf("%#v", this.Size_)+",\n")
	s = append(s, "Ops: "+fmt.Sprintf("%#v", this.Ops)+",\n")
	s = append(s, "BytesInPerSec: "+fmt.Sprintf("%#v", this.BytesInPerSec)+",\n")
	s = append(s, "BytesOutPerSec: "+fmt.Sprintf("%#v", this.BytesOutPerSec)+",\n")
	s = append(s, "TotalCommandsProcessed: "+fmt.Sprintf("%#v", this.TotalCommandsProcessed)+",\n")
	s = append(s, "KeyspaceMisses: "+fmt.Sprintf("%#v", this.KeyspaceMisses)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStats(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RuntimeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuntimeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.StartTime) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.StartTime)))
		i += copy(dAtA[i:], m.StartTime)
	}
	if len(m.GoVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.GoVersion)))
		i += copy(dAtA[i:], m.GoVersion)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	return i, nil
}

func (m *RaftStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Term != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Index))
	}
	if m.Commit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Commit))
	}
	if m.Applied != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Applied))
	}
	if len(m.Followers) > 0 {
		for _, msg := range m.Followers {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintStats(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RaftFollowerStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftFollowerStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NodeID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NodeID))
	}
	if m.Match != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Match))
	}
	if m.Commit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Commit))
	}
	if m.Next != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Next))
	}
	if m.DownSeconds != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DownSeconds))
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStats(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *NodeSysStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSysStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MemoryTotal != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MemoryTotal))
	}
	if m.MemoryUsedRss != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MemoryUsedRss))
	}
	if m.MemoryUsed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MemoryUsed))
	}
	if m.MemoryFree != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.MemoryFree))
	}
	if m.MemoryUsedPercent != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.MemoryUsedPercent))))
		i += 8
	}
	if m.SwapMemoryTotal != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.SwapMemoryTotal))
	}
	if m.SwapMemoryUsed != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.SwapMemoryUsed))
	}
	if m.SwapMemoryFree != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.SwapMemoryFree))
	}
	if m.SwapMemoryUsedPercent != 0 {
		dAtA[i] = 0x49
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.SwapMemoryUsedPercent))))
		i += 8
	}
	if m.CpuProcRate != 0 {
		dAtA[i] = 0x51
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuProcRate))))
		i += 8
	}
	if m.CpuCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.CpuCount))
	}
	if m.Load1 != 0 {
		dAtA[i] = 0x61
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load1))))
		i += 8
	}
	if m.Load5 != 0 {
		dAtA[i] = 0x69
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load5))))
		i += 8
	}
	if m.Load15 != 0 {
		dAtA[i] = 0x71
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Load15))))
		i += 8
	}
	if m.DiskTotal != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DiskTotal))
	}
	if m.DiskUsed != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DiskUsed))
	}
	if m.DiskFree != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DiskFree))
	}
	if m.DiskProcRate != 0 {
		dAtA[i] = 0x91
		i++
		dAtA[i] = 0x1
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.DiskProcRate))))
		i += 8
	}
	if m.DiskReadBytePerSec != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DiskReadBytePerSec))
	}
	if m.DiskWriteBytePerSec != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.DiskWriteBytePerSec))
	}
	if m.NetIoInBytePerSec != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NetIoInBytePerSec))
	}
	if m.NetIoOutBytePerSec != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NetIoOutBytePerSec))
	}
	if m.NetTcpConnections != 0 {
		dAtA[i] = 0xb8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NetTcpConnections))
	}
	if m.NetTcpActiveOpensPerSec != 0 {
		dAtA[i] = 0xc0
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.NetTcpActiveOpensPerSec))
	}
	if m.Ops != 0 {
		dAtA[i] = 0xc8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Ops))
	}
	return i, nil
}

func (m *PartitionStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionStats) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Size_ != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Size_))
	}
	if m.Ops != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.Ops))
	}
	if m.BytesInPerSec != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.BytesInPerSec))
	}
	if m.BytesOutPerSec != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.BytesOutPerSec))
	}
	if m.TotalCommandsProcessed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.TotalCommandsProcessed))
	}
	if m.KeyspaceMisses != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintStats(dAtA, i, uint64(m.KeyspaceMisses))
	}
	return i, nil
}

func encodeVarintStats(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRuntimeInfo(r randyStats, easy bool) *RuntimeInfo {
	this := &RuntimeInfo{}
	this.AppVersion = string(randStringStats(r))
	this.StartTime = string(randStringStats(r))
	this.GoVersion = string(randStringStats(r))
	this.Platform = string(randStringStats(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftStatus(r randyStats, easy bool) *RaftStatus {
	this := &RaftStatus{}
	this.Term = uint64(uint64(r.Uint32()))
	this.Index = uint64(uint64(r.Uint32()))
	this.Commit = uint64(uint64(r.Uint32()))
	this.Applied = uint64(uint64(r.Uint32()))
	if r.Intn(10) != 0 {
		v1 := r.Intn(5)
		this.Followers = make([]RaftFollowerStatus, v1)
		for i := 0; i < v1; i++ {
			v2 := NewPopulatedRaftFollowerStatus(r, easy)
			this.Followers[i] = *v2
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedRaftFollowerStatus(r randyStats, easy bool) *RaftFollowerStatus {
	this := &RaftFollowerStatus{}
	this.NodeID = NodeID(r.Uint32())
	this.Match = uint64(uint64(r.Uint32()))
	this.Commit = uint64(uint64(r.Uint32()))
	this.Next = uint64(uint64(r.Uint32()))
	this.DownSeconds = uint64(uint64(r.Uint32()))
	this.State = string(randStringStats(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedNodeSysStats(r randyStats, easy bool) *NodeSysStats {
	this := &NodeSysStats{}
	this.MemoryTotal = uint64(uint64(r.Uint32()))
	this.MemoryUsedRss = uint64(uint64(r.Uint32()))
	this.MemoryUsed = uint64(uint64(r.Uint32()))
	this.MemoryFree = uint64(uint64(r.Uint32()))
	this.MemoryUsedPercent = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.MemoryUsedPercent *= -1
	}
	this.SwapMemoryTotal = uint64(uint64(r.Uint32()))
	this.SwapMemoryUsed = uint64(uint64(r.Uint32()))
	this.SwapMemoryFree = uint64(uint64(r.Uint32()))
	this.SwapMemoryUsedPercent = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.SwapMemoryUsedPercent *= -1
	}
	this.CpuProcRate = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.CpuProcRate *= -1
	}
	this.CpuCount = uint32(r.Uint32())
	this.Load1 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Load1 *= -1
	}
	this.Load5 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Load5 *= -1
	}
	this.Load15 = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.Load15 *= -1
	}
	this.DiskTotal = uint64(uint64(r.Uint32()))
	this.DiskUsed = uint64(uint64(r.Uint32()))
	this.DiskFree = uint64(uint64(r.Uint32()))
	this.DiskProcRate = float64(r.Float64())
	if r.Intn(2) == 0 {
		this.DiskProcRate *= -1
	}
	this.DiskReadBytePerSec = uint64(uint64(r.Uint32()))
	this.DiskWriteBytePerSec = uint64(uint64(r.Uint32()))
	this.NetIoInBytePerSec = uint64(uint64(r.Uint32()))
	this.NetIoOutBytePerSec = uint64(uint64(r.Uint32()))
	this.NetTcpConnections = uint32(r.Uint32())
	this.NetTcpActiveOpensPerSec = uint64(uint64(r.Uint32()))
	this.Ops = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionStats(r randyStats, easy bool) *PartitionStats {
	this := &PartitionStats{}
	this.Size_ = uint64(uint64(r.Uint32()))
	this.Ops = uint64(uint64(r.Uint32()))
	this.BytesInPerSec = uint64(uint64(r.Uint32()))
	this.BytesOutPerSec = uint64(uint64(r.Uint32()))
	this.TotalCommandsProcessed = uint64(uint64(r.Uint32()))
	this.KeyspaceMisses = uint64(uint64(r.Uint32()))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyStats interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneStats(r randyStats) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringStats(r randyStats) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneStats(r)
	}
	return string(tmps)
}
func randUnrecognizedStats(r randyStats, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldStats(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldStats(dAtA []byte, r randyStats, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateStats(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateStats(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateStats(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateStats(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateStats(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateStats(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateStats(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RuntimeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.StartTime)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.GoVersion)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	return n
}

func (m *RaftStatus) Size() (n int) {
	var l int
	_ = l
	if m.Term != 0 {
		n += 1 + sovStats(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovStats(uint64(m.Index))
	}
	if m.Commit != 0 {
		n += 1 + sovStats(uint64(m.Commit))
	}
	if m.Applied != 0 {
		n += 1 + sovStats(uint64(m.Applied))
	}
	if len(m.Followers) > 0 {
		for _, e := range m.Followers {
			l = e.Size()
			n += 1 + l + sovStats(uint64(l))
		}
	}
	return n
}

func (m *RaftFollowerStatus) Size() (n int) {
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovStats(uint64(m.NodeID))
	}
	if m.Match != 0 {
		n += 1 + sovStats(uint64(m.Match))
	}
	if m.Commit != 0 {
		n += 1 + sovStats(uint64(m.Commit))
	}
	if m.Next != 0 {
		n += 1 + sovStats(uint64(m.Next))
	}
	if m.DownSeconds != 0 {
		n += 1 + sovStats(uint64(m.DownSeconds))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovStats(uint64(l))
	}
	return n
}

func (m *NodeSysStats) Size() (n int) {
	var l int
	_ = l
	if m.MemoryTotal != 0 {
		n += 1 + sovStats(uint64(m.MemoryTotal))
	}
	if m.MemoryUsedRss != 0 {
		n += 1 + sovStats(uint64(m.MemoryUsedRss))
	}
	if m.MemoryUsed != 0 {
		n += 1 + sovStats(uint64(m.MemoryUsed))
	}
	if m.MemoryFree != 0 {
		n += 1 + sovStats(uint64(m.MemoryFree))
	}
	if m.MemoryUsedPercent != 0 {
		n += 9
	}
	if m.SwapMemoryTotal != 0 {
		n += 1 + sovStats(uint64(m.SwapMemoryTotal))
	}
	if m.SwapMemoryUsed != 0 {
		n += 1 + sovStats(uint64(m.SwapMemoryUsed))
	}
	if m.SwapMemoryFree != 0 {
		n += 1 + sovStats(uint64(m.SwapMemoryFree))
	}
	if m.SwapMemoryUsedPercent != 0 {
		n += 9
	}
	if m.CpuProcRate != 0 {
		n += 9
	}
	if m.CpuCount != 0 {
		n += 1 + sovStats(uint64(m.CpuCount))
	}
	if m.Load1 != 0 {
		n += 9
	}
	if m.Load5 != 0 {
		n += 9
	}
	if m.Load15 != 0 {
		n += 9
	}
	if m.DiskTotal != 0 {
		n += 1 + sovStats(uint64(m.DiskTotal))
	}
	if m.DiskUsed != 0 {
		n += 2 + sovStats(uint64(m.DiskUsed))
	}
	if m.DiskFree != 0 {
		n += 2 + sovStats(uint64(m.DiskFree))
	}
	if m.DiskProcRate != 0 {
		n += 10
	}
	if m.DiskReadBytePerSec != 0 {
		n += 2 + sovStats(uint64(m.DiskReadBytePerSec))
	}
	if m.DiskWriteBytePerSec != 0 {
		n += 2 + sovStats(uint64(m.DiskWriteBytePerSec))
	}
	if m.NetIoInBytePerSec != 0 {
		n += 2 + sovStats(uint64(m.NetIoInBytePerSec))
	}
	if m.NetIoOutBytePerSec != 0 {
		n += 2 + sovStats(uint64(m.NetIoOutBytePerSec))
	}
	if m.NetTcpConnections != 0 {
		n += 2 + sovStats(uint64(m.NetTcpConnections))
	}
	if m.NetTcpActiveOpensPerSec != 0 {
		n += 2 + sovStats(uint64(m.NetTcpActiveOpensPerSec))
	}
	if m.Ops != 0 {
		n += 2 + sovStats(uint64(m.Ops))
	}
	return n
}

func (m *PartitionStats) Size() (n int) {
	var l int
	_ = l
	if m.Size_ != 0 {
		n += 1 + sovStats(uint64(m.Size_))
	}
	if m.Ops != 0 {
		n += 1 + sovStats(uint64(m.Ops))
	}
	if m.BytesInPerSec != 0 {
		n += 1 + sovStats(uint64(m.BytesInPerSec))
	}
	if m.BytesOutPerSec != 0 {
		n += 1 + sovStats(uint64(m.BytesOutPerSec))
	}
	if m.TotalCommandsProcessed != 0 {
		n += 1 + sovStats(uint64(m.TotalCommandsProcessed))
	}
	if m.KeyspaceMisses != 0 {
		n += 1 + sovStats(uint64(m.KeyspaceMisses))
	}
	return n
}

func sovStats(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStats(x uint64) (n int) {
	return sovStats(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RuntimeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RuntimeInfo{`,
		`AppVersion:` + fmt.Sprintf("%v", this.AppVersion) + `,`,
		`StartTime:` + fmt.Sprintf("%v", this.StartTime) + `,`,
		`GoVersion:` + fmt.Sprintf("%v", this.GoVersion) + `,`,
		`Platform:` + fmt.Sprintf("%v", this.Platform) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftStatus{`,
		`Term:` + fmt.Sprintf("%v", this.Term) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`Commit:` + fmt.Sprintf("%v", this.Commit) + `,`,
		`Applied:` + fmt.Sprintf("%v", this.Applied) + `,`,
		`Followers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Followers), "RaftFollowerStatus", "RaftFollowerStatus", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RaftFollowerStatus) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RaftFollowerStatus{`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Match:` + fmt.Sprintf("%v", this.Match) + `,`,
		`Commit:` + fmt.Sprintf("%v", this.Commit) + `,`,
		`Next:` + fmt.Sprintf("%v", this.Next) + `,`,
		`DownSeconds:` + fmt.Sprintf("%v", this.DownSeconds) + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`}`,
	}, "")
	return s
}
func (this *NodeSysStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&NodeSysStats{`,
		`MemoryTotal:` + fmt.Sprintf("%v", this.MemoryTotal) + `,`,
		`MemoryUsedRss:` + fmt.Sprintf("%v", this.MemoryUsedRss) + `,`,
		`MemoryUsed:` + fmt.Sprintf("%v", this.MemoryUsed) + `,`,
		`MemoryFree:` + fmt.Sprintf("%v", this.MemoryFree) + `,`,
		`MemoryUsedPercent:` + fmt.Sprintf("%v", this.MemoryUsedPercent) + `,`,
		`SwapMemoryTotal:` + fmt.Sprintf("%v", this.SwapMemoryTotal) + `,`,
		`SwapMemoryUsed:` + fmt.Sprintf("%v", this.SwapMemoryUsed) + `,`,
		`SwapMemoryFree:` + fmt.Sprintf("%v", this.SwapMemoryFree) + `,`,
		`SwapMemoryUsedPercent:` + fmt.Sprintf("%v", this.SwapMemoryUsedPercent) + `,`,
		`CpuProcRate:` + fmt.Sprintf("%v", this.CpuProcRate) + `,`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`Load1:` + fmt.Sprintf("%v", this.Load1) + `,`,
		`Load5:` + fmt.Sprintf("%v", this.Load5) + `,`,
		`Load15:` + fmt.Sprintf("%v", this.Load15) + `,`,
		`DiskTotal:` + fmt.Sprintf("%v", this.DiskTotal) + `,`,
		`DiskUsed:` + fmt.Sprintf("%v", this.DiskUsed) + `,`,
		`DiskFree:` + fmt.Sprintf("%v", this.DiskFree) + `,`,
		`DiskProcRate:` + fmt.Sprintf("%v", this.DiskProcRate) + `,`,
		`DiskReadBytePerSec:` + fmt.Sprintf("%v", this.DiskReadBytePerSec) + `,`,
		`DiskWriteBytePerSec:` + fmt.Sprintf("%v", this.DiskWriteBytePerSec) + `,`,
		`NetIoInBytePerSec:` + fmt.Sprintf("%v", this.NetIoInBytePerSec) + `,`,
		`NetIoOutBytePerSec:` + fmt.Sprintf("%v", this.NetIoOutBytePerSec) + `,`,
		`NetTcpConnections:` + fmt.Sprintf("%v", this.NetTcpConnections) + `,`,
		`NetTcpActiveOpensPerSec:` + fmt.Sprintf("%v", this.NetTcpActiveOpensPerSec) + `,`,
		`Ops:` + fmt.Sprintf("%v", this.Ops) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionStats) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionStats{`,
		`Size_:` + fmt.Sprintf("%v", this.Size_) + `,`,
		`Ops:` + fmt.Sprintf("%v", this.Ops) + `,`,
		`BytesInPerSec:` + fmt.Sprintf("%v", this.BytesInPerSec) + `,`,
		`BytesOutPerSec:` + fmt.Sprintf("%v", this.BytesOutPerSec) + `,`,
		`TotalCommandsProcessed:` + fmt.Sprintf("%v", this.TotalCommandsProcessed) + `,`,
		`KeyspaceMisses:` + fmt.Sprintf("%v", this.KeyspaceMisses) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStats(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RuntimeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuntimeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuntimeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			m.Applied = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Applied |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Followers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Followers = append(m.Followers, RaftFollowerStatus{})
			if err := m.Followers[len(m.Followers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftFollowerStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftFollowerStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftFollowerStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			m.Match = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Match |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			m.Next = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Next |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownSeconds", wireType)
			}
			m.DownSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DownSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStats
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSysStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSysStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSysStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryTotal", wireType)
			}
			m.MemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsedRss", wireType)
			}
			m.MemoryUsedRss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsedRss |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsed", wireType)
			}
			m.MemoryUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryFree", wireType)
			}
			m.MemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryUsedPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.MemoryUsedPercent = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryTotal", wireType)
			}
			m.SwapMemoryTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryUsed", wireType)
			}
			m.SwapMemoryUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryFree", wireType)
			}
			m.SwapMemoryFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwapMemoryFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapMemoryUsedPercent", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.SwapMemoryUsedPercent = float64(math.Float64frombits(v))
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuProcRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuProcRate = float64(math.Float64frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load1 = float64(math.Float64frombits(v))
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load5", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load5 = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Load15", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Load15 = float64(math.Float64frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskTotal", wireType)
			}
			m.DiskTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskTotal |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsed", wireType)
			}
			m.DiskUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskFree", wireType)
			}
			m.DiskFree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskFree |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskProcRate", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.DiskProcRate = float64(math.Float64frombits(v))
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskReadBytePerSec", wireType)
			}
			m.DiskReadBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskReadBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskWriteBytePerSec", wireType)
			}
			m.DiskWriteBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskWriteBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIoInBytePerSec", wireType)
			}
			m.NetIoInBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetIoInBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIoOutBytePerSec", wireType)
			}
			m.NetIoOutBytePerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetIoOutBytePerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTcpConnections", wireType)
			}
			m.NetTcpConnections = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTcpConnections |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetTcpActiveOpensPerSec", wireType)
			}
			m.NetTcpActiveOpensPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetTcpActiveOpensPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStats
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ops", wireType)
			}
			m.Ops = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ops |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesInPerSec", wireType)
			}
			m.BytesInPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesInPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesOutPerSec", wireType)
			}
			m.BytesOutPerSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesOutPerSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCommandsProcessed", wireType)
			}
			m.TotalCommandsProcessed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCommandsProcessed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyspaceMisses", wireType)
			}
			m.KeyspaceMisses = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStats
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyspaceMisses |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStats(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStats
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStats(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStats
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStats
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStats
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStats
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStats(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStats = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStats   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stats.proto", fileDescriptorStats) }

var fileDescriptorStats = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x55, 0xcd, 0x6f, 0x1b, 0x45,
	0x14, 0xf7, 0xb6, 0xae, 0x13, 0x3f, 0x27, 0x4e, 0x32, 0x49, 0x93, 0xa5, 0x85, 0x4d, 0xb1, 0x10,
	0x0d, 0x08, 0x52, 0xb5, 0x25, 0x2a, 0x17, 0x24, 0x48, 0x50, 0x85, 0x0f, 0x25, 0xd6, 0x26, 0x80,
	0xc4, 0x65, 0x35, 0xde, 0x1d, 0xbb, 0xab, 0x7a, 0x67, 0x46, 0x3b, 0xb3, 0x4d, 0xcd, 0x89, 0x23,
	0x47, 0xfe, 0x05, 0x6e, 0xfc, 0x09, 0x5c, 0x90, 0x38, 0xe6, 0xc8, 0x11, 0x09, 0xa9, 0xaa, 0xcd,
	0x19, 0x89, 0x23, 0xe2, 0x84, 0xde, 0x9b, 0x5d, 0x7f, 0x04, 0x71, 0x9b, 0xf7, 0xfb, 0x98, 0xf7,
	0xe1, 0x37, 0x6b, 0x68, 0x19, 0xcb, 0xad, 0x39, 0xd4, 0xb9, 0xb2, 0xea, 0xd6, 0xfb, 0xc3, 0xd4,
	0x3e, 0x2d, 0xfa, 0x87, 0xb1, 0xca, 0xee, 0x0d, 0xd5, 0x50, 0xdd, 0x23, 0xb8, 0x5f, 0x0c, 0x28,
	0xa2, 0x80, 0x4e, 0x4e, 0xde, 0xf9, 0xce, 0x83, 0x56, 0x58, 0x48, 0x9b, 0x66, 0xa2, 0x2b, 0x07,
	0x8a, 0xed, 0x43, 0x8b, 0x6b, 0x1d, 0x3d, 0x17, 0xb9, 0x49, 0x95, 0xf4, 0xbd, 0x3b, 0xde, 0x41,
	0x33, 0x04, 0xae, 0xf5, 0x97, 0x0e, 0x61, 0x6f, 0x00, 0x18, 0xcb, 0x73, 0x1b, 0xa1, 0xc5, 0xbf,
	0x46, 0x7c, 0x93, 0x90, 0xf3, 0x34, 0x13, 0x48, 0x0f, 0xd5, 0xcc, 0x7e, 0xdd, 0xd1, 0x43, 0x55,
	0xb9, 0x6f, 0xc1, 0xaa, 0x1e, 0x71, 0x3b, 0x50, 0x79, 0xe6, 0xd7, 0x89, 0x9c, 0xc5, 0x9d, 0x1f,
	0x3c, 0x80, 0x90, 0x0f, 0xec, 0x99, 0xe5, 0xb6, 0x30, 0x8c, 0x41, 0xdd, 0x8a, 0x3c, 0xa3, 0x12,
	0xea, 0x21, 0x9d, 0xd9, 0x0e, 0xdc, 0x48, 0x65, 0x22, 0x5e, 0x50, 0xde, 0x7a, 0xe8, 0x02, 0xb6,
	0x0b, 0x8d, 0x58, 0x65, 0x59, 0x6a, 0x29, 0x5f, 0x3d, 0x2c, 0x23, 0xe6, 0xc3, 0x0a, 0xd7, 0x7a,
	0x94, 0x8a, 0x84, 0x72, 0xd5, 0xc3, 0x2a, 0x64, 0x8f, 0xa0, 0x39, 0x50, 0xa3, 0x91, 0xba, 0x10,
	0xb9, 0xf1, 0x6f, 0xdc, 0xb9, 0x7e, 0xd0, 0x7a, 0xb0, 0x7d, 0x88, 0xb9, 0x1f, 0x97, 0xa8, 0xab,
	0xe1, 0xb8, 0x7e, 0xf9, 0x72, 0xbf, 0x16, 0xce, 0xb5, 0x9d, 0x9f, 0x3d, 0x60, 0xff, 0xd5, 0xb1,
	0xf7, 0xa0, 0x21, 0x55, 0x22, 0xba, 0x9f, 0x52, 0xb5, 0xeb, 0xc7, 0x3b, 0xd3, 0x97, 0xfb, 0x8d,
	0xcf, 0x09, 0xf9, 0x67, 0x76, 0x0a, 0x4b, 0x0d, 0x76, 0x91, 0x71, 0x1b, 0x3f, 0xad, 0xba, 0xa0,
	0xe0, 0x7f, 0xbb, 0x60, 0x50, 0x97, 0xe2, 0x85, 0x2d, 0x5b, 0xa0, 0x33, 0x7b, 0x13, 0xd6, 0x12,
	0x75, 0x21, 0x23, 0x23, 0x62, 0x25, 0x13, 0x6c, 0x01, 0xb9, 0x16, 0x62, 0x67, 0x0e, 0xc2, 0x24,
	0xb8, 0x16, 0xc2, 0x6f, 0xd0, 0x98, 0x5d, 0xd0, 0xf9, 0x7d, 0x05, 0xd6, 0xb0, 0x9a, 0xb3, 0xb1,
	0xc1, 0xd2, 0x0d, 0xde, 0x94, 0x89, 0x4c, 0xe5, 0xe3, 0xc8, 0x2a, 0xcb, 0x47, 0xe5, 0xb4, 0x5b,
	0x0e, 0x3b, 0x47, 0x88, 0xbd, 0x0d, 0x1b, 0xa5, 0xa4, 0x30, 0x22, 0x89, 0x72, 0x63, 0xca, 0xc2,
	0xd7, 0x1d, 0xfc, 0x85, 0x11, 0x49, 0x68, 0x0c, 0xae, 0xce, 0x82, 0xae, 0xec, 0x02, 0xe6, 0x9a,
	0x05, 0xc1, 0x20, 0x17, 0xa2, 0x6c, 0xa8, 0x14, 0x3c, 0xce, 0x85, 0x60, 0x87, 0xb0, 0xbd, 0x98,
	0x49, 0x8b, 0x3c, 0x16, 0xd2, 0x52, 0x77, 0x5e, 0xb8, 0x35, 0xbf, 0xa9, 0xe7, 0x08, 0xf6, 0x2e,
	0x6c, 0x99, 0x0b, 0xae, 0xa3, 0xa5, 0x0e, 0x1a, 0x74, 0xed, 0x06, 0x12, 0x4f, 0x16, 0xba, 0x38,
	0x80, 0xcd, 0x45, 0x2d, 0x95, 0xb8, 0x42, 0xd2, 0xf6, 0x5c, 0x4a, 0x65, 0x5e, 0x51, 0x52, 0xad,
	0xab, 0x57, 0x95, 0x54, 0xef, 0x23, 0xf0, 0xaf, 0xde, 0x39, 0x2b, 0xba, 0x49, 0x45, 0xdf, 0x5c,
	0xbe, 0xbb, 0x2a, 0xbc, 0x03, 0xeb, 0xb1, 0x2e, 0x22, 0x9d, 0xab, 0x38, 0xca, 0xf1, 0x47, 0x02,
	0x52, 0xb7, 0x62, 0x5d, 0xf4, 0x72, 0x15, 0x87, 0xdc, 0x0a, 0x76, 0x1b, 0x9a, 0xa8, 0x89, 0x55,
	0x21, 0xad, 0xdf, 0xc2, 0xb5, 0x0a, 0x57, 0x63, 0x5d, 0x9c, 0x60, 0x8c, 0xbf, 0xee, 0x48, 0xf1,
	0xe4, 0xbe, 0xbf, 0x46, 0x46, 0x17, 0x54, 0xe8, 0x91, 0xbf, 0x3e, 0x47, 0x8f, 0x70, 0xb1, 0x88,
	0x3e, 0xf2, 0xdb, 0x04, 0x97, 0x11, 0x3e, 0xd5, 0x24, 0x35, 0xcf, 0xca, 0xb1, 0x6d, 0x50, 0x87,
	0x4d, 0x44, 0xdc, 0xc0, 0x6e, 0x03, 0x05, 0x6e, 0x52, 0x9b, 0xc4, 0xae, 0x22, 0x40, 0x33, 0xaa,
	0x48, 0x1a, 0xce, 0xd6, 0x9c, 0xa4, 0xb1, 0xbc, 0x05, 0x6d, 0x22, 0xe7, 0xed, 0x31, 0x4a, 0xbc,
	0x86, 0xe8, 0xac, 0xbf, 0x07, 0xb0, 0x4b, 0xaa, 0x5c, 0xf0, 0x24, 0xea, 0x8f, 0xad, 0xc0, 0xd1,
	0xe1, 0x46, 0xfb, 0xdb, 0x74, 0x1f, 0x43, 0x36, 0x14, 0x3c, 0x39, 0x1e, 0x5b, 0xd1, 0x13, 0xf9,
	0x99, 0x88, 0xd9, 0x07, 0xb0, 0x47, 0x9e, 0x8b, 0x3c, 0xb5, 0x62, 0xd9, 0xb4, 0x43, 0xa6, 0x6d,
	0xa4, 0xbf, 0x42, 0x76, 0xc1, 0x75, 0x1f, 0x76, 0xa5, 0xb0, 0x51, 0xaa, 0xa2, 0x54, 0x2e, 0x9b,
	0x6e, 0x92, 0x69, 0x4b, 0x0a, 0xdb, 0x55, 0x5d, 0xb9, 0x60, 0x79, 0x08, 0x7b, 0xa5, 0x45, 0x15,
	0x76, 0xd9, 0xb3, 0xeb, 0xaa, 0x23, 0xcf, 0x69, 0x61, 0x17, 0x4c, 0x87, 0xb0, 0x8d, 0x26, 0x1b,
	0xeb, 0x28, 0x56, 0x52, 0x8a, 0xd8, 0xa6, 0x4a, 0x1a, 0x7f, 0x8f, 0x7e, 0x3b, 0x4c, 0x72, 0x1e,
	0xeb, 0x93, 0x39, 0xc1, 0x3e, 0x82, 0xd7, 0x2b, 0x3d, 0x8f, 0x6d, 0xfa, 0x5c, 0x44, 0x4a, 0x0b,
	0x69, 0x66, 0x99, 0x7c, 0xca, 0xb4, 0xe7, 0x8c, 0x9f, 0x90, 0xe2, 0x14, 0x05, 0x65, 0xba, 0x4d,
	0xb8, 0xae, 0xb4, 0xf1, 0x5f, 0x23, 0x15, 0x1e, 0x3b, 0x7f, 0x7a, 0xd0, 0xee, 0xf1, 0xdc, 0xa6,
	0x78, 0xbf, 0x7b, 0xdf, 0x0c, 0xea, 0x26, 0xfd, 0x46, 0x54, 0x5f, 0x51, 0x3c, 0x57, 0xc6, 0x6b,
	0x33, 0x23, 0xbb, 0x0b, 0x9b, 0xd8, 0xa3, 0xc1, 0x01, 0x55, 0xd9, 0xdd, 0xfb, 0x5d, 0x27, 0xbc,
	0x2b, 0xcb, 0x9c, 0xef, 0xc0, 0x96, 0x13, 0xe2, 0x58, 0x2a, 0xa5, 0x7b, 0xc8, 0x6d, 0x22, 0x4e,
	0x0b, 0x5b, 0x4a, 0x3f, 0x04, 0x9f, 0x36, 0x2b, 0xc2, 0xef, 0x18, 0x97, 0x89, 0xa1, 0x7d, 0x10,
	0x06, 0xd7, 0xc9, 0x7d, 0xaf, 0x76, 0x89, 0x3f, 0x29, 0xe9, 0x5e, 0xc5, 0xb2, 0xbb, 0xb0, 0xf1,
	0x4c, 0x8c, 0x8d, 0xe6, 0xb1, 0x88, 0xb2, 0xd4, 0x18, 0x61, 0xca, 0x47, 0xdd, 0xae, 0xe0, 0x27,
	0x84, 0x1e, 0x7f, 0x7c, 0x39, 0x09, 0x6a, 0xbf, 0x4d, 0x82, 0xda, 0xab, 0x49, 0x50, 0xfb, 0x6b,
	0x12, 0x78, 0x7f, 0x4f, 0x02, 0xef, 0xdb, 0x69, 0xe0, 0xfd, 0x38, 0x0d, 0xbc, 0x9f, 0xa6, 0x41,
	0xed, 0x97, 0x69, 0x50, 0xbb, 0x9c, 0x06, 0xde, 0xaf, 0xd3, 0xc0, 0x7b, 0x35, 0x0d, 0xbc, 0xef,
	0xff, 0x08, 0x6a, 0x9f, 0x79, 0x5f, 0xaf, 0x66, 0xdc, 0x58, 0x91, 0xeb, 0x7e, 0xbf, 0x41, 0xff,
	0x82, 0x0f, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xae, 0x9e, 0x3c, 0x35, 0x43, 0x07, 0x00, 0x00,
}

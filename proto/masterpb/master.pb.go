// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: master.proto

/*
	Package masterpb is a generated protocol buffer package.

	It is generated from these files:
		master.proto

	It has these top-level messages:
		Route
		GetDBRequest
		GetDBResponse
		GetSpaceRequest
		GetSpaceResponse
		GetRouteRequest
		GetRouteResponse
		PSRegisterRequest
		PSRegisterResponse
		PSConfig
		PSHeartbeatRequest
		PSHeartbeatResponse
		PartitionInfo
*/
package masterpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	meta "github.com/tiglabs/baud/proto/metapb"

	stats "."

	github_com_tiglabs_baud_proto_metapb "github.com/tiglabs/baud/proto/metapb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	strings "strings"

	reflect "reflect"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Route struct {
	meta.Partition `protobuf:"bytes,1,opt,name=partition,embedded=partition" json:"partition"`
}

func (m *Route) Reset()                    { *m = Route{} }
func (*Route) ProtoMessage()               {}
func (*Route) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{0} }

type GetDBRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	DBName             string `protobuf:"bytes,2,opt,name=DB_name,json=DBName,proto3" json:"DB_name,omitempty"`
}

func (m *GetDBRequest) Reset()                    { *m = GetDBRequest{} }
func (*GetDBRequest) ProtoMessage()               {}
func (*GetDBRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{1} }

type GetDBResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Db                  meta.DB `protobuf:"bytes,2,opt,name=db" json:"db"`
}

func (m *GetDBResponse) Reset()                    { *m = GetDBResponse{} }
func (*GetDBResponse) ProtoMessage()               {}
func (*GetDBResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{2} }

type GetSpaceRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	ID                 DBID   `protobuf:"varint,2,opt,name=db_id,json=dbId,proto3,casttype=DBID" json:"db_id,omitempty"`
	SpaceName          string `protobuf:"bytes,3,opt,name=Space_name,json=SpaceName,proto3" json:"Space_name,omitempty"`
}

func (m *GetSpaceRequest) Reset()                    { *m = GetSpaceRequest{} }
func (*GetSpaceRequest) ProtoMessage()               {}
func (*GetSpaceRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{3} }

type GetSpaceResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Space               meta.Space `protobuf:"bytes,2,opt,name=space" json:"space"`
}

func (m *GetSpaceResponse) Reset()                    { *m = GetSpaceResponse{} }
func (*GetSpaceResponse) ProtoMessage()               {}
func (*GetSpaceResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{4} }

type GetRouteRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Space              github_com_tiglabs_baud_proto_metapb.SpaceID `protobuf:"varint,2,opt,name=space,proto3,casttype=github.com/tiglabs/baud/proto/metapb.SpaceID" json:"space,omitempty"`
	Slot               github_com_tiglabs_baud_proto_metapb.SlotID  `protobuf:"varint,3,opt,name=slot,proto3,casttype=github.com/tiglabs/baud/proto/metapb.SlotID" json:"slot,omitempty"`
}

func (m *GetRouteRequest) Reset()                    { *m = GetRouteRequest{} }
func (*GetRouteRequest) ProtoMessage()               {}
func (*GetRouteRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{5} }

type GetRouteResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	Routes              []Route `protobuf:"bytes,2,rep,name=routes" json:"routes"`
}

func (m *GetRouteResponse) Reset()                    { *m = GetRouteResponse{} }
func (*GetRouteResponse) ProtoMessage()               {}
func (*GetRouteResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{6} }

type PSRegisterRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID             github_com_tiglabs_baud_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baud/proto/metapb.NodeID" json:"nodeID,omitempty"`
	Ip                 string                                      `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	stats.RuntimeInfo  `protobuf:"bytes,4,opt,name=runtime_info,json=runtimeInfo,embedded=runtime_info" json:"runtime_info"`
}

func (m *PSRegisterRequest) Reset()                    { *m = PSRegisterRequest{} }
func (*PSRegisterRequest) ProtoMessage()               {}
func (*PSRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{7} }

type PSRegisterResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID              github_com_tiglabs_baud_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baud/proto/metapb.NodeID" json:"nodeID,omitempty"`
	PSConfig            `protobuf:"bytes,3,opt,name=config,embedded=config" json:"config"`
	Partitions          []meta.Partition `protobuf:"bytes,4,rep,name=partitions" json:"partitions"`
}

func (m *PSRegisterResponse) Reset()                    { *m = PSRegisterResponse{} }
func (*PSRegisterResponse) ProtoMessage()               {}
func (*PSRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{8} }

type PSConfig struct {
	RPCPort                 int    `protobuf:"varint,1,opt,name=rpc_port,json=rpcPort,proto3,casttype=int" json:"rpc_port,omitempty"`
	AdminPort               int    `protobuf:"varint,2,opt,name=admin_port,json=adminPort,proto3,casttype=int" json:"admin_port,omitempty"`
	HeartbeatInterval       int    `protobuf:"varint,3,opt,name=heartbeat_interval,json=heartbeatInterval,proto3,casttype=int" json:"heartbeat_interval,omitempty"`
	RaftHeartbeatPort       int    `protobuf:"varint,4,opt,name=raft_heartbeat_port,json=raftHeartbeatPort,proto3,casttype=int" json:"raft_heartbeat_port,omitempty"`
	RaftReplicatePort       int    `protobuf:"varint,5,opt,name=raft_replicate_port,json=raftReplicatePort,proto3,casttype=int" json:"raft_replicate_port,omitempty"`
	RaftHeartbeatInterval   int    `protobuf:"varint,6,opt,name=raft_heartbeat_interval,json=raftHeartbeatInterval,proto3,casttype=int" json:"raft_heartbeat_interval,omitempty"`
	RaftRetainLogs          uint64 `protobuf:"varint,7,opt,name=raft_retain_logs,json=raftRetainLogs,proto3" json:"raft_retain_logs,omitempty"`
	RaftReplicaConcurrency  int    `protobuf:"varint,8,opt,name=raft_replica_concurrency,json=raftReplicaConcurrency,proto3,casttype=int" json:"raft_replica_concurrency,omitempty"`
	RaftSnapshotConcurrency int    `protobuf:"varint,9,opt,name=raft_snapshot_concurrency,json=raftSnapshotConcurrency,proto3,casttype=int" json:"raft_snapshot_concurrency,omitempty"`
}

func (m *PSConfig) Reset()                    { *m = PSConfig{} }
func (*PSConfig) ProtoMessage()               {}
func (*PSConfig) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{9} }

type PSHeartbeatRequest struct {
	meta.RequestHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
	NodeID             github_com_tiglabs_baud_proto_metapb.NodeID `protobuf:"varint,2,opt,name=nodeID,proto3,casttype=github.com/tiglabs/baud/proto/metapb.NodeID" json:"nodeID,omitempty"`
	Partitions         []PartitionInfo                             `protobuf:"bytes,3,rep,name=partitions" json:"partitions"`
	SysStats           stats.NodeSysStats                          `protobuf:"bytes,4,opt,name=sys_stats,json=sysStats" json:"sys_stats"`
}

func (m *PSHeartbeatRequest) Reset()                    { *m = PSHeartbeatRequest{} }
func (*PSHeartbeatRequest) ProtoMessage()               {}
func (*PSHeartbeatRequest) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{10} }

type PSHeartbeatResponse struct {
	meta.ResponseHeader `protobuf:"bytes,1,opt,name=header,embedded=header" json:"header"`
}

func (m *PSHeartbeatResponse) Reset()                    { *m = PSHeartbeatResponse{} }
func (*PSHeartbeatResponse) ProtoMessage()               {}
func (*PSHeartbeatResponse) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{11} }

type PartitionInfo struct {
	ID         github_com_tiglabs_baud_proto_metapb.PartitionID `protobuf:"varint,1,opt,name=id,proto3,casttype=github.com/tiglabs/baud/proto/metapb.PartitionID" json:"id,omitempty"`
	IsLeader   bool                                             `protobuf:"varint,2,opt,name=is_leader,json=isLeader,proto3" json:"is_leader,omitempty"`
	Status     meta.PartitionStatus                             `protobuf:"varint,3,opt,name=status,proto3,enum=PartitionStatus" json:"status,omitempty"`
	Epoch      meta.PartitionEpoch                              `protobuf:"bytes,4,opt,name=epoch" json:"epoch"`
	RaftStatus *stats.RaftStatus                                `protobuf:"bytes,5,opt,name=raft_status,json=raftStatus" json:"raft_status,omitempty"`
	Statistics stats.PartitionStats                             `protobuf:"bytes,6,opt,name=statistics" json:"statistics"`
}

func (m *PartitionInfo) Reset()                    { *m = PartitionInfo{} }
func (*PartitionInfo) ProtoMessage()               {}
func (*PartitionInfo) Descriptor() ([]byte, []int) { return fileDescriptorMaster, []int{12} }

func init() {
	proto.RegisterType((*Route)(nil), "Route")
	proto.RegisterType((*GetDBRequest)(nil), "GetDBRequest")
	proto.RegisterType((*GetDBResponse)(nil), "GetDBResponse")
	proto.RegisterType((*GetSpaceRequest)(nil), "GetSpaceRequest")
	proto.RegisterType((*GetSpaceResponse)(nil), "GetSpaceResponse")
	proto.RegisterType((*GetRouteRequest)(nil), "GetRouteRequest")
	proto.RegisterType((*GetRouteResponse)(nil), "GetRouteResponse")
	proto.RegisterType((*PSRegisterRequest)(nil), "PSRegisterRequest")
	proto.RegisterType((*PSRegisterResponse)(nil), "PSRegisterResponse")
	proto.RegisterType((*PSConfig)(nil), "PSConfig")
	proto.RegisterType((*PSHeartbeatRequest)(nil), "PSHeartbeatRequest")
	proto.RegisterType((*PSHeartbeatResponse)(nil), "PSHeartbeatResponse")
	proto.RegisterType((*PartitionInfo)(nil), "PartitionInfo")
}
func (this *Route) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Route)
	if !ok {
		that2, ok := that.(Route)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Partition.Equal(&that1.Partition) {
		return false
	}
	return true
}
func (this *GetDBRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDBRequest)
	if !ok {
		that2, ok := that.(GetDBRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.DBName != that1.DBName {
		return false
	}
	return true
}
func (this *GetDBResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetDBResponse)
	if !ok {
		that2, ok := that.(GetDBResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !this.Db.Equal(&that1.Db) {
		return false
	}
	return true
}
func (this *GetSpaceRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpaceRequest)
	if !ok {
		that2, ok := that.(GetSpaceRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.SpaceName != that1.SpaceName {
		return false
	}
	return true
}
func (this *GetSpaceResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetSpaceResponse)
	if !ok {
		that2, ok := that.(GetSpaceResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if !this.Space.Equal(&that1.Space) {
		return false
	}
	return true
}
func (this *GetRouteRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRouteRequest)
	if !ok {
		that2, ok := that.(GetRouteRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.Space != that1.Space {
		return false
	}
	if this.Slot != that1.Slot {
		return false
	}
	return true
}
func (this *GetRouteResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetRouteResponse)
	if !ok {
		that2, ok := that.(GetRouteResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if len(this.Routes) != len(that1.Routes) {
		return false
	}
	for i := range this.Routes {
		if !this.Routes[i].Equal(&that1.Routes[i]) {
			return false
		}
	}
	return true
}
func (this *PSRegisterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSRegisterRequest)
	if !ok {
		that2, ok := that.(PSRegisterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Ip != that1.Ip {
		return false
	}
	if !this.RuntimeInfo.Equal(&that1.RuntimeInfo) {
		return false
	}
	return true
}
func (this *PSRegisterResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSRegisterResponse)
	if !ok {
		that2, ok := that.(PSRegisterResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if !this.PSConfig.Equal(&that1.PSConfig) {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(&that1.Partitions[i]) {
			return false
		}
	}
	return true
}
func (this *PSConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSConfig)
	if !ok {
		that2, ok := that.(PSConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RPCPort != that1.RPCPort {
		return false
	}
	if this.AdminPort != that1.AdminPort {
		return false
	}
	if this.HeartbeatInterval != that1.HeartbeatInterval {
		return false
	}
	if this.RaftHeartbeatPort != that1.RaftHeartbeatPort {
		return false
	}
	if this.RaftReplicatePort != that1.RaftReplicatePort {
		return false
	}
	if this.RaftHeartbeatInterval != that1.RaftHeartbeatInterval {
		return false
	}
	if this.RaftRetainLogs != that1.RaftRetainLogs {
		return false
	}
	if this.RaftReplicaConcurrency != that1.RaftReplicaConcurrency {
		return false
	}
	if this.RaftSnapshotConcurrency != that1.RaftSnapshotConcurrency {
		return false
	}
	return true
}
func (this *PSHeartbeatRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSHeartbeatRequest)
	if !ok {
		that2, ok := that.(PSHeartbeatRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.RequestHeader.Equal(&that1.RequestHeader) {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if len(this.Partitions) != len(that1.Partitions) {
		return false
	}
	for i := range this.Partitions {
		if !this.Partitions[i].Equal(&that1.Partitions[i]) {
			return false
		}
	}
	if !this.SysStats.Equal(&that1.SysStats) {
		return false
	}
	return true
}
func (this *PSHeartbeatResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PSHeartbeatResponse)
	if !ok {
		that2, ok := that.(PSHeartbeatResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ResponseHeader.Equal(&that1.ResponseHeader) {
		return false
	}
	return true
}
func (this *PartitionInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartitionInfo)
	if !ok {
		that2, ok := that.(PartitionInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.IsLeader != that1.IsLeader {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if !this.Epoch.Equal(&that1.Epoch) {
		return false
	}
	if !this.RaftStatus.Equal(that1.RaftStatus) {
		return false
	}
	if !this.Statistics.Equal(&that1.Statistics) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MasterRpc service

type MasterRpcClient interface {
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	PSRegister(ctx context.Context, in *PSRegisterRequest, opts ...grpc.CallOption) (*PSRegisterResponse, error)
	PSHeartbeat(ctx context.Context, in *PSHeartbeatRequest, opts ...grpc.CallOption) (*PSHeartbeatResponse, error)
	GetDB(ctx context.Context, in *GetDBRequest, opts ...grpc.CallOption) (*GetDBResponse, error)
	GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*GetSpaceResponse, error)
}

type masterRpcClient struct {
	cc *grpc.ClientConn
}

func NewMasterRpcClient(cc *grpc.ClientConn) MasterRpcClient {
	return &masterRpcClient{cc}
}

func (c *masterRpcClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := grpc.Invoke(ctx, "/MasterRpc/GetRoute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) PSRegister(ctx context.Context, in *PSRegisterRequest, opts ...grpc.CallOption) (*PSRegisterResponse, error) {
	out := new(PSRegisterResponse)
	err := grpc.Invoke(ctx, "/MasterRpc/PSRegister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) PSHeartbeat(ctx context.Context, in *PSHeartbeatRequest, opts ...grpc.CallOption) (*PSHeartbeatResponse, error) {
	out := new(PSHeartbeatResponse)
	err := grpc.Invoke(ctx, "/MasterRpc/PSHeartbeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) GetDB(ctx context.Context, in *GetDBRequest, opts ...grpc.CallOption) (*GetDBResponse, error) {
	out := new(GetDBResponse)
	err := grpc.Invoke(ctx, "/MasterRpc/GetDB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterRpcClient) GetSpace(ctx context.Context, in *GetSpaceRequest, opts ...grpc.CallOption) (*GetSpaceResponse, error) {
	out := new(GetSpaceResponse)
	err := grpc.Invoke(ctx, "/MasterRpc/GetSpace", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MasterRpc service

type MasterRpcServer interface {
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	PSRegister(context.Context, *PSRegisterRequest) (*PSRegisterResponse, error)
	PSHeartbeat(context.Context, *PSHeartbeatRequest) (*PSHeartbeatResponse, error)
	GetDB(context.Context, *GetDBRequest) (*GetDBResponse, error)
	GetSpace(context.Context, *GetSpaceRequest) (*GetSpaceResponse, error)
}

func RegisterMasterRpcServer(s *grpc.Server, srv MasterRpcServer) {
	s.RegisterService(&_MasterRpc_serviceDesc, srv)
}

func _MasterRpc_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MasterRpc/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_PSRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).PSRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MasterRpc/PSRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).PSRegister(ctx, req.(*PSRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_PSHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PSHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).PSHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MasterRpc/PSHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).PSHeartbeat(ctx, req.(*PSHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_GetDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).GetDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MasterRpc/GetDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).GetDB(ctx, req.(*GetDBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterRpc_GetSpace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterRpcServer).GetSpace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MasterRpc/GetSpace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterRpcServer).GetSpace(ctx, req.(*GetSpaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MasterRpc",
	HandlerType: (*MasterRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoute",
			Handler:    _MasterRpc_GetRoute_Handler,
		},
		{
			MethodName: "PSRegister",
			Handler:    _MasterRpc_PSRegister_Handler,
		},
		{
			MethodName: "PSHeartbeat",
			Handler:    _MasterRpc_PSHeartbeat_Handler,
		},
		{
			MethodName: "GetDB",
			Handler:    _MasterRpc_GetDB_Handler,
		},
		{
			MethodName: "GetSpace",
			Handler:    _MasterRpc_GetSpace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "master.proto",
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.Partition.Size()))
	n1, err := m.Partition.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	return i, nil
}

func (m *GetDBRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n2, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.DBName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.DBName)))
		i += copy(dAtA[i:], m.DBName)
	}
	return i, nil
}

func (m *GetDBResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDBResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n3, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.Db.Size()))
	n4, err := m.Db.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	return i, nil
}

func (m *GetSpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n5, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.ID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.ID))
	}
	if len(m.SpaceName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.SpaceName)))
		i += copy(dAtA[i:], m.SpaceName)
	}
	return i, nil
}

func (m *GetSpaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSpaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n6, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	dAtA[i] = 0x12
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.Space.Size()))
	n7, err := m.Space.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	return i, nil
}

func (m *GetRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n8, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	if m.Space != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Space))
	}
	if m.Slot != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Slot))
	}
	return i, nil
}

func (m *GetRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n9, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	if len(m.Routes) > 0 {
		for _, msg := range m.Routes {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PSRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n10, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Ip) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMaster(dAtA, i, uint64(len(m.Ip)))
		i += copy(dAtA[i:], m.Ip)
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RuntimeInfo.Size()))
	n11, err := m.RuntimeInfo.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	return i, nil
}

func (m *PSRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n12, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n12
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.NodeID))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.PSConfig.Size()))
	n13, err := m.PSConfig.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n13
	if len(m.Partitions) > 0 {
		for _, msg := range m.Partitions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PSConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RPCPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RPCPort))
	}
	if m.AdminPort != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.AdminPort))
	}
	if m.HeartbeatInterval != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.HeartbeatInterval))
	}
	if m.RaftHeartbeatPort != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftHeartbeatPort))
	}
	if m.RaftReplicatePort != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftReplicatePort))
	}
	if m.RaftHeartbeatInterval != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftHeartbeatInterval))
	}
	if m.RaftRetainLogs != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftRetainLogs))
	}
	if m.RaftReplicaConcurrency != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftReplicaConcurrency))
	}
	if m.RaftSnapshotConcurrency != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftSnapshotConcurrency))
	}
	return i, nil
}

func (m *PSHeartbeatRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSHeartbeatRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.RequestHeader.Size()))
	n14, err := m.RequestHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n14
	if m.NodeID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.NodeID))
	}
	if len(m.Partitions) > 0 {
		for _, msg := range m.Partitions {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintMaster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.SysStats.Size()))
	n15, err := m.SysStats.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n15
	return i, nil
}

func (m *PSHeartbeatResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PSHeartbeatResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.ResponseHeader.Size()))
	n16, err := m.ResponseHeader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n16
	return i, nil
}

func (m *PartitionInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartitionInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.ID))
	}
	if m.IsLeader {
		dAtA[i] = 0x10
		i++
		if m.IsLeader {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Status != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.Status))
	}
	dAtA[i] = 0x22
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.Epoch.Size()))
	n17, err := m.Epoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n17
	if m.RaftStatus != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMaster(dAtA, i, uint64(m.RaftStatus.Size()))
		n18, err := m.RaftStatus.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	dAtA[i] = 0x32
	i++
	i = encodeVarintMaster(dAtA, i, uint64(m.Statistics.Size()))
	n19, err := m.Statistics.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	return i, nil
}

func encodeVarintMaster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRoute(r randyMaster, easy bool) *Route {
	this := &Route{}
	v1 := meta.NewPopulatedPartition(r, easy)
	this.Partition = *v1
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDBRequest(r randyMaster, easy bool) *GetDBRequest {
	this := &GetDBRequest{}
	v2 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v2
	this.DBName = string(randStringMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetDBResponse(r randyMaster, easy bool) *GetDBResponse {
	this := &GetDBResponse{}
	v3 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v3
	v4 := meta.NewPopulatedDB(r, easy)
	this.Db = *v4
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpaceRequest(r randyMaster, easy bool) *GetSpaceRequest {
	this := &GetSpaceRequest{}
	v5 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v5
	this.ID = DBID(r.Uint32())
	this.SpaceName = string(randStringMaster(r))
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetSpaceResponse(r randyMaster, easy bool) *GetSpaceResponse {
	this := &GetSpaceResponse{}
	v6 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v6
	v7 := meta.NewPopulatedSpace(r, easy)
	this.Space = *v7
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRouteRequest(r randyMaster, easy bool) *GetRouteRequest {
	this := &GetRouteRequest{}
	v8 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v8
	this.Space = github_com_tiglabs_baud_proto_metapb.SpaceID(r.Uint32())
	this.Slot = github_com_tiglabs_baud_proto_metapb.SlotID(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetRouteResponse(r randyMaster, easy bool) *GetRouteResponse {
	this := &GetRouteResponse{}
	v9 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v9
	if r.Intn(10) != 0 {
		v10 := r.Intn(5)
		this.Routes = make([]Route, v10)
		for i := 0; i < v10; i++ {
			v11 := NewPopulatedRoute(r, easy)
			this.Routes[i] = *v11
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSRegisterRequest(r randyMaster, easy bool) *PSRegisterRequest {
	this := &PSRegisterRequest{}
	v12 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v12
	this.NodeID = github_com_tiglabs_baud_proto_metapb.NodeID(r.Uint32())
	this.Ip = string(randStringMaster(r))
	v13 := stats.NewPopulatedRuntimeInfo(r, easy)
	this.RuntimeInfo = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSRegisterResponse(r randyMaster, easy bool) *PSRegisterResponse {
	this := &PSRegisterResponse{}
	v14 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v14
	this.NodeID = github_com_tiglabs_baud_proto_metapb.NodeID(r.Uint32())
	v15 := NewPopulatedPSConfig(r, easy)
	this.PSConfig = *v15
	if r.Intn(10) != 0 {
		v16 := r.Intn(5)
		this.Partitions = make([]meta.Partition, v16)
		for i := 0; i < v16; i++ {
			v17 := meta.NewPopulatedPartition(r, easy)
			this.Partitions[i] = *v17
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSConfig(r randyMaster, easy bool) *PSConfig {
	this := &PSConfig{}
	this.RPCPort = int(r.Uint32())
	this.AdminPort = int(r.Uint32())
	this.HeartbeatInterval = int(r.Uint32())
	this.RaftHeartbeatPort = int(r.Uint32())
	this.RaftReplicatePort = int(r.Uint32())
	this.RaftHeartbeatInterval = int(r.Uint32())
	this.RaftRetainLogs = uint64(uint64(r.Uint32()))
	this.RaftReplicaConcurrency = int(r.Uint32())
	this.RaftSnapshotConcurrency = int(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSHeartbeatRequest(r randyMaster, easy bool) *PSHeartbeatRequest {
	this := &PSHeartbeatRequest{}
	v18 := meta.NewPopulatedRequestHeader(r, easy)
	this.RequestHeader = *v18
	this.NodeID = github_com_tiglabs_baud_proto_metapb.NodeID(r.Uint32())
	if r.Intn(10) != 0 {
		v19 := r.Intn(5)
		this.Partitions = make([]PartitionInfo, v19)
		for i := 0; i < v19; i++ {
			v20 := NewPopulatedPartitionInfo(r, easy)
			this.Partitions[i] = *v20
		}
	}
	v21 := stats.NewPopulatedNodeSysStats(r, easy)
	this.SysStats = *v21
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPSHeartbeatResponse(r randyMaster, easy bool) *PSHeartbeatResponse {
	this := &PSHeartbeatResponse{}
	v22 := meta.NewPopulatedResponseHeader(r, easy)
	this.ResponseHeader = *v22
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPartitionInfo(r randyMaster, easy bool) *PartitionInfo {
	this := &PartitionInfo{}
	this.ID = github_com_tiglabs_baud_proto_metapb.PartitionID(r.Uint32())
	this.IsLeader = bool(bool(r.Intn(2) == 0))
	this.Status = meta.PartitionStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v23 := meta.NewPopulatedPartitionEpoch(r, easy)
	this.Epoch = *v23
	if r.Intn(10) != 0 {
		this.RaftStatus = stats.NewPopulatedRaftStatus(r, easy)
	}
	v24 := stats.NewPopulatedPartitionStats(r, easy)
	this.Statistics = *v24
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMaster interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMaster(r randyMaster) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMaster(r randyMaster) string {
	v25 := r.Intn(100)
	tmps := make([]rune, v25)
	for i := 0; i < v25; i++ {
		tmps[i] = randUTF8RuneMaster(r)
	}
	return string(tmps)
}
func randUnrecognizedMaster(r randyMaster, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMaster(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMaster(dAtA []byte, r randyMaster, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(key))
		v26 := r.Int63()
		if r.Intn(2) == 0 {
			v26 *= -1
		}
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(v26))
	case 1:
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMaster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMaster(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Route) Size() (n int) {
	var l int
	_ = l
	l = m.Partition.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *GetDBRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	l = len(m.DBName)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *GetDBResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	l = m.Db.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *GetSpaceRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.ID != 0 {
		n += 1 + sovMaster(uint64(m.ID))
	}
	l = len(m.SpaceName)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	return n
}

func (m *GetSpaceResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	l = m.Space.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *GetRouteRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.Space != 0 {
		n += 1 + sovMaster(uint64(m.Space))
	}
	if m.Slot != 0 {
		n += 1 + sovMaster(uint64(m.Slot))
	}
	return n
}

func (m *GetRouteResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	return n
}

func (m *PSRegisterRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovMaster(uint64(m.NodeID))
	}
	l = len(m.Ip)
	if l > 0 {
		n += 1 + l + sovMaster(uint64(l))
	}
	l = m.RuntimeInfo.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *PSRegisterResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovMaster(uint64(m.NodeID))
	}
	l = m.PSConfig.Size()
	n += 1 + l + sovMaster(uint64(l))
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	return n
}

func (m *PSConfig) Size() (n int) {
	var l int
	_ = l
	if m.RPCPort != 0 {
		n += 1 + sovMaster(uint64(m.RPCPort))
	}
	if m.AdminPort != 0 {
		n += 1 + sovMaster(uint64(m.AdminPort))
	}
	if m.HeartbeatInterval != 0 {
		n += 1 + sovMaster(uint64(m.HeartbeatInterval))
	}
	if m.RaftHeartbeatPort != 0 {
		n += 1 + sovMaster(uint64(m.RaftHeartbeatPort))
	}
	if m.RaftReplicatePort != 0 {
		n += 1 + sovMaster(uint64(m.RaftReplicatePort))
	}
	if m.RaftHeartbeatInterval != 0 {
		n += 1 + sovMaster(uint64(m.RaftHeartbeatInterval))
	}
	if m.RaftRetainLogs != 0 {
		n += 1 + sovMaster(uint64(m.RaftRetainLogs))
	}
	if m.RaftReplicaConcurrency != 0 {
		n += 1 + sovMaster(uint64(m.RaftReplicaConcurrency))
	}
	if m.RaftSnapshotConcurrency != 0 {
		n += 1 + sovMaster(uint64(m.RaftSnapshotConcurrency))
	}
	return n
}

func (m *PSHeartbeatRequest) Size() (n int) {
	var l int
	_ = l
	l = m.RequestHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.NodeID != 0 {
		n += 1 + sovMaster(uint64(m.NodeID))
	}
	if len(m.Partitions) > 0 {
		for _, e := range m.Partitions {
			l = e.Size()
			n += 1 + l + sovMaster(uint64(l))
		}
	}
	l = m.SysStats.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *PSHeartbeatResponse) Size() (n int) {
	var l int
	_ = l
	l = m.ResponseHeader.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func (m *PartitionInfo) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMaster(uint64(m.ID))
	}
	if m.IsLeader {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovMaster(uint64(m.Status))
	}
	l = m.Epoch.Size()
	n += 1 + l + sovMaster(uint64(l))
	if m.RaftStatus != nil {
		l = m.RaftStatus.Size()
		n += 1 + l + sovMaster(uint64(l))
	}
	l = m.Statistics.Size()
	n += 1 + l + sovMaster(uint64(l))
	return n
}

func sovMaster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMaster(x uint64) (n int) {
	return sovMaster(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Route) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Route{`,
		`Partition:` + strings.Replace(strings.Replace(this.Partition.String(), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDBRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDBRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`DBName:` + fmt.Sprintf("%v", this.DBName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetDBResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetDBResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Db:` + strings.Replace(strings.Replace(this.Db.String(), "DB", "meta.DB", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`SpaceName:` + fmt.Sprintf("%v", this.SpaceName) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetSpaceResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetSpaceResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Space:` + strings.Replace(strings.Replace(this.Space.String(), "Space", "meta.Space", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRouteRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRouteRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`Space:` + fmt.Sprintf("%v", this.Space) + `,`,
		`Slot:` + fmt.Sprintf("%v", this.Slot) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetRouteResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetRouteResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`Routes:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Routes), "Route", "Route", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSRegisterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSRegisterRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Ip:` + fmt.Sprintf("%v", this.Ip) + `,`,
		`RuntimeInfo:` + strings.Replace(strings.Replace(this.RuntimeInfo.String(), "RuntimeInfo", "stats.RuntimeInfo", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSRegisterResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSRegisterResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`PSConfig:` + strings.Replace(strings.Replace(this.PSConfig.String(), "PSConfig", "PSConfig", 1), `&`, ``, 1) + `,`,
		`Partitions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Partitions), "Partition", "meta.Partition", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSConfig) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSConfig{`,
		`RPCPort:` + fmt.Sprintf("%v", this.RPCPort) + `,`,
		`AdminPort:` + fmt.Sprintf("%v", this.AdminPort) + `,`,
		`HeartbeatInterval:` + fmt.Sprintf("%v", this.HeartbeatInterval) + `,`,
		`RaftHeartbeatPort:` + fmt.Sprintf("%v", this.RaftHeartbeatPort) + `,`,
		`RaftReplicatePort:` + fmt.Sprintf("%v", this.RaftReplicatePort) + `,`,
		`RaftHeartbeatInterval:` + fmt.Sprintf("%v", this.RaftHeartbeatInterval) + `,`,
		`RaftRetainLogs:` + fmt.Sprintf("%v", this.RaftRetainLogs) + `,`,
		`RaftReplicaConcurrency:` + fmt.Sprintf("%v", this.RaftReplicaConcurrency) + `,`,
		`RaftSnapshotConcurrency:` + fmt.Sprintf("%v", this.RaftSnapshotConcurrency) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSHeartbeatRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSHeartbeatRequest{`,
		`RequestHeader:` + strings.Replace(strings.Replace(this.RequestHeader.String(), "RequestHeader", "meta.RequestHeader", 1), `&`, ``, 1) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Partitions:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Partitions), "PartitionInfo", "PartitionInfo", 1), `&`, ``, 1) + `,`,
		`SysStats:` + strings.Replace(strings.Replace(this.SysStats.String(), "NodeSysStats", "stats.NodeSysStats", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PSHeartbeatResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PSHeartbeatResponse{`,
		`ResponseHeader:` + strings.Replace(strings.Replace(this.ResponseHeader.String(), "ResponseHeader", "meta.ResponseHeader", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartitionInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PartitionInfo{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`IsLeader:` + fmt.Sprintf("%v", this.IsLeader) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Epoch:` + strings.Replace(strings.Replace(this.Epoch.String(), "PartitionEpoch", "meta.PartitionEpoch", 1), `&`, ``, 1) + `,`,
		`RaftStatus:` + strings.Replace(fmt.Sprintf("%v", this.RaftStatus), "RaftStatus", "stats.RaftStatus", 1) + `,`,
		`Statistics:` + strings.Replace(strings.Replace(this.Statistics.String(), "PartitionStats", "stats.PartitionStats", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMaster(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDBResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDBResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDBResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Db", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Db.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (DBID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSpaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSpaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSpaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Space.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Space", wireType)
			}
			m.Space = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Space |= (github_com_tiglabs_baud_proto_metapb.SpaceID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slot", wireType)
			}
			m.Slot = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Slot |= (github_com_tiglabs_baud_proto_metapb.SlotID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baud_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ip", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ip = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RuntimeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baud_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PSConfig", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PSConfig.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, meta.Partition{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RPCPort", wireType)
			}
			m.RPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RPCPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminPort", wireType)
			}
			m.AdminPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AdminPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeartbeatInterval", wireType)
			}
			m.HeartbeatInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeartbeatInterval |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftHeartbeatPort", wireType)
			}
			m.RaftHeartbeatPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftHeartbeatPort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftReplicatePort", wireType)
			}
			m.RaftReplicatePort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftReplicatePort |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftHeartbeatInterval", wireType)
			}
			m.RaftHeartbeatInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftHeartbeatInterval |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftRetainLogs", wireType)
			}
			m.RaftRetainLogs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftRetainLogs |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftReplicaConcurrency", wireType)
			}
			m.RaftReplicaConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftReplicaConcurrency |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftSnapshotConcurrency", wireType)
			}
			m.RaftSnapshotConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaftSnapshotConcurrency |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSHeartbeatRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSHeartbeatRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSHeartbeatRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RequestHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= (github_com_tiglabs_baud_proto_metapb.NodeID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partitions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partitions = append(m.Partitions, PartitionInfo{})
			if err := m.Partitions[len(m.Partitions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SysStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SysStats.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PSHeartbeatResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PSHeartbeatResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PSHeartbeatResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ResponseHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartitionInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartitionInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartitionInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (github_com_tiglabs_baud_proto_metapb.PartitionID(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLeader", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLeader = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (meta.PartitionStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftStatus == nil {
				m.RaftStatus = &stats.RaftStatus{}
			}
			if err := m.RaftStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMaster
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMaster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMaster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMaster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMaster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMaster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMaster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMaster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMaster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMaster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMaster   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("master.proto", fileDescriptorMaster) }

var fileDescriptorMaster = []byte{
	// 1115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0x9e, 0x19, 0xff, 0xc4, 0x2e, 0xc7, 0xde, 0xa4, 0x03, 0xac, 0x37, 0x88, 0x71, 0x34, 0x20,
	0x64, 0x29, 0xbb, 0x93, 0xac, 0xf9, 0x89, 0x76, 0x39, 0x00, 0x13, 0xa3, 0x8d, 0x61, 0x59, 0xc2,
	0xf8, 0x04, 0x12, 0xb2, 0xe6, 0xa7, 0xe3, 0xb4, 0xb0, 0x67, 0x86, 0xe9, 0x36, 0x52, 0x6e, 0x70,
	0xe2, 0xca, 0x91, 0x47, 0xe0, 0x01, 0x38, 0x70, 0xe4, 0x98, 0xe3, 0x1e, 0x39, 0x59, 0x6b, 0xef,
	0x0b, 0x70, 0x84, 0x1c, 0x10, 0x9a, 0x9a, 0xb6, 0x3d, 0x76, 0x16, 0x29, 0xb2, 0x84, 0xc4, 0xc9,
	0xee, 0xea, 0xaf, 0xbe, 0xaa, 0xaf, 0xa6, 0xba, 0xbb, 0x60, 0x73, 0xe8, 0x70, 0x41, 0x63, 0x33,
	0x8a, 0x43, 0x11, 0xee, 0xde, 0xeb, 0x33, 0x71, 0x3e, 0x72, 0x4d, 0x2f, 0x1c, 0x1e, 0xf4, 0xc3,
	0x7e, 0x78, 0x80, 0x66, 0x77, 0x74, 0x86, 0x2b, 0x5c, 0xe0, 0x3f, 0x09, 0x3f, 0xc8, 0xc0, 0x05,
	0xeb, 0x0f, 0x1c, 0x97, 0x1f, 0xb8, 0xce, 0xc8, 0x4f, 0xdd, 0x0e, 0x86, 0x54, 0x38, 0x91, 0x8b,
	0x3f, 0xd2, 0xa1, 0xc2, 0x85, 0x23, 0x78, 0xba, 0x30, 0xde, 0x83, 0x82, 0x1d, 0x8e, 0x04, 0x25,
	0x2d, 0x28, 0x47, 0x4e, 0x2c, 0x98, 0x60, 0x61, 0x50, 0x57, 0xf7, 0xd4, 0x66, 0xa5, 0x05, 0xe6,
	0xe9, 0xcc, 0x62, 0x95, 0x2e, 0xc7, 0x0d, 0xe5, 0xe9, 0xb8, 0xa1, 0xda, 0x0b, 0x98, 0xf1, 0x05,
	0x6c, 0x3e, 0xa2, 0xa2, 0x6d, 0xd9, 0xf4, 0x9b, 0x11, 0xe5, 0x82, 0x1c, 0x42, 0xf1, 0x9c, 0x3a,
	0x3e, 0x8d, 0x25, 0x41, 0xcd, 0x94, 0x3b, 0x27, 0x68, 0xcd, 0x90, 0x48, 0x1c, 0xb9, 0x0d, 0x1b,
	0x6d, 0xab, 0x17, 0x38, 0x43, 0x5a, 0xd7, 0xf6, 0xd4, 0x66, 0xd9, 0x2e, 0xb6, 0xad, 0x27, 0xce,
	0x90, 0x1a, 0x5f, 0x41, 0x55, 0x52, 0xf3, 0x28, 0x0c, 0x38, 0x25, 0xf7, 0x57, 0xb8, 0x6f, 0x99,
	0xb3, 0xad, 0x7f, 0x25, 0xbf, 0x03, 0x9a, 0xef, 0x22, 0x6f, 0xa5, 0x95, 0x33, 0xdb, 0x96, 0x95,
	0x4f, 0x20, 0xb6, 0xe6, 0xbb, 0xc6, 0x0f, 0x2a, 0xdc, 0x7a, 0x44, 0x45, 0x37, 0x72, 0x3c, 0xba,
	0x7e, 0xf6, 0xaf, 0x43, 0xc1, 0x77, 0x7b, 0xcc, 0xc7, 0x18, 0x55, 0xab, 0x36, 0x1d, 0x37, 0xb4,
	0x4e, 0xfb, 0x6a, 0xdc, 0xc8, 0xb7, 0xad, 0x4e, 0xdb, 0xce, 0xfb, 0x6e, 0xc7, 0x27, 0xaf, 0x01,
	0x60, 0x98, 0x54, 0x65, 0x0e, 0x55, 0x96, 0xd1, 0x82, 0x42, 0x19, 0x6c, 0x2d, 0x12, 0x59, 0x5f,
	0xab, 0x01, 0x05, 0x9e, 0x70, 0x48, 0xb9, 0x45, 0x13, 0x19, 0xa5, 0xe2, 0x74, 0xcb, 0x98, 0xa4,
	0xa2, 0xf1, 0x7b, 0xaf, 0x2f, 0xfa, 0xb3, 0x6c, 0xa4, 0xaa, 0xf5, 0x60, 0x3a, 0x6e, 0x14, 0x30,
	0xd8, 0xd5, 0xb8, 0x71, 0xf7, 0x26, 0xbd, 0x98, 0xa6, 0xd6, 0x69, 0xcb, 0xb4, 0xc8, 0x27, 0x90,
	0xe7, 0x83, 0x50, 0x60, 0x69, 0xaa, 0xd6, 0xd1, 0x74, 0xdc, 0xc8, 0x77, 0x07, 0xa1, 0xb8, 0x1a,
	0x37, 0xf6, 0x6f, 0x46, 0x37, 0x08, 0x45, 0x52, 0xed, 0x84, 0xc4, 0xf8, 0x1a, 0xcb, 0x29, 0x25,
	0xae, 0x5f, 0xce, 0x37, 0xa0, 0x18, 0x27, 0x1c, 0xbc, 0xae, 0xed, 0xe5, 0xb0, 0x9e, 0x48, 0x29,
	0xeb, 0x29, 0xf7, 0x8c, 0xe7, 0x2a, 0x6c, 0x9f, 0x76, 0x6d, 0xda, 0x67, 0xc9, 0xf1, 0x5d, 0xbf,
	0xa4, 0x9f, 0x43, 0x31, 0x08, 0x7d, 0xda, 0x69, 0x67, 0x6a, 0x5a, 0x7c, 0x82, 0x96, 0x1b, 0x57,
	0x21, 0x85, 0xdb, 0x92, 0x88, 0xd4, 0x40, 0x63, 0x91, 0xec, 0x36, 0x8d, 0x45, 0xe4, 0x01, 0x6c,
	0xc6, 0xa3, 0x40, 0xb0, 0x21, 0xed, 0xb1, 0xe0, 0x2c, 0xac, 0xe7, 0x31, 0xb5, 0x4d, 0xd3, 0x4e,
	0x8d, 0x9d, 0xe0, 0x2c, 0xcc, 0x24, 0x56, 0x89, 0x17, 0x66, 0xe3, 0x2f, 0x15, 0x48, 0x56, 0xe5,
	0xfa, 0x55, 0xfd, 0x0f, 0x74, 0xee, 0x43, 0xd1, 0x0b, 0x83, 0x33, 0xd6, 0x47, 0xad, 0x95, 0x56,
	0xd9, 0x3c, 0xed, 0x1e, 0xa3, 0x21, 0x1b, 0x3f, 0x85, 0x90, 0x43, 0x80, 0xf9, 0xe5, 0xc5, 0xeb,
	0x79, 0xfc, 0xb2, 0xd9, 0x4b, 0x2e, 0xfd, 0xba, 0x19, 0x8c, 0xf1, 0x77, 0x0e, 0x4a, 0x33, 0x42,
	0x72, 0x0f, 0x4a, 0x71, 0xe4, 0xf5, 0xa2, 0x30, 0x16, 0xa8, 0xb9, 0x6a, 0x91, 0xe9, 0xb8, 0xb1,
	0x61, 0x9f, 0x1e, 0x9f, 0x86, 0x71, 0xd2, 0xaf, 0x39, 0x16, 0x08, 0x7b, 0x23, 0x8e, 0xbc, 0x64,
	0x4d, 0xde, 0x04, 0x70, 0xfc, 0x21, 0x0b, 0x52, 0x87, 0x54, 0xf1, 0xc6, 0x0c, 0x55, 0xc6, 0x2d,
	0xc4, 0xbd, 0x0b, 0xe4, 0x9c, 0x3a, 0xb1, 0x70, 0xa9, 0x23, 0x7a, 0x2c, 0x10, 0x34, 0xfe, 0xd6,
	0x19, 0xc8, 0xd3, 0x30, 0xc7, 0x6f, 0xcf, 0x21, 0x1d, 0x89, 0x20, 0x47, 0xb0, 0x13, 0x3b, 0x67,
	0xa2, 0xb7, 0x70, 0xc6, 0x40, 0xf9, 0x15, 0xc7, 0x04, 0x73, 0x32, 0x83, 0x60, 0xc0, 0x99, 0x63,
	0x4c, 0xa3, 0x01, 0xf3, 0x1c, 0x41, 0x53, 0xc7, 0xc2, 0x0b, 0x1c, 0xed, 0x19, 0x04, 0x1d, 0xdf,
	0x87, 0xdb, 0x2b, 0x11, 0xe7, 0xe9, 0x16, 0x97, 0x9d, 0x5f, 0x5e, 0x8a, 0x3a, 0x4f, 0xb9, 0x09,
	0x5b, 0x32, 0xb2, 0x70, 0x58, 0xd0, 0x1b, 0x84, 0x7d, 0x5e, 0xdf, 0xd8, 0x53, 0x9b, 0x79, 0xbb,
	0x96, 0x46, 0x4b, 0xcc, 0x8f, 0xc3, 0x3e, 0x27, 0x1f, 0x42, 0x3d, 0x9b, 0x63, 0xcf, 0x0b, 0x03,
	0x6f, 0x14, 0xc7, 0x34, 0xf0, 0x2e, 0xea, 0xa5, 0xe5, 0x58, 0xaf, 0x64, 0x12, 0x3d, 0x5e, 0xc0,
	0xc8, 0x31, 0xdc, 0x41, 0x0a, 0x1e, 0x38, 0x11, 0x3f, 0x0f, 0xc5, 0x12, 0x47, 0x79, 0x99, 0x03,
	0x75, 0x75, 0x25, 0x30, 0x43, 0x62, 0x7c, 0xaf, 0x25, 0xcd, 0x3f, 0x57, 0xf2, 0xbf, 0x3a, 0xe3,
	0x6f, 0x2f, 0xb5, 0x73, 0x0e, 0xdb, 0xb9, 0xb6, 0x68, 0x67, 0x3c, 0xd3, 0xd7, 0x5a, 0x9a, 0x1c,
	0x42, 0x99, 0x5f, 0xf0, 0x1e, 0x0e, 0x01, 0xf2, 0x1a, 0xa8, 0x22, 0x73, 0xf7, 0x82, 0x77, 0x13,
	0xa3, 0xf4, 0x29, 0x71, 0xb9, 0x36, 0x4e, 0x60, 0x67, 0xa9, 0x04, 0x6b, 0x5f, 0x00, 0xc6, 0x2f,
	0x1a, 0x54, 0x97, 0xf2, 0x23, 0x1f, 0x83, 0xc6, 0x7c, 0x79, 0x9a, 0x1e, 0xce, 0xdf, 0xcf, 0xc3,
	0x1b, 0x95, 0x63, 0xc1, 0xd4, 0xb6, 0x35, 0xe6, 0x93, 0x57, 0xa1, 0xcc, 0x78, 0x6f, 0x90, 0xe6,
	0x94, 0x54, 0xb9, 0x64, 0x97, 0x18, 0x7f, 0x9c, 0xd6, 0xbf, 0x09, 0xc5, 0x44, 0xf2, 0x88, 0xe3,
	0xc9, 0xaa, 0xb5, 0xb6, 0x16, 0xee, 0x5d, 0xb4, 0xdb, 0x72, 0x9f, 0xec, 0x43, 0x81, 0x46, 0xa1,
	0x77, 0x2e, 0x8b, 0x73, 0x6b, 0x01, 0xfc, 0x28, 0x31, 0xcf, 0xde, 0x54, 0xc4, 0x90, 0xbb, 0x50,
	0x49, 0x9b, 0x2c, 0xe5, 0x2e, 0xa0, 0x4b, 0xc5, 0xb4, 0x93, 0x76, 0x4a, 0x69, 0x21, 0x9e, 0xff,
	0x27, 0xef, 0x00, 0x24, 0x40, 0xc6, 0x05, 0xf3, 0x38, 0x9e, 0x99, 0x25, 0xfe, 0x6c, 0xf9, 0x33,
	0xc0, 0xd6, 0x8f, 0x1a, 0x94, 0x3f, 0xc5, 0x11, 0xd1, 0x8e, 0x3c, 0x72, 0x1f, 0x4a, 0xb3, 0x27,
	0x8e, 0x6c, 0x99, 0x2b, 0x0f, 0xfa, 0xee, 0xb6, 0xb9, 0xfa, 0xfe, 0x19, 0x0a, 0x39, 0x02, 0x58,
	0xdc, 0xe0, 0x84, 0x98, 0xd7, 0x1e, 0xad, 0xdd, 0x1d, 0xf3, 0xfa, 0x15, 0x6f, 0x28, 0xe4, 0x21,
	0x54, 0x32, 0x9f, 0x9e, 0x24, 0xa8, 0xd5, 0xb3, 0xb0, 0xfb, 0x92, 0xf9, 0x82, 0xee, 0x30, 0x14,
	0xd2, 0x84, 0x02, 0x8e, 0x70, 0xa4, 0x6a, 0x66, 0xa7, 0xc4, 0xdd, 0x9a, 0xb9, 0x34, 0xd9, 0x19,
	0x8a, 0x54, 0x84, 0x63, 0x41, 0xaa, 0x28, 0x3b, 0x97, 0xa5, 0x8a, 0x96, 0x06, 0x24, 0x43, 0xb1,
	0x3e, 0xb8, 0x9c, 0xe8, 0xca, 0xef, 0x13, 0x5d, 0x79, 0x36, 0xd1, 0x95, 0x3f, 0x26, 0xba, 0xf2,
	0xe7, 0x44, 0x57, 0xbf, 0x9b, 0xea, 0xea, 0xcf, 0x53, 0x5d, 0xfd, 0x75, 0xaa, 0x2b, 0xbf, 0x4d,
	0x75, 0xe5, 0x72, 0xaa, 0xab, 0x4f, 0xa7, 0xba, 0xfa, 0x6c, 0xaa, 0xab, 0x3f, 0x3d, 0xd7, 0x95,
	0x13, 0xf5, 0xcb, 0x52, 0x3a, 0x6a, 0x47, 0xae, 0x5b, 0xc4, 0x5e, 0x7a, 0xeb, 0x9f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xa5, 0x62, 0x9f, 0x91, 0x7d, 0x0b, 0x00, 0x00,
}

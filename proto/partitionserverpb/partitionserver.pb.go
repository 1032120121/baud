// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: partitionserver.proto

/*
	Package pspb is a generated protocol buffer package.

	It is generated from these files:
		partitionserver.proto

	It has these top-level messages:
		CreateReplicaRequest
		CreateReplicaResponse
*/
package pspb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"

	_ "github.com/gogo/protobuf/gogoproto"

	metapb "."

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateReplicaRequest struct {
	Header           *metapb.RequestHeader     `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Partition        *metapb.Partition         `protobuf:"bytes,2,opt,name=partition" json:"partition,omitempty"`
	ReplicaId        uint32                    `protobuf:"varint,3,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	PartitionServers []*metapb.PartitionServer `protobuf:"bytes,4,rep,name=partition_servers,json=partitionServers" json:"partition_servers,omitempty"`
}

func (m *CreateReplicaRequest) Reset()         { *m = CreateReplicaRequest{} }
func (m *CreateReplicaRequest) String() string { return proto.CompactTextString(m) }
func (*CreateReplicaRequest) ProtoMessage()    {}
func (*CreateReplicaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorPartitionserver, []int{0}
}

func (m *CreateReplicaRequest) GetHeader() *metapb.RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateReplicaRequest) GetPartition() *metapb.Partition {
	if m != nil {
		return m.Partition
	}
	return nil
}

func (m *CreateReplicaRequest) GetReplicaId() uint32 {
	if m != nil {
		return m.ReplicaId
	}
	return 0
}

func (m *CreateReplicaRequest) GetPartitionServers() []*metapb.PartitionServer {
	if m != nil {
		return m.PartitionServers
	}
	return nil
}

type CreateReplicaResponse struct {
	Header *metapb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *CreateReplicaResponse) Reset()         { *m = CreateReplicaResponse{} }
func (m *CreateReplicaResponse) String() string { return proto.CompactTextString(m) }
func (*CreateReplicaResponse) ProtoMessage()    {}
func (*CreateReplicaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorPartitionserver, []int{1}
}

func (m *CreateReplicaResponse) GetHeader() *metapb.ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateReplicaRequest)(nil), "pspb.CreateReplicaRequest")
	proto.RegisterType((*CreateReplicaResponse)(nil), "pspb.CreateReplicaResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PSRpc service

type PSRpcClient interface {
	CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*CreateReplicaResponse, error)
}

type pSRpcClient struct {
	cc *grpc.ClientConn
}

func NewPSRpcClient(cc *grpc.ClientConn) PSRpcClient {
	return &pSRpcClient{cc}
}

func (c *pSRpcClient) CreateReplica(ctx context.Context, in *CreateReplicaRequest, opts ...grpc.CallOption) (*CreateReplicaResponse, error) {
	out := new(CreateReplicaResponse)
	err := grpc.Invoke(ctx, "/pspb.PSRpc/CreateReplica", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PSRpc service

type PSRpcServer interface {
	CreateReplica(context.Context, *CreateReplicaRequest) (*CreateReplicaResponse, error)
}

func RegisterPSRpcServer(s *grpc.Server, srv PSRpcServer) {
	s.RegisterService(&_PSRpc_serviceDesc, srv)
}

func _PSRpc_CreateReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PSRpcServer).CreateReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pspb.PSRpc/CreateReplica",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PSRpcServer).CreateReplica(ctx, req.(*CreateReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PSRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pspb.PSRpc",
	HandlerType: (*PSRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReplica",
			Handler:    _PSRpc_CreateReplica_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partitionserver.proto",
}

func (m *CreateReplicaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReplicaRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPartitionserver(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Partition != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPartitionserver(dAtA, i, uint64(m.Partition.Size()))
		n2, err := m.Partition.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ReplicaId != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPartitionserver(dAtA, i, uint64(m.ReplicaId))
	}
	if len(m.PartitionServers) > 0 {
		for _, msg := range m.PartitionServers {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPartitionserver(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *CreateReplicaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateReplicaResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPartitionserver(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintPartitionserver(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CreateReplicaRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPartitionserver(uint64(l))
	}
	if m.Partition != nil {
		l = m.Partition.Size()
		n += 1 + l + sovPartitionserver(uint64(l))
	}
	if m.ReplicaId != 0 {
		n += 1 + sovPartitionserver(uint64(m.ReplicaId))
	}
	if len(m.PartitionServers) > 0 {
		for _, e := range m.PartitionServers {
			l = e.Size()
			n += 1 + l + sovPartitionserver(uint64(l))
		}
	}
	return n
}

func (m *CreateReplicaResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovPartitionserver(uint64(l))
	}
	return n
}

func sovPartitionserver(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPartitionserver(x uint64) (n int) {
	return sovPartitionserver(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateReplicaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReplicaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReplicaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &metapb.RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Partition == nil {
				m.Partition = &metapb.Partition{}
			}
			if err := m.Partition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaId", wireType)
			}
			m.ReplicaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PartitionServers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PartitionServers = append(m.PartitionServers, &metapb.PartitionServer{})
			if err := m.PartitionServers[len(m.PartitionServers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPartitionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateReplicaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPartitionserver
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateReplicaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateReplicaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPartitionserver
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &metapb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPartitionserver(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPartitionserver
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPartitionserver(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPartitionserver
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPartitionserver
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPartitionserver
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPartitionserver
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPartitionserver(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPartitionserver = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPartitionserver   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("partitionserver.proto", fileDescriptorPartitionserver) }

var fileDescriptorPartitionserver = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xdd, 0x4a, 0xc3, 0x30,
	0x14, 0x5e, 0xdc, 0x1c, 0xec, 0x8c, 0xc1, 0x16, 0x36, 0x2d, 0x15, 0x4b, 0xe9, 0x55, 0x6f, 0xcc,
	0xa0, 0xbe, 0x81, 0x0a, 0xfe, 0x5c, 0x8d, 0xf4, 0x01, 0x46, 0xbb, 0x1e, 0x66, 0x41, 0x4d, 0x4c,
	0xa2, 0xcf, 0xe2, 0x23, 0x79, 0xe9, 0xbd, 0x37, 0x52, 0x5f, 0x44, 0x9a, 0x74, 0x1b, 0x9d, 0xbb,
	0x3b, 0x7c, 0x3f, 0xe7, 0xe4, 0xfb, 0x02, 0x33, 0x99, 0x29, 0x53, 0x9a, 0x52, 0xbc, 0x68, 0x54,
	0xef, 0xa8, 0x98, 0x54, 0xc2, 0x08, 0xda, 0x93, 0x5a, 0xe6, 0xfe, 0x74, 0x2d, 0xd6, 0xc2, 0x02,
	0xf3, 0x7a, 0x72, 0x9c, 0x0f, 0xcf, 0x68, 0x32, 0x37, 0x47, 0xdf, 0x04, 0xa6, 0xd7, 0x0a, 0x33,
	0x83, 0x1c, 0xe5, 0x53, 0xb9, 0xca, 0x38, 0xbe, 0xbe, 0xa1, 0x36, 0xf4, 0x02, 0xfa, 0x8f, 0x98,
	0x15, 0xa8, 0x3c, 0x12, 0x92, 0x78, 0x98, 0xcc, 0x58, 0xed, 0x92, 0x39, 0x6b, 0x04, 0x77, 0x96,
	0xe4, 0x8d, 0x88, 0xce, 0x61, 0xb0, 0x7d, 0x88, 0x77, 0x64, 0x1d, 0x93, 0x8d, 0x63, 0xb1, 0x21,
	0xf8, 0x4e, 0x43, 0xcf, 0x01, 0x94, 0xbb, 0xb8, 0x2c, 0x0b, 0xaf, 0x1b, 0x92, 0x78, 0xc4, 0x07,
	0x0d, 0x72, 0x5f, 0xd0, 0x1b, 0x98, 0x6c, 0xb5, 0x4b, 0x97, 0x4c, 0x7b, 0xbd, 0xb0, 0x1b, 0x0f,
	0x93, 0xd3, 0x7f, 0x7b, 0x53, 0xcb, 0xf3, 0xb1, 0x6c, 0x03, 0x3a, 0xba, 0x85, 0xd9, 0x5e, 0x38,
	0x2d, 0xeb, 0xa2, 0x28, 0xdb, 0x4b, 0x77, 0xb2, 0x4b, 0xe7, 0x14, 0xed, 0x78, 0x49, 0x0a, 0xc7,
	0x8b, 0x94, 0xcb, 0x15, 0x7d, 0x80, 0x51, 0x6b, 0x23, 0xf5, 0x59, 0xdd, 0x34, 0x3b, 0xd4, 0xa1,
	0x7f, 0x76, 0x90, 0x73, 0x07, 0xa2, 0xce, 0xd5, 0xf8, 0xb3, 0x0a, 0xc8, 0x57, 0x15, 0x90, 0x9f,
	0x2a, 0x20, 0x1f, 0xbf, 0x41, 0x27, 0xef, 0xdb, 0x4f, 0xb9, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x2a, 0xde, 0xf7, 0x8c, 0xd5, 0x01, 0x00, 0x00,
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/tiglabs/baudengine/gm (interfaces: ZoneMasterRpcClient)

// Package gm is a generated GoMock package.
package gm

import (
	gomock "github.com/golang/mock/gomock"
	metapb "github.com/tiglabs/baudengine/proto/metapb"
	reflect "reflect"
)

// MockZoneMasterRpcClient is a mock of ZoneMasterRpcClient interface
type MockZoneMasterRpcClient struct {
	ctrl     *gomock.Controller
	recorder *MockZoneMasterRpcClientMockRecorder
}

// MockZoneMasterRpcClientMockRecorder is the mock recorder for MockZoneMasterRpcClient
type MockZoneMasterRpcClientMockRecorder struct {
	mock *MockZoneMasterRpcClient
}

// NewMockZoneMasterRpcClient creates a new mock instance
func NewMockZoneMasterRpcClient(ctrl *gomock.Controller) *MockZoneMasterRpcClient {
	mock := &MockZoneMasterRpcClient{ctrl: ctrl}
	mock.recorder = &MockZoneMasterRpcClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockZoneMasterRpcClient) EXPECT() *MockZoneMasterRpcClientMockRecorder {
	return m.recorder
}

// AddReplica mocks base method
func (m *MockZoneMasterRpcClient) AddReplica(arg0 string, arg1 uint64, arg2 *metapb.Replica) error {
	ret := m.ctrl.Call(m, "AddReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReplica indicates an expected call of AddReplica
func (mr *MockZoneMasterRpcClientMockRecorder) AddReplica(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReplica", reflect.TypeOf((*MockZoneMasterRpcClient)(nil).AddReplica), arg0, arg1, arg2)
}

// Close mocks base method
func (m *MockZoneMasterRpcClient) Close() {
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockZoneMasterRpcClientMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockZoneMasterRpcClient)(nil).Close))
}

// CreatePartition mocks base method
func (m *MockZoneMasterRpcClient) CreatePartition(arg0 string, arg1 *metapb.Partition) (*metapb.Replica, error) {
	ret := m.ctrl.Call(m, "CreatePartition", arg0, arg1)
	ret0, _ := ret[0].(*metapb.Replica)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition
func (mr *MockZoneMasterRpcClientMockRecorder) CreatePartition(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockZoneMasterRpcClient)(nil).CreatePartition), arg0, arg1)
}

// DeletePartition mocks base method
func (m *MockZoneMasterRpcClient) DeletePartition(arg0 string, arg1 uint64) error {
	ret := m.ctrl.Call(m, "DeletePartition", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePartition indicates an expected call of DeletePartition
func (mr *MockZoneMasterRpcClientMockRecorder) DeletePartition(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePartition", reflect.TypeOf((*MockZoneMasterRpcClient)(nil).DeletePartition), arg0, arg1)
}

// RemoveReplica mocks base method
func (m *MockZoneMasterRpcClient) RemoveReplica(arg0 string, arg1 uint64, arg2 *metapb.Replica) error {
	ret := m.ctrl.Call(m, "RemoveReplica", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveReplica indicates an expected call of RemoveReplica
func (mr *MockZoneMasterRpcClientMockRecorder) RemoveReplica(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveReplica", reflect.TypeOf((*MockZoneMasterRpcClient)(nil).RemoveReplica), arg0, arg1, arg2)
}
